//-----------------------------------------------------------------------------------------
/*                              ~~GaminG Of Life~~
                             *By lApOlNistar & Created in 2011
                          *Site : http://gamingofliferoleplay.forum2jeux.com/
                                *Merci à :
                                    - lApOlNistar
                                    -
Si vous utilisez notre GM , Merçi de laissé le /credits jusqu'à ce que le Gm soit bien modifié .

*/
//--------------------------[Début du Script GaminG Of Life]--------------------------

#include <a_samp> /* include samp à ne pas enlever */
#include <core>  /* include à ne pas enlever */
#include <float> /* include à ne pas enlever */
#include <time> /* include à ne pas enlever */
#include <file> /* include à ne pas enlever */
#include <bfx_objects> /* include pour le Tuning */
#include <utils> /* include à ne pas enlever */
#include <morphinc> /* include à ne pas enlever */
#include <JunkBuster> /* Anti Cheat à ne pas enlever */
#include <SimStream>  /* include à ne pas enlever (pour les objects ...) */



new Clicked[MAX_PLAYERS] = -1;
new OnDuty[MAX_PLAYERS];
new Avertissement[MAX_PLAYERS] = 0;
new devent = 0;
new Text:Atext;
enum pInfo
{
	pKey[128],
	pLevel,
	pAdmin,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pCK,
	pMuted,
	pExp,
	pAccount,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob,
	pPayCheck,
	pHeadValue,
	pJailed,
	Radio,
	Frequence,
	pJailTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pNewsSkill,
	pCarSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pPhousekey,
	pGangKey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pCarTime,
	pPayDay,
	pPayDayHad,
	pWatch,
	pCrashed,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pMissionNr,
	pWarns,
	pVirWorld,
	pFuel,
	pMarried,
	pMarriedTo[128],
	pFishTool,
	pNote1[128],
	pNote1s,
	pNote2[128],
	pNote2s,
	pNote3[128],
	pNote3s,
	pNote4[128],
	pNote4s,
	pNote5[128],
	pNote5s,
	pInvWeapon,
	pInvAmmo,
	pLighter,
	pCigarettes,
	pBiere,
	pRequestingBackup,
	pRoadblock,
	pMask,
	pMaskuse,
	pHideNumber,
	pSpeaker,
	pLocked,
	pCash,
	//pSQLID,
	Decoder,
	probbank,
};
new PlayerInfo[MAX_PLAYERS][pInfo];
#include <gveh>
static gTeam[MAX_PLAYERS];
new msg[MAX_PLAYERS][128];
/*
new AMener[MAX_PLAYERS] = -1;
forward FMener(playerid,id);
new TimerMener[MAX_PLAYERS];*/
#pragma dynamic 16384
new InSpec[MAX_PLAYERS];
new	gunamm;
new VoirMp[MAX_PLAYERS];
new Grille[14];
new Asweapon[MAX_PLAYERS][13][2];
new weapons[] =
{
	-1, // no fists
	-1, // - Brass Knuckles
	-1, // Golf Club
	-1, // Night Stick
	-1, // Knife
	-1, // baseball bat
	-1, // shovel
	-1, // pool cue
	-1, // katama
	-1, // chainsaw
	-1, // regular dildo
	-1, // white dildo
	-1, // Medium, white vibrator
	-1, // smaill, silver vibrator
	-1, // flowers
	-1, // cane
	342, // grendade
	-1, // tear gas
	-1, // molotov
	-1, // RPG rocket - we can't pick up those, do we oO
	-1, // Heat-Seeking Rocket
	-1, // Hydra rocket
	346, // colt 45
	347, // colt 45 + silencer
	348, // deagle
	349, // shotgun
	350, // sawn-off
	351, // spaz
	352, // micro-uzi
	353, // mp5
	355, // ak47
	356, // m4
	372, // tec9
	357, // country rifle
	358, // sniper rifle
	-1, // rocket launcher
	-1, // heat-seeking rocket launcher
	-1, // flamethrower
	-1, // minigun
	-1, // sachtel charges
	-1, // detonator
	-1, // spray can
	-1, // fire extinguisher
	-1, // camera
	-1, // night-vision goggles
	-1, // heat-vision goggles
	371 // parachute
};

enum pickup
{
	creation_time,
	weaponpickup,
	ammopickup,
    timerpickup
}
new pickupsdeath [ MAX_PICKUPS ][ pickup ];


#define MAJOR_VERSION               "V"
#define MINOR_VERSION               "(BETA)1.0"
#define BUG_FIXE                    ""
#define NOM_SERVEUR                 "Angel-Pines RP"
#define URL_SERVEUR                 ""
#define COLOR_ASKQ                  0xFF0000FF
#define COLOR_GRAD1                 0xB4B5B7FF
#define COLOR_GRAD2                 0xBFC0C2FF
#define COLOR_GRAD3                 0xCBCCCEFF
#define COLOR_GRAD4                 0xD8D8D8FF
#define COLOR_GRAD5                 0xE3E3E3FF
#define COLOR_RED                   0xBD0000FF
#define COLOR_GRAD6                 0xF0F0F0FF
#define COLOR_GREY                  0xAFAFAFAA
#define COLOR_GREEN                 0x9EC73DAA
#define COLOR_GROVE                 0x00FF00FF
#define COLOR_LIGHTRED              0xFF6347AA
#define COLOR_LIGHTBLUE             0x33CCFFAA
#define COLOR_LIGHTGREEN            0x9ACD32AA
#define COLOR_YELLOW                0xDABB3EAA
#define COLOR_YELLOW2               0xF5DEB3AA
#define COLOR_YELLOW3      	        0xF2FB25FF
#define COLOR_ORANGE                0xF64000F6
/*#define MAX_PINGO                   2500*/
#define COLOR_WHITE                 0xFFFFFFAA
#define COLOR_FADE1                 0xE6E6E6E6
#define COLOR_FADE2                 0xC8C8C8C8
#define COLOR_FADE3                 0xAAAAAAAA
#define COLOR_FADE4                 0x8C8C8C8C
#define COLOR_FADE5                 0x6E6E6E6E
#define COLOR_PURPLE                0xC2A2DAAA
#define COLOR_DBLUE                 0x2641FEAA
#define COLOR_ALLDEPT               0xFF8282AA
#define COLOR_NEWS                  0x458E1DAA
#define COLOR_OOC                   0xB1C8FBAA
#define OBJECTIVE_COLOR             0x64000064
#define TEAM_GREEN_COLOR            0xFFFFFFAA
#define TEAM_JOB_COLOR              0xFFB6C1AA
#define TEAM_HIT_COLOR              0xFFFFFF00
#define TEAM_BLUE_COLOR             0x8D8DFF00
#define TEAM_RADIO_COLOR            0xF2D068FF
#define COLOR_ADD                   0x63FF60AA
#define TEAM_GROVE_COLOR            0x00D900C8
#define TEAM_VAGOS_COLOR            0xFFC801C8
#define TEAM_BALLAS_COLOR           0xD900D3C8
#define TEAM_AZTECAS_COLOR          0x01FCFFC8
#define TEAM_CYAN_COLOR             0xFF8282AA
#define TEAM_ORANGE_COLOR           0xFF830000
#define TEAM_COR_COLOR              0x39393900
#define TEAM_BAR_COLOR              0x00D90000
#define TEAM_TAT_COLOR              0xBDCB9200
#define TEAM_CUN_COLOR              0xD900D300
#define TEAM_STR_COLOR              0x01FCFF00
#define TEAM_ADMIN_COLOR            0x00808000
#define COLOR_INVIS                 0xAFAFAF00
#define COLOR_SPEC                  0xBFC0C200
#define COLOR_BLUE                  0x2641FEAA
#define COLOR_DARKNICERED           0x9D000096
#define COLOR_LIGHT_BLUE            0x9FB1EEAA
#define YELLOW                      0xFFFF00FF
#define ORANGE                      0xF97804FF
#define GRAY                        0xCECECEFF
#define LIGHTBLUE                   0x00C2ECFF
#define cop_color                   0xC2A2DAFF
#define COLOR_BLACK                 0x000000FF
#define COLOR_NICERED               0xFF0000FF
#define Login                       1
#define Register                    2
#define INTERIORMENU 1337
#define Text_Minimap                " ~w~ "
#define MAX_INVALID_NOS_VEHICLES    44
#define MAX_STRING                  255
#define MAX_STREAM_OBJECT           400
#define DIALOGID                    1200
#define GUNSHOP                     600
#define SHOP                        650
#define CHECKPOINT_NONE             0
#define MAX_VEHICULES               2000
#define CHECKPOINT_HOME             12
#define DrivingTestCash             5000 
#define TooSlow                     120 
#define TooFast                     105 
#define MINVEHHP                    900 
#define RunOutTime                  25000
#define RefuelWait                  5000
#define CAR_AMOUNT                  700 
#define TEAM_CYAN                   1
#define TEAM_BLUE                   2
#define TEAM_GREEN                  3
#define TEAM_ORANGE                 4
#define TEAM_COR                    5
#define TEAM_BAR                    6
#define TEAM_TAT                    7
#define TEAM_CUN                    8
#define TEAM_STR                    9
#define TEAM_HIT                    10
#define TEAM_ADMIN                  11
#define SLOTS                       500
#define MAX_PICKUP                  2000
#define PICKUP_TYPE					19
#define MAX_DROP_AMOUNT				-1 // -1= on ajoute toutes les munition  ou alors o, mais 200 pour avoir 200 munition maxi
#define MAX_DROP_LIFETIME			15 // ici le temp de destruction des pickups 15 sec par defaults
#define WEAPON_SLOTS				13
#define INVALID_PICKUP				-1
#pragma semicolon                   0
#define MAX_TRUNK_SLOTS	        	(5) 
#define MAX_VEHICLE_MODELS      	(70)
#define MAX_PLYVEH_RATIO        	(20) 
#define MAX_VEHICLE_PLATE       	(7)
#pragma tabsize                     0
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
#define NombreAnnonces 5
#define	Orange 	0xF47A00FF
#define Vert 	0x00D500FF
#define Bleu	0x0000BFFF
#define Gris 	0xC0C0C0FF
#define Rouge 	0xD90000FF
#define SPECIAL_ACTION_PISSING 68
// Menu Tunage
#define DIALOGID2 2200
#define DIALOGID1 3300 // ID du Dialog
#define nitro 1010 // Composant
#define rodawire 1081 // Composant
#define suspensao 1087 // Composant




forward ChangeHostname(); // Vous pouvez modifier ou enlever ce systeme ...
forward RefreshMenuHeader(playerid,Menu:menu,text[]);
new Menu:burgermenu, Menu:chickenmenu, Menu:pizzamenu, Menu:donutshop;
new Menu:Guide, Menu:JobLocations, Menu:JobLocations2;
new sorti[MAX_PLAYER_NAME];
new timer;
/*forward PingKicker();*/
new Averto[MAX_PLAYERS];
forward OnVehicleRespray(playerid, vehicleid, color1, color2)
forward OnVehiclePaintjob(playerid, vehicleid, paintjobid)
forward NameTimer1()
forward CheckForWalkingTeleport(playerid);
forward ResetRoadblockTimer();
forward BackupClear(playerid, calledbytimer);
forward RemoveRoadblock(playerid);
forward BackupClear(playerid, calledbytimer);
forward IsABike(carid);
forward FermerBarrierePolice1();
forward FermerBarrierePolice2();
forward Statistique();
forward FermerRacer1();
forward FermerRacer2();
forward Fermeraeroport();
forward Fermerfourriere1();
forward Fermerfourriere2();
forward FermerBarriererusse();
forward Fermercosa1();
forward Fermercosa2();
forward Fermercosa3();
forward FermerArmee1();
forward IsATank(carid);
forward DonnerThune(playerid);
forward RobTimer(playerid);
forward elevator1(playerid);
forward SetTeamBlipToPlayer(team, color, playerid);
forward elevator2(playerid);
forward LoadProperty();
forward LoadBizz();
forward LoadSBizz();
forward DestroyPickupEx( p );
forward LoadStuff();
forward LoadStat();
forward SaveStuff();
forward SaveStat();
forward LoadCK();
forward SaveCK();
forward LoadFamilies();
forward SaveFamilies();
forward LoadPapers();
forward SavePapers();
forward LoadBoxer();
forward SaveBoxer();
forward OnPropUpdate();
forward ExtortionBiz(bizid, money);
forward ExtortionSBiz(bizid, money);
forward JoinChannel(playerid, number, line[]);
forward JoinChannelNr(playerid, number);
forward IsAtClothShop(playerid);
forward IsAtFishPlace(playerid);
forward IsAtCookPlace(playerid);
forward IsAtBar(playerid);
forward SearchingHit(playerid);
forward DollahScoreUpdate();
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz);
forward CrimInRange(Float:radi, playerid,copid);
forward SendEnemyMessage(color, string[]);
forward SendTeamBeepMessage(team, color, string[]);
forward ABroadCast(color, string[]);
forward DateProp(playerid);
forward GetClosestPlayer(p1);
forward LoadMission(playerid,name[]);
forward SaveMission(playerid,name[]);
forward PrintBizInfo(playerid,targetid);
forward PrintSBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward OtherTimer();
forward RingTonerRev();
forward RingToner();
forward HireCost(carid);
forward BanLog(string[]);
forward KickLog(string[]);
forward PayLog(string[]);
forward CKLog(string[]);
forward IsATruck(carid);
forward IsATruck2(carid);
forward IsAPizzabike(carid);
forward IsABus(carid);
forward IsATowcar(carid);
forward IsAnAmbulance(carid);
forward IsACopCar(carid);
forward IsAJournaliste(carid);
forward IsToAnDistributeur(playerid);
forward IsAnFbiCar(carid);
forward IsAKart(carid);
forward IsAnInstructionVehicule(carid);
forward IsAnCamion(carid);
forward IsAnTaxi(carid);
forward IsAnBus(carid);
forward IsAnLoccationVehicule(carid);
forward IsAnLoccationMoto(carid);
forward IsAnCar(carid);
forward IsNgCar(carid);
forward IsBCar(carid);
forward IsRCar(carid);
forward IsMCar(carid);
forward IsAGovernmentCar(carid);
forward IsAtCarrental(playerid);
forward IsAPlane(carid);
forward IsAHarvest(carid);
forward IsADrugHarvest(carid);
forward IsASmuggleCar(carid);
forward IsASweeper(carid);
forward IsACop(playerid);
forward IsAPDMember(playerid);
forward IsAMember(playerid);
forward IsAnInstructor(playerid);
forward Spectator();
forward ConvertTicks(ticks);
forward Encrypt(string[]);
forward KartingEnded();
forward StartKarting();
forward PrepareKarting();
forward PaintballEnded();
forward StartPaintball();
forward PreparePaintball();
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward GameModeExitFunc();
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerCriminalEx(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerUpdate(playerid);
forward OnPlayerRegister(playerid, password[]);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward OOCNews(color,const string[]);
forward SendJobMessage(job, color, string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendNewFamilyMessage(family, color, string[]);
forward SendTeamMessage(team, color, string[]);
forward SendRadioMessage(member, color, string[]);
forward SendRadioFrequenceMessage(color,const string[]);
forward SendAdminMessage(color, string[]);
forward SendNouveauMessage(color, string[]);
forward AddCar(carcoords);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ClearCK(ck);
forward ClearFamily(family);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward FishCost(playerid, fish);
forward ClearFishes(playerid);
forward ClearFishID(playerid, fish);
forward ClearCooking(playerid);
forward ClearCookingID(playerid, cook);
forward ClearGroceries(playerid);
forward Lotto(number);
forward CarCheck();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward LockCar(carid);
forward UnLockCar(carid);
forward InitLockDoors(playerid);
forward StoppedVehicle();
forward SyncTime();
forward SyncUp();
forward SaveAccounts();
forward IsPlayerInZone(playerid, zoneid);
forward Production();
forward PayDay();
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward PlayerFixRadio(playerid);
forward PlayerFixRadio2();
forward HouseLevel(playerid);
forward CHouseLevel(houseid);
forward CustomPickups();
forward IdleKick();
forward SetCamBack(playerid);
forward FixHour(hour);
forward AddsOn();
forward IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy);
forward AdvertiseToPlayersAtBusStop(Float:stopX, Float:stopY, Float:stopZ, eastorwest);
forward SendBusRoute(playerid, eastorwest);
forward IsInBusrouteZone(playerid);
forward BusrouteEnd(playerid, vehicleid);
forward CreateFoodMenus();
forward OnPlayerEnterFood(playerid, foodid);
forward OnPlayerExitFood(playerid);
forward ClearChatbox(playerid, lines);
forward CreateGuideMenus();
forward busroutestoptimer(playerid);
forward FarmerExit(playerid);
forward DrugFarmerExit(playerid);
forward LoadDrugSystem();
forward SaveDrugSystem();
forward LoadMatsSystem();
forward MatsSystem();
forward LoadingDrugsForSmugglers(playerid);
forward SmugglerExit(playerid);
forward SafeGivePlayerWeapon(plyid, weaponid, ammo);
forward SafeResetPlayerMoney(plyid);
forward SafeResetPlayerWeapons(plyid);
forward UpdateWeaponSlots(plyid);
forward BanAdd(bantype, sqlplayerid, ip[], hackamount);
forward UnsetFirstSpawn(playerid);
forward LoadHQLocks();
forward SaveHQLocks();
forward ClearKnock(playerid);
forward DrugEffectGone(playerid);
forward UsingDrugsUnset(playerid);
forward CrashPlayer(playerid);
forward UnsetAfterTutorial(playerid);
forward AfterSpray1(playerid);
forward AfterSpray2(playerid);
forward AfterSpray3(playerid);
forward AfterSpray4(playerid);
forward UnsetCrash(playerid);
forward backtoclothes(playerid);
forward RemovePlayerWeapon(playerid, weaponid);
forward SaveTrunk();
forward LoadTrunk();
forward UpdateBurgerPositions();
forward ShowMenuBurger(i);
forward UpdateChickenPositions();
forward ShowMenuChicken(i);
forward CanDriveThruAgain(playerid);
forward Float:GetDistance(playerid, Float:x, Float:y);
forward TraceLastCall();
forward ReportReset(playerid);
forward ReduceTimer(playerid);
forward RobTimer(playerid);
forward EnvoiAnnonce();
forward IsACopSkin(skinid);
forward IsAOBike(carid);
forward DesactiverSpeedo(playerid);
forward Decodage(playerid);

enum SavePlayerPosEnum {
Float:LastX,
Float:LastY,
Float:LastZ
}
new SavePlayerPos[SLOTS][SavePlayerPosEnum];
new UpdateSeconds;
new Menu:Aide;
new Menu:Aide1;
new GangCar[MAX_PLAYERS];
new tactical[MAX_PLAYERS];
new authorizetactical;
new ilbraque[MAX_PLAYERS] = 0;
new robmoney;
/*new NombreBraqueur = 0;
new Braqueur[MAX_PLAYER_NAME];*/
new braquagetimer;
new braquageencours = 0;
new lathune;
new Security = 0;
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new Text:txtAnimHelper;
new CreatedCars[100];
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new ArgentGouv = 0;
new Connextion = 0;
new Connect = 0;
new Deconnextion = 0;
new Maxconnextion = 0;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills = 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
// Grille Faction LVV
new police1;
new police2;
new racer1;
new racer2;
new lspddoor1;
new lspddoor2;
new lspddoor3;
new lspddoor4;
new lspddoor5;
new lspddoor6;
new lspddoor7;
new lspddoor8;
new aeroport;
new fourriere1;
new fourriere2;
new armee1;
new russe;
new Train1;
new Train2;
new Train3;
new Avion1;
new Avion2;
new Avion3;
new cosa1;
new cosa2;
new cosa3;
// Zone Gang
new zonecrip;
new zoneballas;
/*new zonecosa;*/
new zonevagos;
/*new zoneleone;
new zonerusse;
new zoneyakuza;*/
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new TBoxer = 255;
new PlayerBoxing[MAX_PLAYERS];
/*new hitfound = 0;
new hitid = 999;*/
new Medics = 0;
new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = 999;
new ScriptMoney[MAX_PLAYERS];
new ScriptWeapons[MAX_PLAYERS][13];
new ScriptMoneyUpdated[MAX_PLAYERS];
new ScriptWeaponsUpdated[MAX_PLAYERS];
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new GettingCK[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new PlayerOnMission[MAX_PLAYERS];
new MissionCheckpoint[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new MatsHolding[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS];
new GotPaper[MAX_PLAYERS];
new WritingPaper[MAX_PLAYERS];
new WritingPaperNumber[MAX_PLAYERS];
new WritingLine[MAX_PLAYERS]; 
new FishCount[MAX_PLAYERS];
new SpawnChange[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new TestFishes[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new Flicservice = 0;
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new bailloner[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new KickPlayer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new WantedLevel[MAX_PLAYERS];
new swat[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[301];
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new Specing[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
new gSpentCash[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gPlayerMission[MAX_PLAYERS];
new BusrouteEast[MAX_PLAYERS][2];
new BusrouteWest[MAX_PLAYERS][2];
new Float:BusShowLocation[MAX_PLAYERS][4];
new BusShowLocationC[MAX_PLAYERS];
new InAFoodPlace[MAX_PLAYERS];
new gLastDriver[302];
new gCarLock[265];
new noooc = 0;
new adds = 1;
new addtimer = 60000;
new carselect[15];
new objstore[128];
new cbjstore[128];
new motd[256];
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new realtime = 1;
new wtime = 16;
new deathcost = 100;
new callcost = 4;
new realchat = 1;
new timeshift = 0;
new shifthour;
new othtimer;
new hackchecktimer;
new synctimer;
new newmistimer;
new unjailtimer;
new pickuptimer;
new spectatetimer;
new idletimer;
new productiontimer;
new accountstimer;
new stoppedvehtimer;
new cartimer;
new levelexp = 4;
new idletime = 600000; 
new civnokill = 0;
new suecost = 100;
new cchargetime = 60;
new txtcost = 1;
new pickups;
new authorizeswat;
new PizzaBoys = 0;
new PizzaCall = 999;
new PizzaCallTime[MAX_PLAYERS];
new bPizza[MAX_PLAYERS];
new sPizza[MAX_PLAYERS];
new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 250, 263, 274, 301, 309, 342, 368, 389, 402, 433, 502 };
new SELLCAR2[] = { 504, 509, 525, 531, 538, 544, 548, 555, 568, 577, 580 };
new SELLCAR3[] = { 586, 591, 594, 599, 603, 609, 611, 619, 623, 631, 633 };
new SELLCAR4[] = { 642, 648, 653, 661, 668, 672, 674, 687, 693, 698, 703 };
new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TelePos[MAX_PLAYERS][6];
new roadblocktimer = 0;
new engineOn[MAX_VEHICLES];
new gEngine[MAX_PLAYERS];
new FarmerVar[MAX_PLAYERS];
new FarmerPickup[MAX_PLAYERS][2];
new DrugFarmerVar[MAX_PLAYERS];
new DrugFarmerPickup[MAX_PLAYERS][2];
new JustStarted[MAX_PLAYERS];
new SmugglerWork[MAX_PLAYERS];
new SmuggledDrugs[MAX_PLAYERS];
new PayDaySecure[MAX_PLAYERS];
new JustDied[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new UnidentifedCall[MAX_PLAYERS];
new PermisOffer[MAX_PLAYERS];
new PermisPrice[MAX_PLAYERS];
new PermisType[MAX_PLAYERS];
new DefaultWeather = 10;
new UsingDrugs[MAX_PLAYERS];
new AfterTutorial[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
new PlayerIsSweeping[MAX_PLAYERS];
new PlayerIsTrucking[MAX_PLAYERS];
new PlayerIsPizzabiking[MAX_PLAYERS];
// ------------
new vehTrunkCounter[MAX_VEHICLES] = 1;
new vehTrunk[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new vehTrunkAmmo[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new Float:vehTrunkArmour[MAX_VEHICLES];
// ------------
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new BurgerPickUp[9];
new ChickenPickUp[9];
new Menu:BurgerShot;
new Menu:CluckinBell;
new IsMenuShowed[MAX_PLAYERS] = 0;
new burgertimer;
new	chickentimer;
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new tracetimer;
new JustReported[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new AdminSpec[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new IsDrinking[MAX_PLAYERS];
new UsingSmokeAnim[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new CreatingGun[MAX_PLAYERS];
new CreatingGunAmmo[MAX_PLAYERS];
new CreatingGunPrice[MAX_PLAYERS];
new IsPuttingMaterials[MAX_PLAYERS];
new IsTakingGun[MAX_PLAYERS];
new casque[MAX_PLAYERS] = 0;
new ceinture[MAX_PLAYERS] = 0;
/*new grilleouverte[MAX_PLAYERS] = 0;*/
new desactivetext[MAX_PLAYERS] = 0;
/*new blindebanque;
new mdpbanque = 0;*/
new lavoituregarer[MAX_PLAYERS];

new Text3D:bizsale
new Text3D:sbizsale
new Gas[CAR_AMOUNT];




// DMV 

new SpeedMode = 1;
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

new Music[MAX_PLAYERS];

new Float:BurgerDriveIn[6][3] = {
	{801.5522, -1628.91, 13.3828},
	{1209.958,-896.7405, 42.9259},
	{-2341.86, 1021.184, 50.6953},
	{2485.291, 2022.611, 10.8203},
	{1859.496, 2084.797, 10.8203},
	{-2349.49, -152.182, 35.3203}
};

new Float:ChickenDriveIn[3][3] = {
	{2409.651, -1488.65, 23.8281},
	{2377.733, -1909.27, 13.3828},
	{2375.014, 2021.186, 10.8203}
};
new Float:Distributeurs[10][3] = {
    {1548.9041748047, -1651.3461914063, 12.583034515381},
    {1927.490234375, -1787.5278320313, 12.56561088562},
    {1752.4538574219, -1890.1553955078, 12.582424163818},
    {1186.9754638672, -1370.3284912109, 12.602889060974},
    {826.38848876953, -1346.8247070313, 12.580773353577},
    {395.89227294922, -1805.4340820313, 6.8550386428833},
    {1317.6267089844, -898.53979492188, 38.553062438965},
    {1349.1949462891, -1758.4895019531, 12.507827758789},
    {2227.7612304688, -1716.6535644531, 12.648428916931},
	{2154.4487304688, -1020.2987670898, 62.070106506348}
};
new NitroOffer[MAX_PLAYERS];
new NitroPrice[MAX_PLAYERS];
new NitroCar[MAX_PLAYERS];
new HydrauOffer[MAX_PLAYERS];
new HydrauPrice[MAX_PLAYERS];
new HydrauCar[MAX_PLAYERS];
new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacket"},
{"Amberjack"},
{"Grouper"},
{"Red Snapper"},
{"Pants"},
{"Trout"},
{"Blue Marlin"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Shoes"},
{"Pike"},
{"Sail Fish"},
{"Garbage"},
{"Tuna"},
{"Eel"},
{"Dolphin"},
{"Shark"},
{"Turtle"},
{"Catfish"},
{"Money Bag"},
{"Swordfish"}
};

new Float:PaintballSpawns[7][3] = {
{-394.8027,2232.2317,42.4297},
{-430.8412,2240.5371,42.9834},
{-369.2361,2248.3127,42.4844},
{-350.8910,2218.0215,42.4912},
{-384.0544,2206.2908,42.4235},
{-395.7100,2214.9480,42.4297},
{-445.3718,2222.5481,42.4297}
};

/*new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};*/

new Float:gMedicSpawns[6][4] = {
{1156.3943,-1311.4524,1024.7573,106.1032},
{1136.3345,-1313.0745,1024.7646,151.1728},
{1156.5773,-1307.5818,1024.7573,82.9487},
{1156.3943,-1311.4524,1024.7573,106.1032},
{1136.3345,-1313.0745,1024.7646,151.1728},
{1156.5773,-1307.5818,1024.7573,82.9487}
};

new Float:gCopPlayerSpawns[2][3] = {
{234.8706,113.0723,1003.2188},
{234.8706,113.0723,1003.2188}
};

new Float:gMedPlayerSpawns[2][3] = {
{1178.1,-1321.0,14.1},
{1177.7,-1325.0,14.0}
};

new Float:gSweeperPoints[16][3] = {
{2003.3517,-1730.5336,13.1080},
{2243.8682,-1895.1603,13.1057},
{2872.5264,-1507.8936,10.5887},
{2733.4851,-1079.1128,69.0215},
{2491.6882,-1096.9484,48.1798},
{1973.2815,-1173.0474,25.6866},
{1441.3285,-1038.8422,23.4461},
{1041.5815,-776.1030,104.3925},
{958.6799,-1034.2134,29.8119},
{995.9623,-1351.8215,13.0737},
{793.3896,-1583.4993,13.1155},
{368.1902,-1977.2362,7.3970},
{834.1572,-1794.8837,13.5680},
{1243.4885,-1853.9174,13.1080},
{1527.9438,-1663.3240,13.1080},
{2083.6062,-1843.3563,13.1080}
};

new Float:gTruckPoints[6][3] = {
{-1325.8624,2672.0102,50.0625},
{2110.8662,917.9970,10.8203},
{2202.9533,2469.9072,10.8203},
{-92.7453,-1174.1271,2.2856},
{2146.8703,2748.3913,9.8453},
{-1473.9130,1862.9222,32.6328}
};

new Float:gPizzabikePoints[8][3] = {
{2101.7648,-1227.9803,23.6265},
{2489.9719,-1143.8891,37.2123},
{2192.7573,-1003.7776,61.4919},
{1339.9655,-1096.1041,23.2985},
{1156.7666,-1071.4857,27.1571},
{968.7697,-1095.9993,22.8386},
{911.2743,-1443.0521,12.5663},
{1505.9163,-1737.4824,12.4968}
};

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];

enum cCKInfo
{
	cSendername[20],
	cGiveplayer[20],
	cUsed,
};
new CKInfo[10][cCKInfo];

enum pPaperInfo
{
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128],
	SafeSaving,
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];

enum fInfo
{
	FamilyTaken,
	FamilyName[20],
	FamilyMOTD[128],
	FamilyColor[20],
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
};
new FamilyInfo[10][fInfo];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};
new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
};
new News[hNews];



enum hInfo
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hHealthx,
	hHealthy,
	hHealthz,
	hArmourx,
	hArmoury,
	hArmourz,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	hDate,
	hLevel,
	hWorld
};

new HouseInfo[61][hInfo];

new HouseEntered[MAX_PLAYERS];


enum bInfo
{
    bOwned,
	bOwner[64],
	bMessage[128],
	bExtortion[MAX_PLAYER_NAME],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
};
new BizzInfo[9][bInfo];

enum sbInfo
{
	sbOwned,
	sbOwner[64],
	sbMessage[128],
	sbExtortion[MAX_PLAYER_NAME],
	Float:sbEntranceX,
	Float:sbEntranceY,
	Float:sbEntranceZ,
	sbLevelNeeded,
	sbBuyPrice,
	sbEntranceCost,
	sbTill,
	sbLocked,
	sbInterior,
	sbProducts,
	sbMaxProducts,
	sbPriceProd,
};
new SBizzInfo[15][sbInfo];

enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[113][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum mInfo
{
    mTitle[128],
    mText1[128],
    mText2[128],
    mText3[128],
    mText4[128],
    mText5[128],
    mText6[128],
    mText7[128],
    mText8[128],
    mText9[128],
    mText10[128],
    mText11[128],
    mText12[128],
    mText13[128],
    mText14[128],
    mText15[128],
    mText16[128],
    mText17[128],
    mText18[128],
    mGText1[128],
    mGText2[128],
    mGText3[128],
    mGText4[128],
    mGText5[128],
    mGText6[128],
	Float:mCP1[3],
	Float:mCP2[3],
	Float:mCP3[3],
	Float:mCP4[3],
	Float:mCP5[3],
	Float:mCP6[3],
	mReward,
	mToggle,
};
new MissionInfo[mInfo];

enum kInfo
{
    kTitle[128],
    kMaker[MAX_PLAYER_NAME],
    kText1[128],
    kText2[128],
    kText3[128],
    kText4[128],
    kText5[128],
    kText6[128],
    kText7[128],
    kText8[128],
    kText9[128],
    kText10[128],
    kText11[128],
    kText12[128],
    kText13[128],
    kText14[128],
    kText15[128],
    kText16[128],
    kText17[128],
    kText18[128],
    kGText1[128],
    kGText2[128],
    kGText3[128],
    kGText4[128],
    kGText5[128],
    kGText6[128],
	Float:kCP1[3],
	Float:kCP2[3],
	Float:kCP3[3],
	Float:kCP4[3],
	Float:kCP5[3],
	Float:kCP6[3],
	kNumber,
	kReward,
	kToggle,
};
new PlayMission[kInfo];

enum dDrug
{
	DrugAmmount,
};
new drugsys[dDrug];

enum dMats
{
	MatsAmmount,
};
new matssys[dMats];

enum hqLocks
{
	surlock,
	luclock,
	stlock,
	iolock,
};
new hqlock[hqLocks];

new RandCars[20][1] = {
{496},{542},{507},{585},
{466},{492},{579},{559},
{400},{551},{516},{475},
{561},{550},{566},{558},
{562},{562},{603},{560}
};


new RandLCars[1][1] = {
{431}
};


new GunPrice[30][1] = {
{500}, //parachute
{400}, //golfclub
{300}, //nightstick
{200}, //knife
{700}, //baseballbat
{300}, //shovel
{100}, //poolcue
{400}, //purpledildo
{780}, //whitedildo
{560}, //longwhitedildo
{530}, //whitedildo2
{200}, //flowers
{600}, //cane
{500}, //sdpistol
{1000}, //colt45
{3000}, //deagle
{2000}, //Tec9
{3000}, //uzi
{2500}, //mp5
{3000}, //shotgun
{6000}, //spas12
{4000}, //sawnoff
{5000}, //ak47
{5000}, //m4
{1000}, //rifle
{25}, //pistolammo
{40}, //shotgunammo
{25}, //smgammo
{40}, //assaultammo
{50} //rifle
};

new JoinPed[69][1] = {
{280},//POLICE_FORCE
{281},
{282},
{283},
{284},
{285},
{288},
{71},
{166},
{295},
{148},
{286},//FBI/ MSP
{164},
{163},
{287},//NATIONAL_GUARD
{285},
{70},//FIRE/AMBULANCE
{274},
{275},
{276},
{277},
{278},
{279},
{292},//SURENOS
{114},
{115},
{175},
{174},
{116},
{173},
{176},
{124},//LUCIANO
{125},
{126},
{111},
{123},
{186},
{228},
{249},//HITMANS
{68},
{72},
{121},
{295},
{148},//NEWS_REPORTERS
{188},
{187},
{255},//TAXI_CAB_COMPANY
{253},
{153},//DRIVING/FLYING_SCHOOL
{156},//DRIVING/FLYING_SCHOOL
{206},//DRIVING/FLYING_SCHOOL
{221},//DRIVING/FLYING_SCHOOL
{19},//nortenos
{22},
{22},
{144},
{170},
{180},
{270},//18TH_STREET_FAMYLY
{271},
{269},
{105},
{106},
{107},
{66},//Institute of Race
{67},
{180},
{297},
{188}
};

new CivMalePeds[52][1] = {
{2},
{47},
{48},
{50},
{58},
{60},
{68},
{72},
{73},
{80},
{81},
{82},
{83},
{95},
{100},
{101},
{102},
{103},
{104},
{108},
{109},
{110},
{121},
{122},
{123},
{135},
{142},
{143},
{144},
{146},
{153},
{154},
{155},
{156},
{158},
{159},
{160},
{161},
{170},
{179},
{180},
{189},
{202},
{203},
{204},
{258},
{259},
{260},
{293},
{295},
{296},
{297}
};

new CivFemalePeds[33][1] = {
{55},
{56},
{63},
{69},
{76},
{85},
{91},
{93},
{131},
{141},
{148},
{150},
{151},
{152},
{157},
{169},
{172},
{190},
{192},
{193},
{194},
{195},
{198},
{201},
{214},
{216},
{219},
{225},
{233},
{237},
{251},
{263},
{298}
};

new Nom_Des_Vehicules[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", "Voodoo",
	"Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto",
	"Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier",
	"Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks",
	"Hotknife", "Trailer 1", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo",
	"RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed",
	"Yankee", "Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio",
	"Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow",
	"Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350",
	"Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage",
	"Dozer", "Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood",
	"Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxvillde",
	"Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger",
	"Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle",
	"Cropduster", "Stunt", "Petro", "Roadtrain", "Nebula", "Majestic", "Buccaneer",
	"Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine",
	"Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
	"Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",
	"Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster",
	"Monster", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger",
	"Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart",
	"Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley",
	"Stafford", "BF-400", "News Van", "Tug", "Trailer 3", "Emperor", "Wayfarer", "Euros",
	"Hotdog", "Club", "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch",
	"LSPD Car", "Voiture de police", "LVPD Car", "Police Ranger", "Picador", "S.W.A.T Tank", "Alpha",
	"Phoenix", "Glendale", "Sadler", "Luggage Trailer 1", "Luggage Trailer 2", "Stairs Trailer",
    "Boxville", "Utility Trailer 1", "Utility Trailer 2"
};
new Peds[200][1] = {
{7},
{247},
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{246},{245},{244},{243},{242},{241},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

new Ann;
new Annonces[NombreAnnonces][128] =
{
	{"Teamspeak3 : En attente"},
	{"Vous avez besoin d'aide? /rapport ou pour les nouveaux /n"},
	{"N'oubliez pas vous etes sur un serveur Role Play jouez RP sous peine de sanction."},
	{"Adresse du forum : gamingofliferoleplay.forum2jeux.com"},
	{"Vous etes victime d'actes NO RP /rapport ou f8 pour screen"}
};

public EnvoiAnnonce()
{
	switch (Ann)
	{
	    case 0:
 		{
	 		SendClientMessageToAll(COLOR_LIGHTBLUE, Annonces[0]); Ann++;
 		} /*Envoi de premier message*/
	    case 1:
		{
			SendClientMessageToAll(COLOR_LIGHTBLUE, Annonces[1]); Ann++;
		}
	    case 2:
		{
			SendClientMessageToAll(COLOR_RED, Annonces[2]); Ann++;
		}
	    case 3:
		{
			SendClientMessageToAll(COLOR_LIGHTBLUE, Annonces[3]); Ann++;
		}
		 case 4:
		{
			SendClientMessageToAll(COLOR_LIGHTBLUE, Annonces[4]); Ann=0;
		}/*Envoi du dernier message*/
	}

	return 1;
}

//------------------------------------------------------------------------------

main()
{
	print(" ");
	print("     GaminG Of Life Roleplay ");
	print("___________________________");
	print("     par: lApOlNistar ");
	print(" ");
}


/*public SearchingHit(playerid)
{
	new string[256];
	new giveplayer[MAX_PLAYER_NAME];
	new searchhit = 0;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(searchhit == 0)
		    {
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 8)
			    {
			        GetPlayerName(i, giveplayer, sizeof(giveplayer));
			        searchhit = 1;
			        hitfound = 1;
			        hitid = i;
			        for(new k=0; k<MAX_PLAYERS; k++)
					{
						if(IsPlayerConnected(k))
						{
				        	if(PlayerInfo[k][pMember] == 14 || PlayerInfo[k][pLeader] == 14)
				        	{
	               				SendClientMessage(k, COLOR_WHITE, "|__________________ Agence Hitman: Nouvelle __________________|");
				                SendClientMessage(k, COLOR_DBLUE, "*** Message: Un contrat est disponible. ***");
				                format(string, sizeof(string), "Personne: %s   ID: %d   Valeur: $%d", giveplayer, i, PlayerInfo[i][pHeadValue]);
								SendClientMessage(k, COLOR_DBLUE, string);
								SendClientMessage(k, COLOR_YELLOW, "Utilisez /donnerhit idhitman, pour assigner un contrat aux hitmans.");
								SendClientMessage(k, COLOR_WHITE, "|________________________________________________________|");
	      					}
					    }
					}
					return 0;
			    }
			}
		}
	}
	if(searchhit == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "  Aucun contrat disponible !");
	}
	return 0;
} */

public ExtortionBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Personne");
    if(strcmp(BizzInfo[bizid][bExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(BizzInfo[bizid][bExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    SafeGivePlayerMoney(i, value);
			    BizzInfo[bizid][bTill] -= value;
			}
		}
	}
	return 1;
}

public ExtortionSBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Personne");
    if(strcmp(SBizzInfo[bizid][sbExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(SBizzInfo[bizid][sbExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    SafeGivePlayerMoney(i, value);
			    SBizzInfo[bizid][sbTill] -= value;
			}
		}
	}
	return 1;
}

public PreparePaintball()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SendClientMessage(i, COLOR_YELLOW, "Le match de paintball commence dans 20secondes.");
	        }
		}
	}
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}

public StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SafeResetPlayerWeapons(i);
	            SafeGivePlayerWeapon(i, 29, 999);
	            TogglePlayerControllable(i, 1);
	            SendClientMessage(i, COLOR_YELLOW, "Le match commence dans 4 minutes.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
	SetTimer("PaintballEnded", 240000, 0);
	return 1;
}

public PaintballEnded()
{
	new string[256];
	new name[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            if(IsPlayerConnected(PaintballWinner))
	            {
	                GetPlayerName(PaintballWinner, name, sizeof(name));
	                format(string,sizeof(string), "** %s gagne le match avec %d kills **",name,PaintballWinnerKills);
	                SendClientMessage(i, COLOR_WHITE, string);
	            }
	            SafeResetPlayerWeapons(i);
	            PlayerPaintballing[i] = 0;
	            SetPlayerPos(i, SBizzInfo[10][sbEntranceX],SBizzInfo[10][sbEntranceY],SBizzInfo[10][sbEntranceZ]);
	        }
		}
	}
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return 1;
}

public PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "La course de kart va commencé dans 20 secondes, aller jusqu'au depart.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}

public IsACopSkin(skinid) // By Drek
{
	if(skinid == 280 || skinid == 211 || skinid == 217 || skinid == 281 || skinid == 282 || skinid == 283 || skinid == 288 || skinid == 284 || skinid == 285 || skinid == 286 || skinid == 287)
	{
		return 1;
	}
	return 0;
}

public StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Feu Vert, go go go !");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}

public KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}

public DollahScoreUpdate()
{
	new LevScore;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
   			LevScore = PlayerInfo[i][pLevel];
			SetPlayerScore(i, LevScore);
		}
	}
	return 1;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    TextDrawShowForPlayer(playerid,txtAnimHelper);
}

public Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] += (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	return 1;
}
stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs();
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if (ch >= '0' && ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return 1;
					}
				}
				while ((ch = string[stringPos]) && ch != ' ');
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					ch,
					num = 0;
				while ((ch = string[stringPos++]))
				{
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						case ' ':
						{
							break;
						}
						default:
						{
							return 1;
						}
					}
				}
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				new tmp[25];
				strmid(tmp, string, stringPos, stringPos+sizeof(tmp)-2);
				setarg(paramPos, 0, _:floatstr(tmp));
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != ' ')
					{
						setarg(paramPos, i++, ch);
					}
					if (!i) return 1;
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != ' ')
		{
			stringPos++;
		}
		while (string[stringPos] == ' ')
		{
			stringPos++;
		}
		paramPos++;
	}
	while (format[formatPos] == 'z') formatPos++;
	return format[formatPos];
}
stock IsValidSkin(skinid) // By Drek
{
    #define	MAX_BAD_SKINS 22
    new badSkins[MAX_BAD_SKINS] =
    {
        3, 4, 5, 6, 8, 42, 65, 74, 86,
        119, 149, 208, 265, 266, 267,
        268, 269, 270, 271, 272, 273, 289
    };
    if (skinid < 0 || skinid > 299) return false;
    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skinid == badSkins[i]) return false;
    }
    #undef MAX_BAD_SKINS
    return 1;
}

public Spectator()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(KickPlayer[i]==1) { Kick(i); }
			else if(KickPlayer[i]==2) { Ban(i); }
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				SetPlayerColor(i,COLOR_SPEC);
				TogglePlayerControllable(i, 0);
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    TogglePlayerSpectating(i, 1);
				    if(PlayerInfo[i][pAdmin] >= 1)
				    {
				        new Float:health;
					    new name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealth(targetid, health);
					    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~y~vie:%.1f",name,targetid,health);
					    GameTextForPlayer(i, string, 2500, 3);
				    }
				    if(IsPlayerInAnyVehicle(targetid))
					{
					    new carid = GetPlayerVehicleID(targetid);
					    PlayerSpectateVehicle(i, carid);
					}
					else
					{
					    PlayerSpectatePlayer(i, targetid);
					}
					if(GetPlayerInterior(targetid) == 0)
					{
						SetPlayerInterior(i,0);
					}
					else if(GetPlayerInterior(targetid) > 0)
					{
						SetPlayerInterior(i,GetPlayerInterior(targetid));
					}
				}
			}
			if(Spectate[i] == 253)
			{
				TogglePlayerControllable(i, 1);
				TogglePlayerSpectating(i, 0);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				gTeam[i] = PlayerInfo[i][pTeam];
				SetPlayerToTeamColor(i);
				MedicBill[i] = 0;
				if(PlayerInfo[i][pDonateRank] > 0)
		        {
		            SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(i);
					SetCameraBehindPlayer(i);
		        }
		        else
		        {
					SpawnPlayer(i);
				}
				Spectate[i] = 255;
			}
			if(Spectate[i] == 254)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
}

//---------------------------------------------------------------------------

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	return 1;
}

public IsAnInstructor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==11)
		{
		    return 1;
		}
		if(leader==11)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==14 || member==15 || member==16)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==14 || leader==15 || leader==16)
		{
		    return 1;
		}
	}
	return 0;
}

public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==3)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAPDMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1)
		{
		    return 1;
		}
		else if(leader==1)
		{
		    return 1;
		}
	}
	return 0;
}


public IsAtCarrental(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(30.0,playerid,1696.5543,-1053.4685,23.9063))
		{
			return 1;
		}
	}
	return 0;
}

public IsAtClothShop(playerid) // Lieu/Position pour changer d'habits.
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,20.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,181.6248,-88.0052,1002.0234) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return 1;
		}
	}
	return 0;
}


public IsAtFishPlace(playerid) // Lieu/Position où l'on peut pecher.
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{
		    return 1;
		}
	}
	return 0;
}

public IsAtCookPlace(playerid) // Lieu/Position où l'on peut cuisiner
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {
	        return 1;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
		{
		    return 1;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{
		    return 1;
		}
	}
	return 0;
}

public IsAtBar(playerid) // Lieu/Position où l'on peut boire
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797))
		{
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,-791.016,512.249,1336.41) || PlayerToPoint(10.0,playerid,-799.122,520.988,1336.41))
		{
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,-224.5768,1406.2774,26.6734) || PlayerToPoint(10.0,playerid,-224.5768,1406.2773,26.6734))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,597.1426,-1884.3462,3.9734))
		{
		    return 1;
		}
	}
	return 0;
}

//-----------------------[Début Du Systeme de voiture]--------------------------

// Tous le début de ce system est périmé, utiliser et modifier l'include gveh ou la suite .
public IsAHarvest(carid) // Voiture pour la ferme
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Ferme",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsADrugHarvest(carid) // Voiture pour la ferme illegale
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Ferme-Drogue",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsASmuggleCar(carid) // Voiture transportant de la drogue
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Drogue",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsASweeper(carid) // Voiture servant a nettoyer les rues.
{
	new model = GetVehicleModel(carid);
	if(model == 574)
	{
	    return 1;
	}
	return 0;
}

public IsAPlane(carid) // Véhicules concidéres comme Avions
{
	new model = GetVehicleModel(carid);
	if( model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 || model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 425 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
	{
		return 1;
	}
	return 0;
}

public IsACopCar(carid) // Voitures pour la Police
{
	if(strcmp(VehiculeInfo[carid][Proprio],"LSPD",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsToAnDistributeur(playerid)
{
    for(new j = 0; j < sizeof(Distributeurs); j ++)
	{
    	if(PlayerToPoint(1.5,playerid,Distributeurs[j][0],Distributeurs[j][1],Distributeurs[j][2])){ return 1; }
	}
	return 0;
}
public IsAnFbiCar(carid) // Voiture Pour le FBI
{
	if(strcmp(VehiculeInfo[carid][Proprio],"FBI",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAKart(carid) // Voiture pour le Karting
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Karting",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAnInstructionVehicule(carid) // Voiture pour l'auto-école
{
	if(strcmp(VehiculeInfo[carid][Proprio],"auto-ecole",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAnCamion(carid) // Les camions
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Camions",true) == 0)
	{
	    return 1;
	}
	return 0;
	}
public IsAJournaliste(carid) // Les San News
{
	if(strcmp(VehiculeInfo[carid][Proprio],"San-News",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAnTaxi(carid) // Voitures pour les Taxis
{
	if(strcmp(VehiculeInfo[carid][Proprio],"taxi",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAnBus(carid) // Les Bus
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Bus",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAnLoccationVehicule(carid) // Les voitures de locations
{
	if(strcmp(VehiculeInfo[carid][Proprio],"auto-loccation",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsAnLoccationMoto(carid) // Les motos de locations
{
	if(strcmp(VehiculeInfo[carid][Proprio],"moto-loccation",true) == 0)
	{
	    return 1;
	}
	return 0;
}

public IsNgCar(carid) // Voiture de l'armée
{
	if(strcmp(VehiculeInfo[carid][Proprio],"FAAC",true) == 0)
	{
	    return 1;
	}
	return 0;
}
public IsBCar(carid) // Voiture des Ballas
{
    if(strcmp(VehiculeInfo[carid][Proprio],"Blood's",true) == 0)
    {
        return 1;
    }
    return 0;
}
public IsMCar(carid) // Voiture des ms-13
{
    if(strcmp(VehiculeInfo[carid][Proprio],"MS13",true) == 0)
	{
        return 1;
    }
    return 0;
}
public IsRCar(carid) // Voiture Pour les Russes
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Russe",true) == 0)
	{
	    return 1;
	}
	return 0;
}

public IsAGovernmentCar(carid) // Voiture du Gouvernements
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Gouvernement",true) == 0)
	{
		return 1;
	}
	return 0;
}


public IsATank(carid) // Les Tanks
{
	new model = GetVehicleModel(carid);
	if(model == 432)
	{
		return 1;
	}
	return 0;
}


public IsAnAmbulance(carid) // Voitures concidéres commes Ambulances
{
	new model = GetVehicleModel(carid);
	if(model == 416 || (strcmp(VehiculeInfo[carid][Proprio],"ACMD",true) == 0))
	{
		return 1;
	}
	return 0;
}

public IsATruck(carid) // Voitures concidéres commes des camions
{
	if(strcmp(VehiculeInfo[carid][Proprio],"Camion",true) == 0)
	{
		return 1;
	}
	return 0;
}

public IsAPizzabike(carid)// Voitures pour les pizzaboy
{
	new model = GetVehicleModel(carid);
	if(model == 448)
	{
		return 1;
	}
	return 0;
}

public IsABus(carid)// Véhicules concidéré comme un Bus
{
	new model = GetVehicleModel(carid);
	if(model == 437 || model == 431)
	{
		return 1;
	}
	return 0;
}

public IsATowcar(carid)
{
	new model = GetVehicleModel(carid);
	if(model == 525)
	{
		return 1;
	}
	return 0;
}

public IsATruck2(carid)
{
	if(carid >= 202 && carid <= 211)
	{
		return 1;
	}
	return 0;
}

public IsABike(carid)// Véhicules concidéré comme un vélo
{
	new model = GetVehicleModel(carid);
    if(model == 581 || model == 509 || model == 481 || model == 462 || model == 521 || model == 463 || model == 510 || model == 522 || model == 461 || model == 448 || model == 471 || model == 468 || model == 586)
	{
		return 1;
	}
	return 0;
}

public IsAOBike(carid)
{
    new modelveh = GetVehicleModel(carid);
    if(modelveh == 581 || modelveh == 521 || modelveh == 463 || modelveh == 522 || modelveh == 523 || modelveh == 461 || modelveh == 448 || modelveh == 471 || modelveh == 468 || modelveh == 586)
	{
		return 1;
	}
	return 0;
}


//-------------------------[Fin System de voiture]------------------------------

public OnPlayerConnect(playerid)
{

	if(IsPlayerNPC(playerid)) {
	    new ip_addr_npc[64+1];
	    new ip_addr_server[64+1];
	    GetServerVarAsString("bind",ip_addr_server,64);
	    GetPlayerIp(playerid,ip_addr_npc,64);

		if(!strlen(ip_addr_server)) {
		    ip_addr_server = "127.0.0.1";
		}

		if(strcmp(ip_addr_npc,ip_addr_server,true) != 0) {
		    // 
		    printf("NPC : A obtenu un NPC à distance se reliant de %s et a etait kické.",ip_addr_npc);
		    Kick(playerid);
		    return 0;
		}
        printf("[BOTS] Connection %s Réussie",ip_addr_npc);
        return 1;
	}
	Script_OnPlayerConnect(playerid);
	InSpec[playerid] =0;
	new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
	if(Security != 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Il n'a pas suivis les regles, des mesures ont été prises.");
	    Kick(playerid);
	    return 1;
	}
    new namestring = strfind(plname, "_", true);
 	if(namestring == -1)
	{
		SendClientMessage(playerid, COLOR_YELLOW2, "Departement de l'immigration: Votre nom n'est pas acceptable.");
		SendClientMessage(playerid, COLOR_YELLOW2, "Votre nom RP doit être au format Prenom_Nom .");
		Kick(playerid);
		return 1;
	}
	gActivePlayers[playerid]++;
	numplayers++;

	new string[258];
	SelectChar[playerid] = 0; HidePM[playerid] = 0; PhoneOnline[playerid] = 0;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0;
	GettingJob[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0;
    ApprovedLawyer[playerid] = 0; CallLawyer[playerid] = 0; WantLawyer[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; SpawnChange[playerid] = 1;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0; Rope[playerid] = 0;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0; OnCK[playerid] = 999; GettingCK[playerid] = 999;
	DrugGram[playerid] = 0; ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0; GotHit[playerid] = 0;
	WantedPoints[playerid] = 0; GoChase[playerid] = 999; GetChased[playerid] = 999; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0; tactical[playerid] = 0; swat[playerid] = 0; TestFishes[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	BusrouteEast[playerid][0] = 0; BusrouteWest[playerid][0] = 0; BusShowLocation[playerid][0] = 0; BusShowLocationC[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCount[playerid] = 0;
	WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999; WritingLine[playerid] = 0; BringingPaper[playerid] = 0; GotPaper[playerid] = 0;
	PaperOffer[playerid] = 999; /*ConsumingMoney[playerid] = 0;*/
	ScriptMoney[playerid] = 0; ScriptMoneyUpdated[playerid] = 0;
	for (new c=0; c<13; c++) ScriptWeapons[playerid][c] = 0;
	ScriptWeaponsUpdated[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 1;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0;
	gSpeedo[playerid] = 0;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerTazeTime[playerid] = 0; PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	MatsHolding[playerid] = 0; TutTime[playerid] = 0;
	gPlayerMission[playerid] = 0; TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999;
	 NoFuel[playerid] = 0;
	HireCar[playerid] = 299; GangCar[playerid] = 512; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0; PlayerOnMission[playerid] = 0; MissionCheckpoint[playerid] = 0;
	WatchingTV[playerid] = 0; PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	tactical[playerid] = 0; swat[playerid] = 0; authorizeswat = 0; authorizetactical = 0;
	PizzaCallTime[playerid] = 0; bPizza[playerid] = 0; sPizza[playerid] = 0; gEngine[playerid] = 0; FarmerVar[playerid] = 0; FarmerPickup[playerid][0] = 0; SmugglerWork[playerid] = 0; SmuggledDrugs[playerid] = 0; JustDied[playerid] = 0; KnockedDown[playerid] = 0; UnidentifedCall[playerid] = 0;
	PermisOffer[playerid] = 999; PermisPrice[playerid] = 0; PermisType[playerid] = 0; UsingDrugs[playerid] = 0; AfterTutorial[playerid] = 0;
	OwnableCarOffer[playerid] = 999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; BlindFold[playerid] = 0; PlayerIsSweeping[playerid] = 0; AdminDuty[playerid] = 0; JustReported[playerid] = 0; PlayerNeedsHelp[playerid] = 0; AdminSpec[playerid] = 0; IsSmoking[playerid] = 0; IsDrinking[playerid] = 0; UsingSmokeAnim[playerid] = 0; ReduceTime[playerid] = 0;
	CreatingGun[playerid] = 0; CreatingGunAmmo[playerid] = 0; CreatingGunPrice[playerid] = 0; IsPuttingMaterials[playerid] = 0;
    NitroOffer[playerid] = 999; NitroPrice[playerid] = 0; NitroCar[playerid] = 0;
    HydrauOffer[playerid] = 999; HydrauPrice[playerid] = 0; HydrauCar[playerid] = 0;
    IsTakingGun[playerid] = 0;
	InAFoodPlace[playerid] = 0;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = 50.0;
    PlayerInfo[playerid][pPos_x] = 1612.3240;
	PlayerInfo[playerid][pPos_y] = -2330.1670;
	PlayerInfo[playerid][pPos_z] = 13.5469;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pModel] = 7;
	new randphone = 100000 + random(899999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = randphone;
	PlayerInfo[playerid][pPhousekey] = 255;
	PlayerInfo[playerid][pGangKey] = 255;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pGun1] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pWatch] = 0;
	PlayerInfo[playerid][pCrashed] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pMissionNr] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pVirWorld] = 0;
	PlayerInfo[playerid][pRequestingBackup] = 0;
	PlayerInfo[playerid][pRoadblock] = 0;
	PlayerInfo[playerid][pFishTool] = 0;
	strmid(PlayerInfo[playerid][pNote1], "Aucun", 0, strlen("Aucun"), 255);
	PlayerInfo[playerid][pNote1s] = 0;
	strmid(PlayerInfo[playerid][pNote2], "Aucun", 0, strlen("Aucun"), 255);
	PlayerInfo[playerid][pNote2s] = 0;
	strmid(PlayerInfo[playerid][pNote3], "Aucun", 0, strlen("Aucun"), 255);
	PlayerInfo[playerid][pNote3s] = 0;
	strmid(PlayerInfo[playerid][pNote4], "Aucun", 0, strlen("Aucun"), 255);
	PlayerInfo[playerid][pNote4s] = 0;
	strmid(PlayerInfo[playerid][pNote5], "Aucun", 0, strlen("Aucun"), 255);
	PlayerInfo[playerid][pNote5s] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pLighter] = 0;
	PlayerInfo[playerid][pCigarettes] = 0;
	PlayerInfo[playerid][pBiere] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pMaskuse] = 0;
	PlayerInfo[playerid][pHideNumber] = 0;
	PlayerInfo[playerid][pSpeaker] = 0;
	PlayerInfo[playerid][pLocked] = 0;
	//PlayerInfo[playerid][pSQLID] = 0;
    PlayerInfo[playerid][probbank] = 0;
	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	SetPlayerColor(playerid,COLOR_GRAD2);
	HouseEntered[playerid] = 255;
	GetPlayerName(playerid, plname, sizeof(plname));
	format(string, sizeof(string), "users/%s.ini", plname);
	new string1[256];
	format(string1, sizeof(string1), "** %s est entré(e) sur GaminG Of Life.",plname);
	SendClientMessageToAll(COLOR_GREY, string1);
	SendClientMessage(playerid, COLOR_YELLOW2, "Veuillez patientez un instant...");
	SendClientMessage(playerid, COLOR_LIGHT_BLUE, " GameMode Partager par GaminG Of Life ! /credits ");
	GameTextForPlayer(playerid, "~w~Bievenue sur     ~n~~b~gaming of life", 2500, 1);
	SendClientMessage(playerid, COLOR_YELLOW2, "Nous vous souhaiton de très beau moments sur {1B1BE0}GaminG {1B1BE0}Of {FF0000}Life {DB881A}RP.");
	SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Le site du serveur : gamingofliferoleplay.forum2jeux.com");
	SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Notre Teamspeak3 : 91.191.159.204 Port: 9992");
	SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Derniere mise a jour le 05/01/2011");
	SendClientMessage(playerid, COLOR_WHITE, "Chargement terminé avec succés.");
	if(fexist(string))
	{
		gPlayerAccount[playerid] = 1;
  		ShowPlayerDialog(playerid,Login,DIALOG_STYLE_INPUT,"Veuillez entrer votre mot de passe","Bienvenue sur le serveur de GaminG Of Life RP !\nDerniere Mise A Jour: \n-Arrivée de GOL sur le dédié\n-Arrivée en test des néons\n-Terrain LSPD entrainement ajouté\n-Rajout d'un AntiCheat\n-Rajout d'un mapping pour le GM","Ok","Annuler");
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		ShowPlayerDialog(playerid,Register,DIALOG_STYLE_INPUT,"Veuillez entrer votre mot de passe","Bienvenue Sur GaminG Of Life RP !\nPour vous enregistrer entrer votre mot de passe ici : ","Ok","Annuler");

    }
	Averto[playerid] = 0;
	Connextion++;
	Connect++;
	/*if(Connect > Maxconnextion)
	{
    	format(string,sizeof(string),"[La-vie-virtuelle]Merci à tous. Nous avons atteind un nombre maximum de %d connectés à la fois !!!!",Connect);
    	SendClientMessageToAll(COLOR_LIGHTBLUE,string);
        Maxconnextion++;
	}*/
	SaveStat();
	TextDrawShowForPlayer(playerid, Atext);
	return 1;
}

public ClearCK(ck)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "No-one");
	strmid(CKInfo[ck][cSendername], string, 0, strlen(string), 255);
	strmid(CKInfo[ck][cGiveplayer], string, 0, strlen(string), 255);
	CKInfo[ck][cUsed] = 0;
	SaveCK();
	return 1;
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Aucun");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

public ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Aucun");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	SavePapers();
	return 1;
}

public ClearFamily(family)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerInfo[i][pFMember] == family)
	        {
	            SendClientMessage(i, COLOR_WHITE, "* La famille ou vous êtes a été supprimée par le leader, vous avez été kické automatiquement.");
	            PlayerInfo[i][pFMember] = 255;
	        }
	    }
	}
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "0xFF000069");
	strmid(FamilyInfo[family][FamilyColor], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
	FamilyInfo[family][FamilyInterior] = 0;
	SaveFamilies();
	return 1;
}

public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

public FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

public ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

public ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

public ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

public Lotto(number)
{
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Los Santos Lotterie: Aujourd'hui, le numéro gagnant est: %d.", number);
    OOCOff(COLOR_WHITE, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Los Santos News : %s a gagné le jackpot de $%d avec son ticket.", winner, Jackpot);
					OOCOff(COLOR_DBLUE, string);
					format(string, sizeof(string), "* Vous avez gagné $%d avec votre ticket de loterie.", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, string);
					//ConsumingMoney[i] = 1;
					SafeGivePlayerMoney(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_WHITE, "* Vous n'avez pas gagné avec votre ticket de lotterie cette fois.");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(125000); rand += 15789;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "Los Santos Lotterie: Le nouveau jackpot commence à $%d.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    new rand = random(15000); rand += 2158;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "Los Santos News : Le jackpot s'est elevé à $%d.", Jackpot);
		OOCOff(COLOR_DBLUE, string);
	}
	return 1;
}

//------------------------------------------------------------------------------
public OnVehicleDeath(vehicleid)
{
    Script_OnVehicleDeath(vehicleid);
    return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
	gActivePlayers[playerid]--;
	numplayers--;
	Script_OnPlayerDisconnect(playerid);
	if(reason == 0)
	{
	    PlayerInfo[playerid][pCrashed] = 1;
	    for(new slot = 0; slot != 12; slot++)
	    {
	        new wep, ammo;
	        GetPlayerWeaponData(playerid, slot, wep, ammo);

	        if(wep != 0 && ammo != 0)
	        {
	            if(PlayerInfo[playerid][pGun1] == 0) { PlayerInfo[playerid][pGun1] = wep; PlayerInfo[playerid][pAmmo1] = ammo; }
	            else if(PlayerInfo[playerid][pGun2] == 0) { PlayerInfo[playerid][pGun2] = wep; PlayerInfo[playerid][pAmmo2] = ammo; }
	            else if(PlayerInfo[playerid][pGun3] == 0) { PlayerInfo[playerid][pGun3] = wep; PlayerInfo[playerid][pAmmo3] = ammo; }
	            else if(PlayerInfo[playerid][pGun4] == 0) { PlayerInfo[playerid][pGun4] = wep; PlayerInfo[playerid][pAmmo4] = ammo; }
	        }
	    }
	}
	SaveAccount(playerid);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Le Client~n~~r~a quitte le jeu", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Le client~n~~r~a quitte le jeu", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
	}
	/*if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(GettingCK[playerid]))
	    {
	        SendClientMessage(GettingCK[playerid], COLOR_YELLOW, "Your Character Kill has left the server, try again later.");
	        OnCK[GettingCK[playerid]] = 999;
	    }
	}*/
    new pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, sizeof(pName));
    new string[256];
    switch(reason)
    {
        case 0: format(string, sizeof(string), "*|| %s a quitté(e) le serveur. (Crash) ||*", pName);
        case 1: format(string, sizeof(string), "*|| %s a quitté(e) le serveur. (Déconnection) ||*", pName);
        case 2: format(string, sizeof(string), "*|| %s a quitté(e) le serveur. (Kick/Ban/Ping) ||*", pName);
    }
    SendAdminMessage(COLOR_GREY, string);
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~ Le client est sortit~n~~g~ gagné $%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		}
	}
	/*if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Votre contrat a quitté le jeu.");
	            GoChase[GetChased[playerid]] = 999;
			}
	    }
	}*/
	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(HireCar[playerid] != 299)
	{
		gLastDriver[HireCar[playerid]] = 300;
		gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
		if(reason != 0)
		{
			SetVehicleToRespawn(HireCar[playerid]);
		}
	}
	if(GangCar[playerid] != 512)
	{
		gLastDriver[GangCar[playerid]] = 520;
		gCarLock[GangCar[playerid]] = 0;
		UnLockCar(GangCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
		{
			gCarLock[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	PlayerInfo[Boxer2][pInt] = 5;
	        	GameTextForPlayer(Boxer2, "~r~Match interompus", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	PlayerInfo[Boxer2][pInt] = 5;
	        	GameTextForPlayer(Boxer1, "~r~Match interompus", 5000, 1);
			}
	    }
	    InRing = 0;
     	RoundStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(PlayerInfo[playerid][pJob] == 10)
	{
	    if(JobDuty[playerid] == 1) { Medics -= 1; }
	}
	else if(PlayerInfo[playerid][pJob] == 7)
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	else if(PlayerInfo[playerid][pJob] == 15)
	{
		if(JobDuty[playerid] == 1) { PizzaBoys -= 1; }
	}
	if (PlayerInfo[playerid][pRoadblock] != 0)
	{
		RemoveRoadblock(playerid);
	}
	BusrouteEast[playerid][0] = 0;
	BusrouteWest[playerid][0] = 0;
	Averto[playerid] = 0;
	Deconnextion++;
	Connect--;
	SaveStat();
}

public elevator1(playerid)
{
      SetPlayerPos(playerid,2052.4785,-1405.4835,48.3359);
      return 1;
}

public elevator2(playerid)
{
      SetPlayerPos(playerid,1142.2391,-1323.6563,1019.6968);
	  return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			SetPlayerSkin(playerid, 137);
			SetPlayerPos(playerid, 330.6825,163.6688,1014.1875);
			SetPlayerInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREEN, "Bienvenu sur GOL,patientez vous allez passer au tutorial dans un instant.");
            SetTimerEx ("Arrive", 2000, 0, "i", playerid);
			return 1;
	    }
		new rand;
		new house = PlayerInfo[playerid][pPhousekey];
		if(PlayerPaintballing[playerid] != 0)
		{
		    SafeResetPlayerWeapons(playerid);
      		SafeGivePlayerWeapon(playerid, 29, 999);
		    rand = random(sizeof(PaintballSpawns));
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
		    return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
		    SetPlayerInterior(playerid, 6);
		    PlayerInfo[playerid][pInt] = 6;
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sejour en prison incomplet, vous retournez en cellule.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
		    SetPlayerInterior(playerid, 0);
		    PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid,268.5777,1857.9351,9.8133);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); 
			return 1;
		}
		if(MedicBill[playerid] == 1 && PlayerInfo[playerid][pJailed] == 0 && PlayerPaintballing[playerid] == 0) // Modification de l'hosto (quand vous êtes mort)
		{
		    if(FirstSpawn[playerid] != 1)
		    {
				PlayerInfo[playerid][pDeaths] += 1;
				SetPlayerHealth(playerid, 25.0);
		    	SetPlayerInterior(playerid, 3);
		    	PlayerInfo[playerid][pInt] = 3;
	        	rand = random(sizeof(gMedicSpawns));
				SetPlayerPos(playerid, gMedicSpawns[rand][0], gMedicSpawns[rand][1], gMedicSpawns[rand][2]); //
				SetPlayerFacingAngle(playerid, gMedicSpawns[rand][3]);
	        	TogglePlayerControllable(playerid, 0);
	        	GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ Vous avez besoin de repos  ...", 30000, 3);
	        	JustDied[playerid] = 1;
	        	MedicTime[playerid] = 1;
	        	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		        InSpec[playerid] = 0;
	        	if(PlayerInfo[playerid][pDonateRank] > 0)
	        	{
	            	NeedMedicTime[playerid] = 10;
	        	}
	        	else
	        	{
	        		NeedMedicTime[playerid] = 20;
				}
	        	PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
		    	return 1;
				}
			}
			if(JustDied[playerid] == 1)
			{
			    if(GetPlayerVirtualWorld(playerid) != 0 || PlayerInfo[playerid][pVirWorld] != 0)
			    {
			        SetPlayerVirtualWorld(playerid, 0);
			        PlayerInfo[playerid][pVirWorld] = 0;
			    }
			    SetPlayerPos(playerid, 1182.5638,-1323.5256,13.5790);
			    SetPlayerFacingAngle(playerid, 270.0);
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
   				InSpec[playerid] = 0;
			    return 1;
			}
  		if(PlayerInfo[playerid][pCrashed] == 1)
		{
		    if(TutTime[playerid] == 0 && PlayerInfo[playerid][pTut] == 1 && RegistrationStep[playerid] == 0 && AfterTutorial[playerid] == 0 && FirstSpawn[playerid] == 1)
		    {
		        SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pVirWorld]);
		        SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
		    	SetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z] + 1);
		    	return 1;
			}
		}
		if(house !=255)
		{
		    if(SpawnChange[playerid]) 
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInt]);
				SetPlayerVirtualWorld(playerid,HouseInfo[house][hWorld]);
				SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]); 
				PlayerInfo[playerid][pLocal] = house;
				HouseEntered[playerid] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInt];
				return 1;
			}
//-------------------------------[Spawn FACTIONS]--------------------------------
		}
		if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)// Le spawn du maire
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid,1483.0773,-1767.5895,19.0457);
		    PlayerInfo[playerid][pInt] = 0;
			/*PlayerInfo[playerid][pLocal] = 241;*/
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)// Le spawn de la Police
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,10);
			SetPlayerVirtualWorld (playerid, 0);
		    rand = random(sizeof(gCopPlayerSpawns));
			SetPlayerPos(playerid, gCopPlayerSpawns[rand][0], gCopPlayerSpawns[rand][1], gCopPlayerSpawns[rand][2]); 
			SetPlayerFacingAngle(playerid, 270.0);
			PlayerInfo[playerid][pInt] = 10;
			return 1;
	    }
	    if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)// Le spawn du FBI
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,3);
			SetPlayerVirtualWorld (playerid, 0);
			SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 3;
			return 1;
	    }
		if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)// Le Spawn du LSAF (Los Santos Soft Army Force)
  {
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)// Le Spawn des vagos
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)// Le spawn de la Cosa
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)// Le sapwn des hitmans [HS]
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)// Le spanw des Russes
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}if (PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)// Le spanw des Racer
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if(IsAnInstructor(playerid) || PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) // Le spawn des instructeurs
	    {
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld (playerid, 0);
			SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 0;
	        return 1;
	    }
		if (PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)// Le spawn des Leones
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)// Le spanw des Yakuza
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
        }
		if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)// Le spawn des Crip'z
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid, 1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		if (PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)// Le spawn des Ballas
		{
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld (playerid, 0);
		    SetPlayerPos(playerid,1361.1865,-1648.3867,13.3828);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
	    if ((gTeam[playerid]) == 1)
	    {
			SetPlayerToTeamColor(playerid);
			rand = random(sizeof(gMedPlayerSpawns));
			SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // 
			SetPlayerFacingAngle(playerid, 270.0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1361.1865,-1648.3867,13.3828);
			SetPlayerFacingAngle(playerid, 91.9389);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return 1;
		}
	}
	return 1;
}

//------------------------------[Fin SpawnFactions]-----------------------------

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	new name[MAX_PLAYER_NAME];
	new string[256];
	DropWeapons(playerid);
	new playercash;
	new victimteam;
	new Float:px,Float:py,Float:pz;
	new killerteam;
	if(sorti[playerid] == 1)
	{
		SendClientMessage(playerid,COLOR_RED,"Tu es mort, tu ne gagne donc pas le jackpot");
		sorti[playerid] = 2;
	}
	victimteam = gTeam[playerid];
	OnDuty[playerid] = 0;
	killerteam = gTeam[killerid];
	gPlayerSpawned[playerid] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
 	PlayerInfo[playerid][pInvAmmo] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = 255;
	GetPlayerPos(playerid, px, py, pz);
	ilbraque[playerid] = 0;
	if(killerid != 255)
	{
		if(GetPlayerState(killerid) == 2)
		{
		    if(ProxDetectorS(20, killerid, playerid))
		    {
		        if(!IsPlayerInAnyVehicle(playerid))
		        {
					if(PlayerInfo[killerid][pMember] == 1||PlayerInfo[killerid][pLeader] == 1||PlayerInfo[killerid][pMember] == 2||PlayerInfo[killerid][pLeader] ==2)
		    		{
		    		    SendClientMessage(killerid, COLOR_YELLOW, "C'est un drive-by kill. C'est INTERDIT.");
						return 1;
					}
					return 1;
				}
			}
		}
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   La ligne a été coupée....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if(PlayerPaintballing[playerid] != 0)
	{
	    PlayerPaintballKills[killerid] ++;
	    if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
	    {
	        new killer[MAX_PLAYER_NAME];
	        PaintballWinner = killerid;
	        PaintballWinnerKills = PlayerPaintballKills[killerid];
	        GetPlayerName(killerid, killer, sizeof(killer));
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(PlayerPaintballing[i] != 0)
	                {
	                    format(string, sizeof(string), "* %s est en tête avec %d Kills.",killer,PaintballWinnerKills);
						SendClientMessage(i, COLOR_WHITE, string);
	                }
	            }
	        }
	    }
	    return 1;
	}
	if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(killerid))
	    {
	        if(OnCK[killerid] < 999)
	        {
	            new killer[MAX_PLAYER_NAME];
	            new dier[MAX_PLAYER_NAME];
	            GetPlayerName(playerid, dier, sizeof(dier));
				GetPlayerName(killerid, killer, sizeof(killer));
	            format(string, sizeof(string), "* %s has performed a Character Kill on you, you aren't able to play with this Character anymore.",killer);
	            SendClientMessage(playerid, COLOR_LIGHTRED, string);
	            format(string, sizeof(string), "** %s has Character Killed %s **",killer,dier);
	            CKLog(string);
	            BroadCast(COLOR_LIGHTRED, string);
	            PlayerInfo[playerid][pCK] = 1;
	            if(GettingCK[playerid] < 999) { GettingCK[playerid] = 999; }
	            else if(OnCK[playerid] < 999) { OnCK[playerid] = 999; }
	            if(GettingCK[killerid] < 999) { GettingCK[killerid] = 999; }
	            else if(OnCK[killerid] < 999) { OnCK[killerid] = 999; }
	            KickPlayer[playerid] = 1;
	        }
	    }
	}
	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
	    if(IsPlayerConnected(killerid))
	    {
		    if(gTeam[killerid] == 10 || PlayerInfo[killerid][pLeader] == 14)
		    {
		        if(GoChase[killerid] == playerid)
		        {
					new killer[MAX_PLAYER_NAME];
					GetPlayerName(killerid, killer, sizeof(killer));
					SafeGivePlayerMoney(killerid, PlayerInfo[playerid][pHeadValue]);
					format(string,128,"<< Hitman %s a remplis le contrat sur %s et a gagné $%d >>",killer,name,PlayerInfo[playerid][pHeadValue]);
					SendFamilyMessage(8, COLOR_YELLOW, string);
					PlayerInfo[playerid][pHeadValue] = 0;
					GotHit[playerid] = 0;
					GetChased[playerid] = 999;
					GoChase[killerid] = 999;
				}
			}
		}
	}
	if(victimteam >= 4)
	{
	    if(IsPlayerConnected(killerid))
	    {
			new slice = 100; 
			playercash = GetPlayerMoney(playerid);
			if(SafeTime[playerid] <= 0)
			{
				if(gTeam[killerid] != gTeam[playerid])
				{
					if(GetPlayerState(killerid) == 1)
					{
						PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills] + 2;
					}
					else
					{
						PlayerInfo[killerid][pKills]++;
					}
					PlayerInfo[playerid][pKills]--;
				}
			}
			if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || (gTeam[killerid] == gTeam[playerid] && gTeam[playerid] != 4))
			{
				slice = 0;
			}
			if (((gTeam[killerid]) != 4) && ((gTeam[killerid]) == gTeam[playerid]))//no team kill
			{
				slice = 0;
			}
			if (playercash > 0)
			{
				SafeGivePlayerMoney(playerid, -slice);
			}
			else
			{
				slice = slice+500;
			}
			PlayerPlaySound(killerid, 1083, 0.0, 0.0, 0.0);
		}
	}
	else if (victimteam == 2)
	{
	    if(IsPlayerConnected(killerid))
	    {
			PlayerInfo[playerid][pKills]--;
			if (gTeam[killerid] == 2)
			{
				
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+100);
			}
			else
			{
				
		    }
			if(gTeam[killerid] >= 5 && SafeTime[playerid] <= 0)
			{
				if(GetPlayerState(killerid) == 1)
				{
					PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills]+2;
				}
				else
				{
					PlayerInfo[killerid][pKills]++;
				}
			}
		
		}
	}
	else if (victimteam == 3)
	{
	    if(IsPlayerConnected(killerid))
	    {
			if ((gTeam[killerid]) == 2)
			{
			    if(WantedLevel[playerid] < 1)
			    {
					PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
					SafeGivePlayerMoney(killerid, -suecost);
					SafeGivePlayerMoney(playerid, suecost+10);
				}
			}
			else
			{
		    }
		    
		}
	}
	else if (victimteam == 1)
	{
	    if(IsPlayerConnected(killerid))
	    {
			if ((gTeam[killerid]) == 2)
			{
			
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+10);
			}
			else if ((gTeam[killerid]) == 1)
			{
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+10);
			}
			else
			{
			
		    }
		    
		}
	}
	if (victimteam >= 3 && WantedPoints[playerid] > 0 && killerteam == 2)
	{
	    SetPlayerFree(playerid,killerid, "Got Killed");
	}
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		if (BusrouteEast[playerid][0] != 0) BusrouteEnd(playerid, BusrouteEast[playerid][1]);
		else if (BusrouteWest[playerid][0] != 0) BusrouteEnd(playerid, BusrouteWest[playerid][1]);
		else BusrouteEnd(playerid, 0);
	}
	if(FarmerVar[playerid] != 0)
	{
	    FarmerVar[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(DrugFarmerVar[playerid] != 0)
	{
		DrugFarmerVar[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(SmugglerWork[playerid] != 0)
	{
	    SmugglerWork[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,TEAM_HIT_COLOR);
	return 1;
}

public OnPlayerSpawn(playerid)
{

	if(IsPlayerNPC(playerid)) // Spawn des Bots
	{
    	new botname[64];
    	GetPlayerName(playerid,botname,64);
    	if(!strcmp(botname,"Andre_Utino",true))// Train SF
		{
    	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	    SetPlayerPos(playerid,-1942.7950,168.4164,27.0006);
    	    SetPlayerSkin(playerid,61);
    	    PutPlayerInVehicle(playerid,Train1,0);
    	}
    	else if(!strcmp(botname,"Max_Dinorito",true))// Train LS
		{
    	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	    SetPlayerPos(playerid,1462.0745,2630.8787,10.8203);
    	    SetPlayerSkin(playerid,61);
    	    PutPlayerInVehicle(playerid,Train2,0);
    	}
    	else if(!strcmp(botname,"Robert_Louvero",true))// Train LV
		{
    	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	    SetPlayerPos(playerid,1700.7551,-1953.6531,14.8756);
    	    SetPlayerSkin(playerid,61);
    	    PutPlayerInVehicle(playerid,Train3,0);
    	}
		else if(!strcmp(botname,"Lorenzo_McCoy",true))// Avion LV
		{
    	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	    SetPlayerPos(playerid,0.0,0.0,0.0);
    	    SetPlayerSkin(playerid,61);
    	    PutPlayerInVehicle(playerid,Avion1,0);
    	}
		else if(!strcmp(botname,"Angelina_Rounot",true))// Avion LV
		{
    	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	    SetPlayerPos(playerid,0.0,0.0,0.0);
    	    SetPlayerSkin(playerid,61);
    	    PutPlayerInVehicle(playerid,Avion2,0);
    	}
		else if(!strcmp(botname,"Matthieu_Huber",true))// Avion LV
		{
    	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	    SetPlayerPos(playerid,0.0,0.0,0.0);
    	    SetPlayerSkin(playerid,61);
    	    PutPlayerInVehicle(playerid,Avion3,0);
    	}
    	return 1;
	}
	SetTimerEx("Medic0",5000,0,"d",playerid);
    SetTimer("[FR][RP]~GaminG Of Life~",1000,1);
	InSpec[playerid] = 0;
	InitLockDoors(playerid);
	STDPlayer[playerid] = 0;
    GangZoneShowForPlayer(playerid, zonecrip,  0x45EA1596);
    GangZoneShowForPlayer(playerid, zoneballas, 0xAC152483);
    /*GangZoneShowForPlayer(playerid, zonecosa, 0xFFFFFF96);*/
    GangZoneShowForPlayer(playerid, zonevagos, 0x25DDE796);
    /*GangZoneShowForPlayer(playerid, zoneleone, 0x00000096);
    GangZoneShowForPlayer(playerid, zonerusse, 0x80808096);
    GangZoneShowForPlayer(playerid, zoneyakuza, 0xFF000096);*/

	gTeam[playerid] = PlayerInfo[playerid][pTeam]; 
	if (gTeam[playerid] == 4)
	{
		gTeam[playerid] = 3;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Ce serveur demande de se logué pour apparaitre (Kicked) **");
        KickPlayer[playerid] = 1;
 	}
	if(gTeam[playerid] == 11 && PlayerInfo[playerid][pLeader] < 1)
	{
	    MedicBill[playerid] = 0;
	    new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, " Vous n'êtes pas un chef approuvé, vous êtes maintenant un civil !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 5)
	{
	    if(PlayerInfo[playerid][pMember] < 1)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'êtes pas un membre de la famille, vous êtes maintenant un civil  !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 10)
	{
	    if(PlayerInfo[playerid][pMember] != 8)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'êtes pas un membre de l'agence, vous êtes maintenant un civil  !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 2 && PlayerInfo[playerid][pMember] > 3)
	{
	    MedicBill[playerid] = 0;
		new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, "Vous n'avez pas demandé d'être un agent / FBI / Garde nationale, vous êtes maintenant un civil  !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 3)
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "Vous faites partie d'une famille spéciale, ? vous avez été contraint à la droite la classe + Char ? !");
			MedicBill[playerid] = 0;
			new model = PlayerInfo[playerid][pChar];
			if(PlayerInfo[playerid][pMember] == 1) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 2) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 3) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 4) { SetSpawnInfo(playerid, 1, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 5) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 8) { SetSpawnInfo(playerid, 10, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 9) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 10) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 11) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 14) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 15) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 16) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 1) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 2) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 3) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 4) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 5) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 8) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 9) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 10) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 11) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 14) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 16) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			SpawnPlayer(playerid);
		}
	}
	if(PlayerInfo[playerid][pChar] > 0) { SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]); }
	else { SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); }
	SetPlayerWeapons(playerid);
	SetPlayerSpawn(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerToTeamColor(playerid);
	PlayerFixRadio(playerid);
	/*if(MapIconsShown[playerid] != 1)
	{
        MapIconsShown[playerid] = 1;
        for(new i = 0; i < sizeof(BizzInfo); i++)
	    {
	        SetPlayerMapIcon(playerid,i + 1,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],36,COLOR_LIGHTRED);
	    }
	    for(new i = 0; i < sizeof(SBizzInfo); i++)
	    {
	        SetPlayerMapIcon(playerid,i + 20,SBizzInfo[i][sbEntranceX],SBizzInfo[i][sbEntranceY],SBizzInfo[i][sbEntranceZ],36,COLOR_LIGHTRED);
	    }
	}*/
	return 1;
}

public CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ck.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public KickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public BanLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	new string[128];
	new string2[128];
	new name[MAX_PLAYER_NAME];
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Destination atteinte", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Destination atteinte", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid]==1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    PlayerInfo[playerid][pJackSkill] ++;
			if(PlayerInfo[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de voleur de voiture est maintenant de niveau 2, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
			else if(PlayerInfo[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de voleur de voiture est maintenant de niveau 3, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
			else if(PlayerInfo[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de voleur de voiture est maintenant de niveau 4, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
			else if(PlayerInfo[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de voleur de voiture est maintenant de niveau 5, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
			new level = PlayerInfo[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, votre temps d'attente est de 20 minutes..", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR1[rand]);
			    PlayerInfo[playerid][pCarTime] = 1200;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, votre temps d'attente est de 18 minutes.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR2[rand]);
			    PlayerInfo[playerid][pCarTime] = 1080;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, votre temps d'attente est de 16 minutes.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR3[rand]);
			    PlayerInfo[playerid][pCarTime] = 960;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, votre temps d'attente est de 14 minutes.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, SELLCAR4[rand]);
			    PlayerInfo[playerid][pCarTime] = 840;
			}
			else if(level >= 401)
			{
			    new money = 6000;
			    format(string, sizeof(string), "Vous avez vendu une voiture pour $%d, votre temps d'attente est de 12 minutes.", money);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SafeGivePlayerMoney(playerid, money);
			    PlayerInfo[playerid][pCarTime] = 720;
			}
			GameTextForPlayer(playerid, "~y~Voiture vendu", 2500, 1);
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "Not in a car", 5000, 1);
		}
	}
	else if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~Checkpoint de la mission", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 9)
	{
		GameTextForPlayer(playerid, "~r~Attendez ici pour plus de courses", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s fini premier a la course de kart.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s fini deuxième a la course de kart.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s fini troisième a la course de kart.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "** Course de Kart Finie **");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	else if(MissionCheckpoint[playerid] > 0 && PlayMission[kToggle] == 1)//Missions + Checkpoint on toggle
	{
        	RingTone[playerid] = 20;
		    switch(MissionCheckpoint[playerid])
		    {
	        	case 1:
		        {
					format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP2][0], PlayMission[kCP2][1], PlayMission[kCP2][2], 8);
					MissionCheckpoint[playerid] = 2;
		        }
		        case 2:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP3][0], PlayMission[kCP3][1], PlayMission[kCP3][2], 8);
					MissionCheckpoint[playerid] = 3;
		        }
		        case 3:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP4][0], PlayMission[kCP4][1], PlayMission[kCP4][2], 8);
					MissionCheckpoint[playerid] = 4;
		        }
		        case 4:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP5][0], PlayMission[kCP5][1], PlayMission[kCP5][2], 8);
					MissionCheckpoint[playerid] = 5;
		        }
		        case 5:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP6][0], PlayMission[kCP6][1], PlayMission[kCP6][2], 8);
					MissionCheckpoint[playerid] = 6;
		        }
		        case 6:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passe : %s | Vous avez gagner: $%d ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(playerid, COLOR_GREEN, string);
					DisablePlayerCheckpoint(playerid);
					SafeGivePlayerMoney(playerid, PlayMission[kReward]);
					PlayerInfo[playerid][pMissionNr] = PlayerOnMission[playerid];
					MissionCheckpoint[playerid] = 0;
					PlayerOnMission[playerid] = 0;
		        }
		    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~Bienvenue a votre~n~~y~Maison", 5000, 1);
		    }
		}
	}
	if (BusrouteEast[playerid][0] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
		{
			new nextstop[64];
			BusrouteWest[playerid][0] = 0;
		    switch(BusrouteEast[playerid][0])
		    {
		        case 1:
		        {
					nextstop = "Airport";
		            SetPlayerCheckpoint(playerid, 1979.7369,-2171.4861,13.5363, 5.0);
					AdvertiseToPlayersAtBusStop(1979.7369,-2171.4861,13.5363, 0);
				}
				case 2:
				{
					nextstop = "Willowfield Factory";
				    SetPlayerCheckpoint(playerid, 2227.6953,-2201.9053,13.5164, 5.0);
					AdvertiseToPlayersAtBusStop(2227.6953,-2201.9053,13.5164, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 3:
				{
					nextstop = "Loco";
				    SetPlayerCheckpoint(playerid, 2719.9419,-2030.2104,13.5076, 5.0);
					AdvertiseToPlayersAtBusStop(2719.9419,-2030.2104,13.5076, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 4:
				{
					nextstop = "6 Street Plaza";
				    SetPlayerCheckpoint(playerid, 2470.8059,-1926.7136,13.5125, 5.0);
					AdvertiseToPlayersAtBusStop(2470.8059,-1926.7136,13.5125, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 5:
				{
					nextstop = "10 Green Bottles";
				    SetPlayerCheckpoint(playerid, 2348.0249,-1695.8247,13.5286, 5.0);
					AdvertiseToPlayersAtBusStop(2348.0249,-1695.8247,13.5286, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 6:
				{
					nextstop = "Pigpen";
				    SetPlayerCheckpoint(playerid, 2422.4092,-1251.1915,23.9176, 5.0);
					AdvertiseToPlayersAtBusStop(2422.4092,-1251.1915,23.9176, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 7:
				{
					nextstop = "Golden Palm";
				    SetPlayerCheckpoint(playerid, 2717.7463,-1218.8141,64.9276, 5.0);
					AdvertiseToPlayersAtBusStop(2717.7463,-1218.8141,64.9276, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 8:
				{
					nextstop = "Jefferson Motel";
				    SetPlayerCheckpoint(playerid, 2173.1165,-1114.3069,25.4259, 5.0);
					AdvertiseToPlayersAtBusStop(2173.1165,-1114.3069,25.4259, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 9:
				{
					nextstop = "Glen Park";
				    SetPlayerCheckpoint(playerid, 2028.4354,-1259.1379,23.9287, 5.0);
					AdvertiseToPlayersAtBusStop(2028.4354,-1259.1379,23.9287, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 10:
				{
					nextstop = "Bus Station";
				    SetPlayerCheckpoint(playerid, 1203.5101,-1833.5771,13.4946, 5.0);
					AdvertiseToPlayersAtBusStop(1203.5101,-1833.5771,13.4946, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 11:
				{
					nextstop = "end";
					TogglePlayerControllable(playerid, 0);
	                SendClientMessage(playerid, COLOR_YELLOW, "Bus Route Complet, utilisez /startest ou /startouest pour repartire.");
					SendClientMessage(playerid, COLOR_YELLOW, "Utilisez /sortir pour sortire du bus.");
				    DisablePlayerCheckpoint(playerid);
				}
			}
			BusrouteEast[playerid][0]++;
			if (strcmp(nextstop, "end", true) != 0)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~r~$25 Bonus~n~~n~~g~Prochain Arret: %s", nextstop);
				format(string2, sizeof(string2), "~n~~n~~n~~n~~n~~n~~n~~g~Prochain Arret: %s", nextstop);
			}
			else
			{
				string = "~g~Fin du parcours~n~~n~~r~$50 de bonus~n~~n~~w~/startest pour continuez de conduire le bus";
				string2 = "~n~~g~Fin du parcour~n~~n~~w~Merci de dessendre ou attendez le prochain depart";
				SafeGivePlayerMoney(playerid, 47);
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			for (new i=0; i<=MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) &&  GetPlayerVehicleID(i) == BusrouteEast[playerid][1])
				{
					if (BusrouteEast[i][0] != 0) GameTextForPlayer(i, string, 10000, 3);
					else GameTextForPlayer(i, string2, 10000, 3);
				}
			}
			SafeGivePlayerMoney(playerid, 25);
			return 1;
		}
	}
	else if (BusrouteWest[playerid][0] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid))
		{
			new nextstop[64];
			BusrouteEast[playerid][0] = 0;
		    switch(BusrouteWest[playerid][0])
		    {
		        case 1:
		        {
					nextstop = "Alhambra";
		            SetPlayerCheckpoint(playerid, 1826.8738,-1634.5306,13.5588, 5.0);
					AdvertiseToPlayersAtBusStop(1826.8738,-1634.5306,13.5588, 1);
				}
				case 2:
				{
					nextstop = "Glen Park";
				    SetPlayerCheckpoint(playerid, 1856.7260,-1211.7167,20.3898, 5.0);
					AdvertiseToPlayersAtBusStop(1856.7260,-1211.7167,20.3898, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 3:
				{
					nextstop = "Vinewood Burger";
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
				    SetPlayerCheckpoint(playerid, 1208.0479,-929.9481,42.9049, 5.0);
					AdvertiseToPlayersAtBusStop(1208.0479,-929.9481,42.9049, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 4:
				{
					nextstop = "Vice Theater";
				    SetPlayerCheckpoint(playerid, 1119.0096,-1137.8805,23.7597, 5.0);
					AdvertiseToPlayersAtBusStop(1119.0096,-1137.8805,23.7597, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 5:
				{
					nextstop = "Bank";
					SetPlayerCheckpoint(playerid, 1443.0234,-1028.7131,23.8281, 5.0);
					AdvertiseToPlayersAtBusStop(1443.0234,-1028.7131,23.8281, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 6:
				{
					nextstop = "Rodeo";
				    SetPlayerCheckpoint(playerid, 526.6218,-1480.9631,14.5567, 5.0);
					AdvertiseToPlayersAtBusStop(526.6218,-1480.9631,14.5567, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 7:
				{
					nextstop = "Santa Maria Beach";
				    SetPlayerCheckpoint(playerid, 443.9078,-1724.8008,10.0896, 5.0);
					AdvertiseToPlayersAtBusStop(443.9078,-1724.8008,10.0896, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 8:
				{
					nextstop = "Verona Beach";
				    SetPlayerCheckpoint(playerid, 836.2728,-1788.8121,13.9260, 5.0);
					AdvertiseToPlayersAtBusStop(836.2728,-1788.8121,13.9260, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 9:
				{
					nextstop = "Pershing Square";
				    SetPlayerCheckpoint(playerid, 1508.7136,-1735.5184,13.4921, 5.0);
					AdvertiseToPlayersAtBusStop(1508.7136,-1735.5184,13.4921, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 10:
				{
					nextstop = "Bus Station";
				    SetPlayerCheckpoint(playerid, 1203.5101,-1833.5771,13.4946, 5.0);
					AdvertiseToPlayersAtBusStop(1203.5101,-1833.5771,13.4946, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous devez attendre 10 secondes.");
				}
				case 11:
				{
					nextstop = "fin";
					TogglePlayerControllable(playerid, 0);
	                SendClientMessage(playerid, COLOR_YELLOW, "Bus Route Complet, utilisez /startest ou /startouest pour repartire.");
					SendClientMessage(playerid, COLOR_YELLOW, "Utilisez /sortir pour sortire du bus.");
				    DisablePlayerCheckpoint(playerid);
	          	}
			}
			BusrouteWest[playerid][0]++;
			if (strcmp(nextstop, "end", true) != 0)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~r~$25 Bonus~n~~n~~g~Prochain Arret: %s", nextstop);
				format(string2, sizeof(string2), "~n~~n~~n~~n~~n~~n~~n~~g~Prochain Arret: %s", nextstop);
			}
			else
			{
				string = "~g~Fin du parcours~n~~n~~r~$50 de bonus~n~~n~~w~/startest pour continuez de conduire le bus";
				string2 = "~n~~g~Fin du parcour~n~~n~~w~Merci de dessendre ou attendez le prochain depart";
				SafeGivePlayerMoney(playerid, 47);
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			for (new i=0; i<=MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) &&  GetPlayerVehicleID(i) == BusrouteWest[playerid][1])
				{
					if (BusrouteWest[i][0] != 0) GameTextForPlayer(i, string, 10000, 3);
					else GameTextForPlayer(i, string2, 10000, 3);
				}
			}
			SafeGivePlayerMoney(playerid, 25);
			return 1;
		}
	}
	if (BusShowLocationC[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		BusShowLocationC[playerid] = 0;
		return 1;
	}
	if(FarmerVar[playerid] == 1)
	{
	    if (IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new cash=(random(70-20)+20);
		    if(IsAHarvest(carid))
		    {
		        switch(FarmerPickup[playerid][0])
		        {
		            case 0:
		        	{
		            	SetPlayerCheckpoint(playerid, -205.9348,-1332.2749,10.4056, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 1:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 2:
		        	{
		        	    if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		            	SetPlayerCheckpoint(playerid, -548.5396,-1329.0653,19.6210, 5.0);
					}
					case 3:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 4:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -370.9486,-1281.1089,29.8698, 5.0);
					}
					case 5:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 6:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -258.3272,-1387.9211,10.1292, 5.0);
					}
					case 7:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 8:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -288.8517,-1385.0117,9.8957, 5.0);
					}
					case 9:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 10:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -283.1325,-1338.2822,7.4280, 5.0);
					}
					case 11:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 12:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -224.5992,-1509.1902,7.4473, 5.0);
					}
					case 13:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 14:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -247.2859,-1528.8744,6.5904, 5.0);
					}
					case 15:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 16:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -283.9610,-1549.7180,6.4975, 5.0);
					}
					case 17:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 18:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -431.6107,-1334.0961,28.6561, 5.0);
					}
					case 19:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 20:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        PlayerInfo[playerid][pPayCheck] += cash * 5;
		            		format(string, sizeof(string), "~w~Ajouter à votre paye~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -476.4 ,-1391.6769,20.4733, 5.0);
					}
					case 21:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 22:
		        	{
		            	DisablePlayerCheckpoint(playerid);
		            	TogglePlayerControllable(playerid, 0);
		            	GameTextForPlayer(playerid, "~w~Utilisez /sortir pour sortir~n~~r~Bonus 100$ en cash", 5000, 1);
		            	SafeGivePlayerMoney(playerid, 100);
					}
		        }
		        FarmerPickup[playerid][0]++;
		        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		    }
		}
		return 1;
	}
	if(MatsHolding[playerid] == 25)
	{
		if(PlayerInfo[playerid][pJob] == 22)
		{
		    DisablePlayerCheckpoint(playerid);
		    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			SafeGivePlayerMoney(playerid, 300);
			SendClientMessage(playerid, COLOR_WHITE, "Vous avez vendu 25 matériaux aux matériaux de banque.");
			MatsHolding[playerid] = 0;
			matssys[MatsAmmount] += 25;
			GameTextForPlayer(playerid, "~w~Materiaux importer", 5000, 1);
			SaveMatsSystem();
		}
	    return 1;
	}
	if(IsPuttingMaterials[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pJob] == 23)
	    {
	        if(PlayerInfo[playerid][pMats] < CreatingGunPrice[playerid])
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  pas asser de matériaux ");
	            return 1;
	        }
	        DisablePlayerCheckpoint(playerid);
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	        GameTextForPlayer(playerid, "~w~Materiaux livre avec succes", 5000, 1);
	        PlayerInfo[playerid][pMats] -= CreatingGunPrice[playerid];
	        CreatingGunPrice[playerid] = 0;
	        IsPuttingMaterials[playerid] = 0;
			new randomize = random(3)+1;
	        if(randomize == 1) ProxDetector(40.0, playerid, "Factory speaker: prenez le matos dans l usine !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        else if(randomize == 2) ProxDetector(40.0, playerid, "Factory speaker: Chea' ya blasta is outside !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        else ProxDetector(40.0, playerid, "Factory speaker: Damn nice ass gun i made. It's waiting for ya outside !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        IsTakingGun[playerid] = 1;
	        SetPlayerCheckpoint(playerid, 2163.3430,-2271.9934,13.3293, 1.0);
	        return 1;
	    }
	    return 1;
	}
	if(IsTakingGun[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pJob] == 23)
	    {
	        if(CreatingGun[playerid] == 0 || CreatingGunAmmo[playerid] == 0)
	        {
	            return 1;
	        }
	        DisablePlayerCheckpoint(playerid);
	        new gunname[128];
	        GetWeaponName(CreatingGun[playerid],gunname,sizeof(gunname));
	        format(string, sizeof(string), "   Vous avez pris %s à partir du sol.", gunname);
	        SendClientMessage(playerid, COLOR_GREY, string);
	        SafeGivePlayerWeapon(playerid, CreatingGun[playerid], CreatingGunAmmo[playerid]);
	        CreatingGun[playerid] = 0;
	        CreatingGunAmmo[playerid] = 0;
	        IsTakingGun[playerid] = 0;
	        return 1;
	    }
	    return 1;
	}
	if(DrugFarmerVar[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new cash=(random(250-100)+100);
		    if(IsADrugHarvest(carid))
		    {
		        switch(DrugFarmerPickup[playerid][0])
		        {
		            case 0:
		            {
                        SetPlayerCheckpoint(playerid, -181.4144,167.2931,7.8413, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 1:
		            {
                        SetPlayerCheckpoint(playerid, -184.1222,-66.2325,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 2:
		            {
                        SetPlayerCheckpoint(playerid, -39.6705,-102.2681,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 3:
		            {
                        SetPlayerCheckpoint(playerid, 35.3907,-74.2866,0.9706, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 4:
		            {
                        SetPlayerCheckpoint(playerid, 58.6579,-3.7121,1.6909, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 5:
		            {
                        SetPlayerCheckpoint(playerid, 19.7974,43.5431,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 6:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 7:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
		                	PlayerInfo[playerid][pPayCheck] += cash * 5;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Ajouter à votre paye~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, 30.2059,20.1222,3.1172, 5.0);
		            }
		            case 8:
		            {
                        SetPlayerCheckpoint(playerid, -21.3052,-60.9220,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 9:
		            {
                        SetPlayerCheckpoint(playerid, -191.6069,-70.8331,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 10:
		            {
                        SetPlayerCheckpoint(playerid, -253.8518,-3.7909,2.5041, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 11:
		            {
                        SetPlayerCheckpoint(playerid, -178.0497,128.4783,3.8665, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 12:
		            {
                        SetPlayerCheckpoint(playerid, -110.8844,143.1536,3.1144, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 13:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 14:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
		                	PlayerInfo[playerid][pPayCheck] += cash * 5;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Ajouter à votre paye~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, -164.3909,28.9677,3.1172, 5.0);
		            }
		            case 15:
		            {
                        SetPlayerCheckpoint(playerid, -213.1695,-26.4404,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 16:
		            {
                        SetPlayerCheckpoint(playerid, -11.7208,-10.7312,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 17:
		            {
                        SetPlayerCheckpoint(playerid, 11.4609,-90.3436,2.0164, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 18:
		            {
                        SetPlayerCheckpoint(playerid, 63.1697,-22.5562,1.2136, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 19:
		            {
                        SetPlayerCheckpoint(playerid, 23.2130,30.9418,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 20:
		            {
                        SetPlayerCheckpoint(playerid, -134.6788,151.1453,3.9566, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 21:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 22:
		            {
		                if(JustStarted[playerid] != 1)
		                {
		                	PlayerInfo[playerid][pPayCheck] += cash * 5;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Ajouter à votre paye~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, 45.6651,35.6647,2.1518, 5.0);
		            }
		            case 23:
		            {
                        SetPlayerCheckpoint(playerid, 65.9438,-13.9811,1.3468, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 24:
		            {
                        SetPlayerCheckpoint(playerid, 17.1980,-86.7067,1.7758, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 25:
		            {
                        SetPlayerCheckpoint(playerid, -7.0889,-19.7445,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 26:
		            {
                        SetPlayerCheckpoint(playerid, -185.1862,155.1479,6.5185, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 27:
		            {
                        SetPlayerCheckpoint(playerid, -184.7949,-57.7402,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 28:
		            {
                        SetPlayerCheckpoint(playerid, -263.0331,-45.5427,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 29:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 30:
		            {
		                if(JustStarted[playerid] != 1)
		                {
		                	PlayerInfo[playerid][pPayCheck] += cash * 5;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~Ajouter à votre paye~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, -255.7015,-3.0833,2.4276, 5.0);
		            }
		            case 31:
		            {
                        SetPlayerCheckpoint(playerid, -171.7835,-59.3110,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 32:
		            {
                        SetPlayerCheckpoint(playerid, -153.4347,143.9473,4.1833, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 33:
		            {
                        SetPlayerCheckpoint(playerid, 49.4775,24.9682,1.8078, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 34:
		            {
                        SetPlayerCheckpoint(playerid, -9.5707,-36.4109,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 35:
		            {
                        SetPlayerCheckpoint(playerid, 35.6805,-95.6367,0.6169, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 36:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 37:
		            {
	                	PlayerInfo[playerid][pPayCheck] += cash * 5;
	                	drugsys[DrugAmmount]++;
	                	SaveDrugSystem();
                        DisablePlayerCheckpoint(playerid);
                        TogglePlayerControllable(playerid, 0);
                        GameTextForPlayer(playerid, "~w~Utilisez /sortir Pour Sortir", 5000, 1);
		            }
		        }
		        DrugFarmerPickup[playerid][0]++;
		        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		    }
		}
		return 1;
	}
	if(SmugglerWork[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsASmuggleCar(carid))
	        {
	            switch (SmugglerWork[playerid])
	            {
	                case 1:
	                {
	                    TogglePlayerControllable(playerid, 0);
	            		SendClientMessage(playerid, COLOR_WHITE, "drogue bien importée, utilisez /sortir pour quiter la voiture.");
	            		PlayerInfo[playerid][pDrugs] += SmuggledDrugs[playerid];
	            		format(string, sizeof(string), "~b~%d ~w~gramme de drogue importé",SmuggledDrugs[playerid]);
           				GameTextForPlayer(playerid, string, 5000, 1);
	            		DisablePlayerCheckpoint(playerid);
	            		SmuggledDrugs[playerid] = 0;
	            		SmugglerWork[playerid] = 0;
	            		SaveAccount(playerid);
	                }
	            }

	        }
	    }
	    return 1;
	}
	if(PlayerIsSweeping[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsASweeper(carid))
	        {
	            new cashes=(random(35-10)+10);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "~g~%d$ ~w~Ajouter a votre paye",cashes);
	            GameTextForPlayer(playerid, string, 5000, 1);
	            DisablePlayerCheckpoint(playerid);
	            PlayerInfo[playerid][pPayCheck] += cashes * 5;
	            new randomss;
		        randomss = random(sizeof(gSweeperPoints));
		        SetPlayerCheckpoint(playerid, gSweeperPoints[randomss][0], gSweeperPoints[randomss][1], gSweeperPoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if(PlayerIsTrucking[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsATruck(carid))
	        {
	            new cashes=(random(65-10)+10);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "~g~%d$ ~w~Ajouter a votre paye",cashes);
	            GameTextForPlayer(playerid, string, 5000, 1);
	            DisablePlayerCheckpoint(playerid);
	            PlayerInfo[playerid][pPayCheck] += cashes * 5;
	            new randomss;
		        randomss = random(sizeof(gTruckPoints));
		        SetPlayerCheckpoint(playerid, gTruckPoints[randomss][0], gTruckPoints[randomss][1], gTruckPoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if(PlayerIsPizzabiking[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsAPizzabike(carid))
	        {
	            new cashes=(random(30-10)+10);
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "~g~%d$ ~w~Ajouter a votre paye",cashes);
	            GameTextForPlayer(playerid, string, 5000, 1);
	            DisablePlayerCheckpoint(playerid);
	            PlayerInfo[playerid][pPayCheck] += cashes * 5;
	            new randomss;
		        randomss = random(sizeof(gPizzabikePoints));
		        SetPlayerCheckpoint(playerid, gPizzabikePoints[randomss][0], gPizzabikePoints[randomss][1], gPizzabikePoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if (InAFoodPlace[playerid] != 0)
	{
		TogglePlayerControllable(playerid, 0);
		switch (InAFoodPlace[playerid])
		{
			case 1: 
			{
				ShowMenuForPlayer(chickenmenu, playerid);
				SetPlayerPos(playerid,368.9714,-6.2486,1001.8516);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 2: 
			{
				ShowMenuForPlayer(burgermenu, playerid);
				SetPlayerPos(playerid,376.8571,-67.6620,1001.5151);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 3:
			{
				ShowMenuForPlayer(pizzamenu, playerid);
				SetPlayerPos(playerid,375.6895,-118.9683,1001.4995);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 4: 
			{
				ShowMenuForPlayer(donutshop, playerid);
				SetPlayerPos(playerid,379.0611,-186.6032,1000.6328);
				SetPlayerFacingAngle(playerid, 280);
			}
		}
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
    Script_OnPlayerPickUpPickup(playerid, pickupid);
	if (pickupid == gunamm)
	{
		GameTextForPlayer(playerid, "~y~Tapez ~b~ /armes\n~w~Pour acheter une arme", 5000, 3);
		return 1;
	}
	if( pickupsdeath[ pickupid ][ creation_time ] != 0 )
	{
		GivePlayerWeapon( playerid, pickupsdeath[ pickupid ][ weaponpickup ], pickupsdeath[ pickupid ][ ammopickup ] );
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	if(IsPlayerNPC(playerid)){ return 1; }
    Script_OnPlayerSelectedMenuRow(playerid, row);
    new Menu:Current = GetPlayerMenu(playerid);
    new Float:PlayerHealth;
    new Health = GetPlayerHealth(playerid, PlayerHealth);
    if (Current == Aide)
	{

        if (row == 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Générales ______________________|");
			SendClientMessage(playerid, COLOR_GREEN,"(/re)port, /rapport, /moteur, /guide, /masque, /masquernumero, /ouvrir, /hautparleur,");
			SendClientMessage(playerid, COLOR_GREEN,"/changermdp, /gps /instructeurs, /uriner, /donner, /bailloner, /debailloner, /bander, /debander, /regardernotes,");
			SendClientMessage(playerid, COLOR_GREEN,"/supprimernote, /creernote, /donnernote, /toquer, (/inv)entaire, /prendrearme, /deposerarme, (/v)ehicule,");
			SendClientMessage(playerid, COLOR_GREEN,"/coffre, (/fe)netre, /fouillerportemonnaie, /vehid, /identite, /fumer, /finircigarette, /fumeranim, (/o)oc,");
			SendClientMessage(playerid, COLOR_GREEN,"/payer, /stats, /numero, /niveausuperieur, /levelzero (100k), /acheterarme, /ameliorer, /pub, /stopanim, /eteindrepm,");
			SendClientMessage(playerid, COLOR_GREEN,"/eteindretel, /moi, (/chu)chotter, (/c)rier, /verouiller, (/p)m, /retirer, /deposer, /balance, /jetterde");
			SendClientMessage(playerid, COLOR_GREEN,"/jetterpiece, /virement, /acheter, /heure, /entrer, /sortir, /vie, /demanderenmariage, /divorce, /demandertemoin");
			SendClientMessage(playerid, COLOR_GREEN,"/lotto, /boire, /ligotter, /deligotter, /services, /vendre, /mangerpizza, /Permis, /montrerpermis, /jetterdrogue, /jettermatos");
			SendClientMessage(playerid, COLOR_GREEN,"/plein, /annuler, /accepter, /utiliserdrogue, /sesoigner, /ejecter, /prendrejob, /credits");
	    	TogglePlayerControllable(playerid,1);
	    	return 1;
        }
		else if (row == 1)
		{
			if(PlayerInfo[playerid][pPbiskey] == 255)
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Biz ______________________|");
	         	SendClientMessage(playerid, COLOR_GREEN,"/acheterbiz");
	        	TogglePlayerControllable(playerid,1);
	        	return 1;
	    	}
			if(PlayerInfo[playerid][pPbiskey] != 255)
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Biz ______________________|");
	        	SendClientMessage(playerid, COLOR_GREEN,"/vendrebiz, /bizinfo, /prixentreebiz, /prodprice, /extortion");
	        	SendClientMessage(playerid, COLOR_GREEN,"/nombiz, /retirerbiz, /deposerbiz");
	        	TogglePlayerControllable(playerid,1);
	        	return 1;
	    	}
        }
		else if (row == 2)
		{
	        if( PlayerInfo[playerid][pPhousekey] != 255)
	        {
	    		SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Maison ______________________|");
	        	SendClientMessage(playerid, COLOR_GREEN,"/delouer, /retirermaison, /vendremaison, /maisonupgrade, /prixlocation");
	        	SendClientMessage(playerid, COLOR_GREEN,"/expulserall, /expulser, /maisonlouable");
	        	TogglePlayerControllable(playerid,1);
	        	return 1;
	        }
	        else if( PlayerInfo[playerid][pPhousekey] == 255)
	        {
	    		SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Maison ______________________|");
	        	SendClientMessage(playerid, COLOR_GREEN,"/achetermaison, /louermaison");
	        	TogglePlayerControllable(playerid,1);
	        	return 1;
	        }
        }
		else if (row == 3)
		{
			SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Téléphone ______________________|");
	    	SendClientMessage(playerid, COLOR_GREEN,"/appelercacher, /appeler, /sms, /rep, /raccrocher");
	    	TogglePlayerControllable(playerid,1);
	    	return 1;
        }
		else if (row == 4)
		{
 		    if(PlayerInfo[playerid][pJob] == 1)
	        {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Detective ______________________|");
		        SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /suivre");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
 		    if(PlayerInfo[playerid][pJob] == 2)
	        {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Avocat ______________________|");
		        SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /liberer");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
 		    if(PlayerInfo[playerid][pJob] == 3)
	        {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Prostituée ______________________|");
		        SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /sexe");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 4)
	        {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Dealer ______________________|");
		        SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /vendredrogue");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 5)
	        {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Voleur de voiture ______________________|");
		        SendClientMessage(playerid, COLOR_GREEN,"/apportervoiture");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
 			if(PlayerInfo[playerid][pJob] == 7)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Mecanicien ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /hydrau, /nitro, /ouvrirgrille, /remplire, /reparer, /remorquer");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 8)
	        {
               	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Garde Du Corps ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /proteger");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 11)
	        {
               	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Boxeur ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /boxstats, /lancerduel");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 13)
	        {
               	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Chauffeur de Bus ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /startest, /startouest, /transportenservice");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 14)
	        {
               	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Chauffeur de Camion ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /charger, /acheterproduits, /vendreproduits");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 15)
	        {
               	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Pizza-Boy  ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /vendrepizza");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
 			if(PlayerInfo[playerid][pJob] == 16)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Fermier ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /startrecolte, /stoprecolte");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 19)
	        {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Planteur de Ganja ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /startrecoltededrogue/startrecoltededrogue, /stoprecoltededrogue");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 17)
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Balayeur de Rue ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /startbalayage, /stopbalayage");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
		    if(PlayerInfo[playerid][pJob] == 20)
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes du Maitre Dealer ______________________|");
				SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /creerarme, /achetermateriaux ,/chargerdrogue, /vendredroguea");
				SendClientMessage(playerid, COLOR_GREEN,"/chargermateriaux, /vendremateriaux, /vendredrogue, /charger, /acheterproduits, /vendreproduits");
				TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
			if(PlayerInfo[playerid][pJob] == 9)
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Des dealeurs d'armes ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /creerarme, /achetermateriaux/vendrearme ");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
		    if(PlayerInfo[playerid][pJob] == 22)
		    {
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Contrebandier de Materiaux ______________________|");
	    		SendClientMessage(playerid, COLOR_GREEN,"/jobradio(/jr), /chargermateriaux, /vendremateriaux");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
	        else
	        {
	    		SendClientMessage(playerid, COLOR_RED,"Vous n'avez pas de Job");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
	        }
        }
		else if (row == 5)
		{
			if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes LSPD ______________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/forcer, /ouvrirprison, /fermerprison, /montrerbadge, /tracerdernierappel, /ouvrirgrille");
		    	SendClientMessage(playerid, COLOR_GREEN,"/ouvrirporte, /fermerporte, /autoriserswat, /interdireswat, /swat, /bkf, /bkc");
		    	SendClientMessage(playerid, COLOR_GREEN,"/barrage, (/gouv)ernement, (/m)egaphone, /service, (/d)epartements, /mdc, (/su)spect");
		    	SendClientMessage(playerid, COLOR_GREEN,"/droits, /equiper, /remorquer, /donnerpermisarme, /forcerporte, /camera, /prendre");
		    	SendClientMessage(playerid, COLOR_GREEN,"/deligotterpolice, /fouiller, /fouillerinv, (/ta)zer, /couverture, (me)notter, /demenotter");
 	 	    	SendClientMessage(playerid, COLOR_GREEN,"/rechercher, /pv,  , /f, (/r)adio, /membres");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
   			if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes FBI ______________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/forcer, /ouvrirprison, /fermerprison, /montrerplaque, /ouvrirporte, /fermerporte");
		    	SendClientMessage(playerid, COLOR_GREEN," , /fermerporte, /autorisertactical, /interdiretactical, /tactical");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/gouv)ernement, (/m)egaphone, /service, (/d)epartements, /mdc, (/su)spect");
		    	SendClientMessage(playerid, COLOR_GREEN,"/droits, /forcerporte, /fouiller, /fouillerinv, (/ta)zer, /agent, (/me)notter");
		    	SendClientMessage(playerid, COLOR_GREEN,"/demenotter, /rechercher, /arreter, /f, (/r)adio, /membres, /bkf");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
   			if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ MSAF ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/forcer, /ouvrirprison, /fermerprison, /ouvrirgrille, /ouvrirporte, /fermerporte");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/gouv)ernement, (/m)egaphone, /demenotter, /rechercher, /arreter, /f, (/r)adio");
		    	SendClientMessage(playerid, COLOR_GREEN,"/service, (/d)epartements, /droits, /equiper, /fouiller, /fouillerinv, (/ta)zer");
		    	SendClientMessage(playerid, COLOR_GREEN,"/menotter");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
            if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ MS-13 ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/r)adio, /f, /membres, /braquer, (/esp)agnol, /restaurerskin, /bkf, /bkc");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
			}
   			if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Cosa Nostra ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/r)adio, /f, /membres, /braquer, (/ita)lien, /ouvrirgrille, /restaurerskin, /bkf, /bkc");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
			if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Russe ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/r)adio, /f, /membres, /braquer, (/ita)lien, /ouvrirgrille, /restaurerskin, /bkf, /bkc");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
   			if(PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pMember] == 14)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Yakuza ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/r)adio, /f, /membres, /braquer, /restaurerskin, /bkf, /bkc");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
   			if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Crip's ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/r)adio, /f, /membres, /braquer, /restaurerskin, /bkf, /bkc");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
		    if(PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 16)
			{
		    	SendClientMessage(playerid, COLOR_YELLOW,"|___________________ B.Ballas ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"(/r)adio, /f, /membres, /braquer, /restaurerskin, /bkf, /bkc");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
	        else
	        {
	    		SendClientMessage(playerid, COLOR_RED,"Vous n'avez pas de Faction");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
        }
   		else if (row == 6)
		{
   			if(PlayerInfo[playerid][pLeader] == 1)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Sheriff ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
   			if(PlayerInfo[playerid][pLeader] == 2)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Directeur ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
   			if(PlayerInfo[playerid][pLeader] == 3)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Caporal ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
   			if(PlayerInfo[playerid][pLeader] == 5)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Leader ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/verouillerhq, /invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
   			if(PlayerInfo[playerid][pLeader] == 6)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Leader ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/verouillerhq, /invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
  			if(PlayerInfo[playerid][pLeader] == 12)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Leader ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/verouillerhq, /invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
   			if(PlayerInfo[playerid][pLeader] == 14)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Leader ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/verouillerhq, /invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
   			if(PlayerInfo[playerid][pLeader] == 15)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"|___________________ Commandes Leader ___________________|");
		    	SendClientMessage(playerid, COLOR_GREEN,"/verouillerhq, /invite, /virer, /donnerrank");
		    	TogglePlayerControllable(playerid,1);
		    	return 1;
	    	}
	        else
	        {
	    		SendClientMessage(playerid, COLOR_RED,"Vous n'êtes pas leader d'une faction");
	    		TogglePlayerControllable(playerid,1);
	    		return 1;
		    }
	  if(row==7)
	  {
	  	if(PlayerInfo[playerid][pAdmin] == 500)
	{
    SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes MDC ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/a | /n | /adminliste |");
	}
	if(PlayerInfo[playerid][pAdmin] == 1000)
	{
    SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur en test ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /setint | /setvw | /muter | /kick | /unfreeze |/freeze |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /gethere | /a | /ao | /skin | /taule | /specplayer | /bigears | /specoff | /ab |");
	}
	if (PlayerInfo[playerid][pAdmin] == 2000)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur1 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer| /bigears | /specoff | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /setjob | /gotols | /pma(pm admin) | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 2250)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur2 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer| /bigears | /specoff | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc| /rc | /setjob | /gotols | /pma(pm admin) | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 2500)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur3 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc | /rc | /setjob | /gotols | /startlotto | /pma(pm admin) | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 2750)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur4 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc | /rc | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /nom |");
 	}
	if (PlayerInfo[playerid][pAdmin] == 3000)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur1  ______________________|");
   	SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin)  | /tutoriel |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 3250)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur2  ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel | /clear2 |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /entrercar | /faireplonger |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 3500)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur3  ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel | /clear2 |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /entrercar | /faireplonger |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 3750)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur4  ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel | /clear2 |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /entrercar | /faireplonger |");
 	}
	if (PlayerInfo[playerid][pAdmin] == 4000)
	{
	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes SuperAdmin  ______________________|");
	SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel |");
	SendClientMessage(playerid, COLOR_GREEN,"/gotohopital | /ip | /modifier | /vehslap |/gotoin | /gotostad | /gotolv | /gotosf | /gotocar |");
	SendClientMessage(playerid, COLOR_GREEN,"/getcar | /setage | /entrercar | /gotojet | /rac | /racblocation | /racclocation |/ban | /nom |");
    SendClientMessage(playerid, COLOR_GREEN,"/unban | /deverouiller | /donnerdrogue | /sethp | /setarmor |/explose | /clear2 | /clear2 | /faireplonger |");
	}
	if (PlayerInfo[playerid][pAdmin] == 9999)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes AdminGeneral ______________________|");
	SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab |/donnerarme |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc | /rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/gotohopital | /ip | /modifier | /vehslap |/gotoin | /gotostad | /gotolv | /gotosf | /gotocar |");
	SendClientMessage(playerid, COLOR_GREEN,"/getcar | /setage | /entrercar | /gotojet | /rac | /racblocation | /racclocation |/ban | /tutoriel |");
    SendClientMessage(playerid, COLOR_GREEN,"/unban | /deverouiller | /donnerdrogue | /sethp | /setarmor |/explose | /sslap | donnermateriaux |");
 	SendClientMessage(playerid, COLOR_GREEN,"/setchampion  | /weatherall | /donnerargent | /aadmin | /aleader | /avmenu |/settstat | /flip | /faireplonger |");
 	SendClientMessage(playerid, COLOR_GREEN,"/clear2 | /ninja |");
	}
        }
        }
		else if (row == 8)
		{
	    	TogglePlayerControllable(playerid,1);
	    	return 1;
        }
    }
    if(Current == BurgerShot)
	{
	 	switch(row)
	 	{
	  		case 0:
	  		{
	  			GivePlayerMoney(playerid, -3);
	  			if(Health <= 74.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+25);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Merci d'avoir acheté le Baby Burger ! Bon appétit et bon après-midi");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 1:
	  		{
	  			GivePlayerMoney(playerid, -6);
	  			if(Health <= 49.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+50);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Merci d'avoir acheté le double de fromage, bon repas et bon après-midi!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 2:
	  		{
	  			GivePlayerMoney(playerid, -9);
	  			SetPlayerHealth(playerid, 100);
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Merci d'avoir acheté le bicmac, bon appetit et bon après-midi!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 3:
			{
			    if(PlayerTied[playerid] != 1 || PlayerCuffed[playerid] != 1)
			    {
			        TogglePlayerControllable(playerid, 1);

				}
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
	if(Current == CluckinBell)
	{
	 	switch(row)
	 	{
	  		case 0:
	  		{
	  			GivePlayerMoney(playerid, -3);
	  			if(Health <= 74.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+25);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin 'Bell: Je vous remercie de votre fidelelité pour notre magasin, bon après-midi!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 1:
	  		{
	  			GivePlayerMoney(playerid, -6);
	  			if(Health <= 49.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+50);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin 'Bell: nous vous remercions et espérons que vous apprécierez votre aile de poulet, et une bonne journée! ");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 2:
	  		{
	  			GivePlayerMoney(playerid, -9);
	  			SetPlayerHealth(playerid, 100);
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin 'Bell: Nous espérons que vous mangerez tous, belle journée !");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 3:
			{
			    if(PlayerTied[playerid] != 1 || PlayerCuffed[playerid] != 1)
			    {
			        TogglePlayerControllable(playerid, 1);

				}
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
   	if(Current == burgermenu || Current == chickenmenu || Current == pizzamenu || Current == donutshop)
	{
		TogglePlayerControllable(playerid, 1);
		if (row != 10) // 10 = Leave
		{
			if (GetPlayerMoney(playerid) <= 0)
			{
				GameTextForPlayer(playerid, "~r~Pas assez d'argent", 5000, 1);
				return 1;
			}
			new actstring[128];
			new sendername[64];
			new Float:health;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerHealth(playerid, health);
			if (row == 7 || row == 8) // Drink
			{
				format(actstring, sizeof(actstring), "* %s boit sa tasse .", sendername);
				SafeGivePlayerMoney(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			else // Meal
			{
				switch (row)
				{
					case 1:
					{
					    if(Current == donutshop) format(actstring, sizeof(actstring), "* %s mange un peu et joue avec le petit jouet qui l'accompagne.", sendername);
						else format(actstring, sizeof(actstring), "* %s mange un HappyMeal et joue avec le petit jouet qui l'accompagne.", sendername);
						SafeGivePlayerMoney(playerid, -2);
						SetPlayerHealth(playerid, health + 20);
					}
					case 2:
					{
						if (Current == chickenmenu) format(actstring, sizeof(actstring), "* %s mange des nugets.", sendername);
						else if (Current == pizzamenu) format(actstring, sizeof(actstring), "* %s mange une pizza.", sendername);
						else if (Current == donutshop) format(actstring, sizeof(actstring), "* %s mange des donuts.", sendername);
						else format(actstring, sizeof(actstring), "* %s mange son cheeseburger.", sendername);
						SafeGivePlayerMoney(playerid, -4);
						SetPlayerHealth(playerid, health + 50);
					}
					case 3:
					{
						if (Current == pizzamenu) format(actstring, sizeof(actstring), "* %s mange sa pizza grasse .", sendername);
						else if (Current == donutshop) format(actstring, sizeof(actstring), "* %s mange un extra large donuts au chocolats.", sendername);
						else format(actstring, sizeof(actstring), "* %s mange un sandwich gras.", sendername);
						SafeGivePlayerMoney(playerid, -5);
						SetPlayerHealth(playerid, health + 80);
					}
					case 4:
					{
					    if (Current == donutshop) format(actstring, sizeof(actstring), "* %s mange un gros donuts.", sendername);
					    else format(actstring, sizeof(actstring), "* %s mange de la salade fraîche (avec une fourchette, bien sûr).", sendername);
						SafeGivePlayerMoney(playerid, -3);
						SetPlayerHealth(playerid, health + 35);
					}
				}
				if (Current == burgermenu) ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,1);
				else if (Current == chickenmenu) ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,0,1);
				else if (Current == pizzamenu) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				else if (Current == donutshop) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				if (GetPlayerMoney(playerid) > 100) SetPlayerHealth(playerid, 100);
			}
			ProxDetector(30.0, playerid, actstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if(Current == Guide)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "______________Regles du jeu_______________");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Etre toujours RP");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Pas de DM (Ce serveur est Role Play)");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Seulement des personnes fr sont autorisés sur ce serveur");
	            SendClientMessage(playerid, COLOR_GRAD5, "* N'utilisez pas de cheat ou bug (utiliser /rapport)");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Le Drive-by est formellment interdit ");
	            SendClientMessage(playerid, COLOR_GRAD5, "* N'utiliser pas de smiley dans le chat");
	            SendClientMessage(playerid, COLOR_GRAD5, "* N'utiliser pas de bunnyhop, c'est interdit (touche saut)");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Plus d'information? rdv sur gamingofliferoleplay.forum2jeux.com");
	            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	            TogglePlayerControllable(playerid,1);
	        }
	        case 1:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            ShowMenuForPlayer(JobLocations, playerid);
	        }
	        case 2:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Le centre pour passer son permis est marqué (rouge)sur la carte.");
	            SendClientMessage(playerid, COLOR_WHITE, "Type: Faites /Permis pour voir la liste des permis a passer disponible");
	            SetPlayerCheckpoint(playerid,1286.7996,-1329.1757,13.5549,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 3:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Le concessionaire auto est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1696.5543,-1053.4685,23.9063,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "La magasin de vetement est marqué (rouge) sur la carte.");
	            SendClientMessage(playerid, COLOR_WHITE, "Type: Faites /vetements pour chosir differents vetements.");
	            SetPlayerCheckpoint(playerid,1420.5431,-1622.8782,13.5469,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 5:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            TogglePlayerControllable(playerid,1);
	        }
	    }
	}
	if(Current == JobLocations)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job d'avocat est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1708.7024,-1648.9265,23.6953,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 1:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de protistué est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1857.6784,-1871.2180,12.5046,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 2:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de mecanicien est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1650.0622,-1829.2011,12.5432,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 3:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de gardeducorps est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1735.0490,-1642.6157,23.7570,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 4:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de boxer est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1735.0833,-1654.2095,23.7316,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 5:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de chauffeur de bus est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1708.7209,-1659.6443,23.7030,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 6:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de cammionneur est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,-77.7208,-1136.3131,0.0781,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 7:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Le job de livreur de pizza est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,2100.9458,-1811.9661,12.5297,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 8:
			{
				HideMenuForPlayer(JobLocations, playerid);
				ShowMenuForPlayer(JobLocations2, playerid);
			}
			case 9:
			{
			    HideMenuForPlayer(JobLocations, playerid);
	            ShowMenuForPlayer(Guide, playerid);
			}
	    }
	}
	if(Current == JobLocations2)
	{
	    switch(row)
	    {
	        case 0:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Le job fermier est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,-381.2035,-1426.1820,25.9070,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 1:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "le job  dealer de drogue est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1343.7381,-1771.5291,12.5104,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Le job Vendeur d'arme est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,2445.3659,-1759.4938,12.5600,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Le job  balayeur de ville est marqué (rouge) sur la carte.");
	            SetPlayerCheckpoint(playerid,1667.0897,-1903.5375,12.5468,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 4:
			{
				HideMenuForPlayer(JobLocations2, playerid);
				ShowMenuForPlayer(JobLocations, playerid);
			}
			case 5:
			{
			    HideMenuForPlayer(JobLocations2, playerid);
			    ShowMenuForPlayer(Guide, playerid);
			}
	    }
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
    Script_OnPlayerExitedMenu(playerid);
	new Menu:Current = GetPlayerMenu(playerid);
	if(!IsValidMenu(Current)) return 1;
	ShowMenuForPlayer(Current, playerid);
	TogglePlayerControllable(playerid,1);
	SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
	return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
    Script_OnVehicleMod(playerid, vehicleid, componentid);
	return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    Script_OnVehicleRespray(playerid, vehicleid, color1, color2);
	return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    Script_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	return 1;
}
public RefreshMenuHeader(playerid,Menu:menu,text[])
{
	SetMenuColumnHeader(menu,0,text);
	ShowMenuForPlayer(menu,playerid);
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(IsPlayerNPC(playerid)){ return 1; }
    Script_OnPlayerStateChange(playerid, newstate);
    new VID = GetPlayerVehicleID(playerid);
	new string[256];
    if(newstate == PLAYER_STATE_DRIVER)
    {
        format(string, sizeof(string), "~g~%s",Nom_Des_Vehicules[GetVehicleModel(VID)-400]);
        GameTextForPlayer(playerid,string,3500,1);
        SendClientMessage(playerid,COLOR_RED,"Veuillez mettre votre ceinture pour plus de securitée [/ceinture]");
    }
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Balayeur de ville $%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SafeGivePlayerMoney(playerid, TransportMoney[playerid]);
			/*ConsumingMoney[playerid] = 1;*/ TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~Le trajet coute~n~~r~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    format(string, sizeof(string), "~w~Le passager a quitté le taxi ~n~~g~Gagner $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				SafeGivePlayerMoney(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUS
	{
		SendClientMessage(playerid,COLOR_RED,"Veuillez mettre votre ceinture pour plus de securiter [/ceinture]");
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if( GetPlayerMoney(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), "* Tu as besoin de $%d pour rentrer.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(string, sizeof(string), "* Vous payez $%d pour le chauffeur de taxi.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Le passager %s est entré dans la taxi.", name);
							SendClientMessage(i, COLOR_WHITE, string);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(string, sizeof(string), "* Tu paye $%d pour le chauffeur de bus.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Le passager %s est entré dans le bus.", name);
							SendClientMessage(i, COLOR_WHITE, string);
	                    }
						SafeGivePlayerMoney(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(WantedLevel[playerid] >= 1)
		{
		    new price = WantedLevel[playerid] * 1000;
			new count;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(gTeam[i] == 2 && CrimInRange(30.0, playerid,i))
				    {
						count = 1;
						format(string, sizeof(string), "~w~Suspect~r~Tuer~n~Bonus~g~$%d", price);
						GameTextForPlayer(i, string, 5000, 1);
						//ConsumingMoney[i] = 1;
						SafeGivePlayerMoney(i, price / 2);
						PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					}
				}
			}
			if(count == 1)
			{
				SafeGivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pWantedDeaths] += 1;
				PlayerInfo[playerid][pJailed] = 1;
			    PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid])*(600);
			    format(string, sizeof(string), "* Vous êtes à la prison pour les %d secondes et perdez $%d en raison de la fugue.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, string);
			    WantedPoints[playerid] = 0;
				WantedLevel[playerid] = 0;
			}
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{// 38 / 49 / 56 = SS
		new newcar = GetPlayerVehicleID(playerid);
		new oldcar = gLastCar[playerid];
		new housecar = PlayerInfo[playerid][pPhousekey]+1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, "  Tu ne sais pas piloter, alors tu sors de l'avion !");
			    RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1); }
			}
		}
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 0)
			{
			    if(PlayerDrunk[playerid] >= 5)
				{
				    WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Conduite en état d'ivresse");
				}

			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "Conduite en état d'ivresse");
			}
			else if(IsAOBike(newcar))
		    {
		        SendClientMessage(playerid, COLOR_RED, "N'oublie pas ton casque /casque");
			}

			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar)) { }
			    else
			    {
	                /*if(PlayerInfo[playerid][pCarLic] < 1)
					{
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Driving without Permis");
					}*/
					if(TakingLesson[playerid] == 1) { }
					else {
					SendClientMessage(playerid, COLOR_YELLOW, "   Vous n'avez pas encore de permis de conduire ! Conduisez prudemment ou la police sera a vos trousse.");
	              }
				}
			}
		}//Done with car check
		if(IsAPizzabike(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 15) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la clé du cadena de ce scooteur.");}
		}
		if(IsABus(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 13)
			{
			    GameTextForPlayer(playerid, "~w~Utilise /startest or /startouest pour commencer le trajet en bus", 5000, 3);
				SendClientMessage(playerid, COLOR_YELLOW2, "Vous etes entrer dans un bus, faites /sortir pour en sortir.");
				//GangZoneShowForPlayer(playerid, buszonewest, COLOR_RED);
				//GangZoneShowForPlayer(playerid, buszoneeast, COLOR_BLUE);
				SendClientMessage(playerid, COLOR_YELLOW2, "Pour commencer à faire la route (de l'ouest), utilisez /startouest. Pour commencer à faire la route (de l'est), utilisez /startest.");
				new routezonecheck = IsInBusrouteZone(playerid);
				if (routezonecheck == 0) SendClientMessage(playerid, COLOR_YELLOW, "Note: Votre itinéraire le plus proche se trouve à l'est.");
				else if (routezonecheck == 1) SendClientMessage(playerid, COLOR_YELLOW, "Note: Votre itinéraire le plus proche se trouve à l'ouest.");
				TogglePlayerControllable(playerid, 0);
			}
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clés de ce bus !.");}
	        TogglePlayerControllable(playerid, 1);
		}
		if(IsATowcar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 7) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clés de ce vehicule.");}
	        TogglePlayerControllable(playerid, 1);
		}
		if(IsATruck(newcar))
	    {
        if(PlayerInfo[playerid][pJob] == 14)
		    {
			     SendClientMessage(playerid, COLOR_WHITE, "** Camionneur ** /startlivraison, /stoplivraison ");
			     TogglePlayerControllable(playerid, 0);
            }
		    else
	        {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clés de ce véhicule!");
	            TogglePlayerControllable(playerid, 1);
		    }
		}
		if(IsASweeper(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 17)
		    {
			     SendClientMessage(playerid, COLOR_WHITE, "** Nettoyeur ** /startbalayage, /stopbalayage ");
			     TogglePlayerControllable(playerid, 0);
            }
		    else
	        {
		        RemovePlayerFromVehicle(playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas les clés de ce véhicule!");
	            TogglePlayerControllable(playerid, 1);
		    }
		}
		if(PlayerKarting[playerid] != 0)
		{
		    if(IsAKart(newcar))
		    {
		        PlayerInKart[playerid] = 1;
		    	KartingPlayers ++;
			}
		}
		if(IsAnInstructionVehicule(newcar))
		{
		    if(TakingLesson[playerid] == 1) { }
		    else if(!IsAnInstructor(playerid))
		    {
		        SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas les clés de ce véhicule!");
		        RemovePlayerFromVehicle(playerid);
	            TogglePlayerControllable(playerid, 1);
		    }
		}
		if(IsAnCamion(newcar))
		{
		    if(PlayerInfo[playerid][pJob] != 14)
		    {
		        SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas les clés de ce camion!");
		        RemovePlayerFromVehicle(playerid);
	            TogglePlayerControllable(playerid, 1);
		    }
		}
		if(IsAnTaxi(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 12)
			{
	    		if(TransportDuty[playerid] != 1)
	    		{
   					SendClientMessage(playerid, COLOR_WHITE, "Pour vous mettre en service faite /transportenservice [prix]");
	    		}
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"Vous n'avez pas les clés de ce véhicule!");
		        RemovePlayerFromVehicle(playerid);
	            TogglePlayerControllable(playerid, 1);
		    }
		}
		if(IsAnLoccationVehicule(newcar))
		{
			if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Vous pouvez louer cette voiture~n~Prix:~g~$%d~n~~w~Pour louer faites ~g~/louervoiture~w~~n~et pour partir ~r~/sortir",SBizzInfo[1][sbEntranceCost]);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		if(IsAnLoccationMoto(newcar))
		{
		    if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Vous pouvez louer ce velo~n~Prix:~g~$%d~n~~w~Pour louer faites ~g~/louermoto~w~~n~et pour partir ~r~/sortir",SBizzInfo[0][sbEntranceCost]);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		if(IsAHarvest(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 16)
			{
			    if(FarmerVar[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_RED, "___________Guide du fermier___________");
			    	SendClientMessage(playerid, COLOR_WHITE, "** Fermier ** /startrecolte, /stoprecolte or /sortir");
			    	SendClientMessage(playerid, COLOR_RED, "__________________________________");
			    	TogglePlayerControllable(playerid, 0);
				}
				else { }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas les clés de ce vehicules !");
			    RemovePlayerFromVehicle(playerid);
	            TogglePlayerControllable(playerid, 1);
			}
		}
		if(IsADrugHarvest(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "__________Agriculteur de drogue____________");
			    SendClientMessage(playerid, COLOR_WHITE, "** Agriculteur de drogue ** /startrecoltededrogue, /stoprecoltededrogue or /sortir");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "_________________________________________");
			    TogglePlayerControllable(playerid, 0);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas les clés de ce vehicules !");
			    RemovePlayerFromVehicle(playerid);
	            TogglePlayerControllable(playerid, 1);
			}
		}
		if(IsASmuggleCar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 20)
		    {
		        if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		        {
		            SendClientMessage(playerid, COLOR_YELLOW, "ASTUCE: Vous pouvez désormais utiliser la contrebande de drogue");
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Y !");
			    	RemovePlayerFromVehicle(playerid);
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas les clés de ce vehicule !");
	    		RemovePlayerFromVehicle(playerid);
	            TogglePlayerControllable(playerid, 1);
		    }
		}
		if(oldcar != 301)
		{
			if((housecar != oldcar && oldcar != 0) && (HireCar[playerid] != oldcar && newcar != housecar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 300;
					gCarLock[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		if(WantedPoints[playerid] > 0)
		{
		    new dstring[128];
			new wanted = WantedPoints[playerid];
			new diecash = 0;
		    while(WantedPoints[playerid] > 0)
		    {
		        diecash += 100;
		        WantedPoints[playerid] --;
		    }
		    format(dstring, sizeof(dstring), "Vous avez perdu $%d En mourant avec %d points de recherche.", diecash, wanted);
		    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    SafeGivePlayerMoney(playerid, - diecash);
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}
		if(PlayerOnMission[playerid] > 0)
		{
			GameTextForPlayer(playerid, "~r~Echec de la mission", 5000, 3);
			PlayerOnMission[playerid] = 0;
		    PlayerInfo[playerid][pMissionNr] = 0;
		}
		WantedPoints[playerid] = 0;
		WantedLevel[playerid] = 0;
		if(PlayerInfo[playerid][pDonateRank] > 0) { SetPlayerHealth(playerid, 100.0); }
		else { SetPlayerHealth(playerid, 50.0+PlayerInfo[playerid][pSHealth]); }
		MedicBill[playerid] = 1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

/*public PingKicker()
{
	for(new i=0;i < MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && GetPlayerPing(i) >= MAX_PINGO)
	    {
		    new nom[MAX_PLAYER_NAME],str[128];
		    GetPlayerName(i,nom,sizeof(nom));
		    if(!(strcmp("Mario_Paccino",nom) == 0 || strcmp("Toxss_Diazz",nom) == 0 || strcmp("Tony_Paccino",nom) == 0 || strcmp("Mario_Paccino",nom) == 0 || strcmp("Jehtro_Dinozzo",nom) == 0))
			{
			    format(str,sizeof(str),"[ANNONCE] %s à été kick pour son ping élévée Ping > %d",nom,MAX_PINGO);
			    SendClientMessageToAll(0xFFF000000,str);
			    print(str);
		        Kick(i);
			}

		}
        
	}
}*/
public HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

public CarCheck()
{
	new string[256];
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
	        /*SetVehicleParamsForPlayer(99, j, 0, 0);
	        SetVehicleParamsForPlayer(100, j, 0, 0);
	        SetVehicleParamsForPlayer(101, j, 0, 0);
	        SetVehicleParamsForPlayer(102, j, 0, 0);
	        SetVehicleParamsForPlayer(103, j, 0, 0);
	        SetVehicleParamsForPlayer(104, j, 0, 0);
	        SetVehicleParamsForPlayer(105, j, 0, 0);
	        SetVehicleParamsForPlayer(106, j, 0, 0);
	        SetVehicleParamsForPlayer(107, j, 0, 0);
	        SetVehicleParamsForPlayer(108, j, 0, 0);
	        SetVehicleParamsForPlayer(109, j, 0, 0);*/
		    new Float:health;
		    GetPlayerHealth(j, health);
			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_WHITE, "* Perdu de la santée dû au sida.");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_WHITE, "* Perdu de la santée dû au sida.");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 20.0);
			    SendClientMessage(j, COLOR_WHITE, "* Perdu de la santée dû au sida.");
			}

			if(GetPlayerMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "Vous êtes en dette vous avez jusque au prochain Salaire pour obtenir %d sinon vous irez en prison.", GetPlayerMoney(j));
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	for(new c = 1; c < 254; c++)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if (PlayerInfo[i][pJob] == 5)
				{
					SetVehicleParamsForPlayer(c, i, 0, 0);
				}
			}
		}
		if (gLastDriver[c] == 301)
		{
//			CarRespawn(c);
		}
		if (gLastDriver[c] >= 300)
		{
			gLastDriver[c]++;
		}
		//foundowner = -1;
	}
	return 1;
}

public CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[301]=255;
	return 1;
}

/*public CarTow(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehiclePos(carid,HouseCarSpawns[carid-1][0], HouseCarSpawns[carid-1][1], HouseCarSpawns[carid-1][2]);
	SetVehicleZAngle(carid, HouseCarSpawns[carid-1][3]);
	return 1;
}

public CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}*/

public LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,1);
		}
	}
}

public UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!IsAPlane(carid))
			{
				SetVehicleParamsForPlayer(carid,i,0,0);
			}
		}
	}
}

public InitLockDoors(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new c;
		while (c < 254)
		{
			c++;
			if (gCarLock[c] == 1)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
    Script_OnPlayerExitVehicle(playerid);
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}

	if(IsAHarvest(vehicleid))
	{
	    if(FarmerVar[playerid] == 1)
	    {
			SetTimer("FarmerExit", 7000, 0);
			GameTextForPlayer(playerid, "~n~~w~Vous avez ~r~7~w~ secondes~n~pour revenir sur une récolte", 5000, 3);
	    }
	}
	if(IsADrugHarvest(vehicleid))
	{
	    if(DrugFarmerVar[playerid] == 1)
	    {
			SetTimer("DrugFarmerExit", 7000, 0);
			GameTextForPlayer(playerid, "~n~~w~Vous avez ~b~7~w~ secondws~n~pour revenir sur une récolte", 5000, 3);
	    }
	}
	if(IsASmuggleCar(vehicleid))
	{
	    if(SmugglerWork[playerid] == 1)
	    {
	        SetTimer("SmugglerExit", 7000, 0);
	        GameTextForPlayer(playerid, "~n~~w~Vous avez ~r~7~w~ secondes~n~pour retourner dans le vehicule", 5000, 3);
		}
	}
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		BusrouteEnd(playerid, vehicleid);
	}
	if (IsABus(vehicleid))
	{
		for (new i=0; i<=MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (BusrouteEast[i][0] != 0 && BusrouteEast[i][1] == vehicleid)
				{
					//BusrouteEast[i][2] --;
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~g~Le passager a quitté le bus", 5000, 3);
				}
				else if (BusrouteWest[i][0] != 0 && BusrouteWest[i][1] == vehicleid)
				{
					//BusrouteWest[i][2] --;
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~g~Le Passager a quitté le bus", 5000, 3);
				}
			}
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	new string[128];
	PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pModel] = Peds[classid][0];

	if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
		ClearChatbox(playerid, 10);
		format(string, sizeof(string), "Bienvenue sur GaminG Of Life, Version %s.%s.%s",MAJOR_VERSION,MINOR_VERSION,BUG_FIXE);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_YELLOW2, " ");
		if (gPlayerAccount[playerid] != 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW2, "Logguez vous ! [/login].");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "[/login ton mot de passe] Pour t'enregister et pouvoir jouer !!! ");
		}
		SetPlayerCameraPos(playerid, 1456.5142,-1402.3428,163.4032);
		SetPlayerCameraLookAt(playerid, 1481.2587,-1638.9351,14.3209);
		PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
		PlayerInfo[playerid][pModel] = Peds[classid][0];
		SetPlayerTeamFromClass(playerid,classid);
	}
	else SpawnPlayer(playerid);
	return false;

 
}

public SetupPlayerForClassSelection(playerid)
{
	
}

// -----------------------------------------------

public SetPlayerTeamFromClass(playerid,classid)
{

}



public SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Unknown");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Vous avez commis un crime: %s. Infraction : %s.",reason,turner);
		SendClientMessage(playerid, COLOR_DARKNICERED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(WantedLevel[playerid] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Niveau de recherche actuel: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2||PlayerInfo[i][pLeader] == 2)
					    {
							format(cbjstore, sizeof(turnmes), "LSPD: A toute les unitée: Infraction : %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "LSPD: Crime: %s, Suspect: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}
}
//---------------------------------------------------------

public SetPlayerCriminalEx(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Unknown");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Vous avez commis un crime: %s. Infraction : %s.",reason,turner);
		
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(WantedLevel[playerid] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Niveau de recherche: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2||PlayerInfo[i][pLeader] == 2)
					    {
							format(cbjstore, sizeof(turnmes), "LSPD : A toute les unitée: Infraction : %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "LSPD: Crime: %s, Suspect: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new crbjstore[128];
		if (declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		format(turnmes, sizeof(turnmes), "SMS: %s, Parce que %s, Vous ne serez plus un criminel, Sender: DIEU (555)",turned,reason);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
			    {
					format(crbjstore, sizeof(crbjstore), "LSPD : A toute les unitées %s à achever son séjour en prison",turner);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
					format(crbjstore, sizeof(crbjstore), "LSPD  : %s a bien été arretez, %s",turned,reason);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

public RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

public RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}


mktime(hour,minute,second,day,month,year) {
	new timestamp;
	timestamp = second;
	timestamp += minute * 60;
	timestamp += hour * 3600;

	new days_of_month[12];
	if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {
		days_of_month = {31,29,31,30,31,30,31,31,30,31,30,31};
	} else {
		days_of_month = {31,28,31,30,31,30,31,31,30,31,30,31};
	}
	new days_this_year = 0;
	days_this_year = day;
	if(month > 1) {
		for(new i=0; i<month-1;i++) {
			days_this_year += days_of_month[i];
		}
	}
	timestamp += days_this_year * 86400;

	for(new j=1970;j<year;j++) {
		timestamp += 31536000;
		if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) timestamp += 86400;
	}
	return timestamp;
}
public OtherTimer()
{
	new string[256];
	new Float:oldposx, Float:oldposy, Float:oldposz;
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if (GetPlayerState(i) == 1) CheckForWalkingTeleport(i); 
	        new vehicleid = GetPlayerVehicleID(i);
            if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "ASTUCE: Vous pouvez maintenant vous connecter en tapant /login <password>");
				}
			}
		    
		    if(PlayerInfo[i][pLocal] != 255 && PlayerInfo[i][pInt] != 0)
			{
				new house = PlayerInfo[i][pLocal];
				GetPlayerPos(i, oldposx, oldposy, oldposz);
				if(oldposz != 0.0)
				{
					if(oldposz < 600.0)
					{
						if(house == 242)
						{
						    SetPlayerInterior(i,0);
							SetPlayerPos(i,-2518.5967,-623.2701,132.7679);
							PlayerInfo[i][pInt] = 0;
							PlayerInfo[i][pLocal] = 255;
						}
						else if(house < 99 && house != 10000)
						{
							SetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}
					}
				}
			}
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				CellTime[i] = CellTime[i] +1;
				if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(string, sizeof(string), "*Le telephone de %s sonne .", called);
						RingTone[Mobile[i]] = 10;
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~Prix de l'appel~n~~r~$%d",CallCost[i]);
				SafeGivePlayerMoney(i, -CallCost[i]);
				SBizzInfo[2][sbTill] += CallCost[i];
				ExtortionSBiz(2, CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				CallCost[i] = 0;
			}
			if(TransportTime[i] > 0)
			{
			    if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
	      					TransportCost[i] += TransportValue[TransportDriver[i]];
						    TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
			    TransportTime[i] += 1;
			    format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			    GameTextForPlayer(i, string, 15000, 6);
			}
			if (BusrouteEast[i][0] != 0 || BusrouteWest[i][0] != 0)
			{
				if (!IsPlayerInAnyVehicle(i) || !IsABus(GetPlayerVehicleID(i)))
				if (vehicleid != 0)
				{
					if (!IsABus(vehicleid))
					{
						if (BusrouteEast[i][0] != 0) BusrouteEnd(i, BusrouteEast[i][1]);
						else if (BusrouteWest[i][0] != 0) BusrouteEnd(i, BusrouteWest[i][1]);
					}
				}
				else
				{
					if (BusrouteEast[i][0] != 0) BusrouteEnd(i, BusrouteEast[i][1]);
					else if (BusrouteWest[i][0] != 0) BusrouteEnd(i, BusrouteWest[i][1]);
				}
			}
			if (IsABus(vehicleid) && GetPlayerState(i) == 2 && PlayerInfo[i][pJob] != 13)
			{
				SetVehicleToRespawn(vehicleid);
			}
		}
	}
	return 1;
}

public SetPlayerUnjail()
{
	new string[256];
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			new newcar = GetPlayerVehicleID(i);
			new level = PlayerInfo[i][pLevel];
			if(level >= 0 && level <= 2) { PlayerInfo[i][pPayCheck] += 1; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 11; }
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0 && WantLawyer[i] == 0)
				{
					PlayerInfo[i][pJailTime]--;
				}
				if(PlayerInfo[i][pJailTime] <= 0 && WantLawyer[i] == 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
						SetPlayerInterior(i, 6);
						PlayerInfo[i][pInt] = 6;
						SetPlayerPos(i,246.8439,70.0776,1003.6406);
					}
					else if(PlayerInfo[i][pJailed] == 2)
					{
					    SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000); 
					    SetPlayerInterior(i, 0);
					    PlayerInfo[i][pInt] = 0;
					    SetPlayerPos(i, 90.2101,1920.4854,17.9422);
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_GRAD1,"Gardien : Vous avez été liberer de prison .");
					format(string, sizeof(string), "~g~Liberté ~n~~w~Essayez d'être un meilleur citoyen ! ");
					GameTextForPlayer(i, string, 5000, 1);
					if(gTeam[i] == 4) { gTeam[i] = 3; }
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1) { }
				}
			}
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				}
			}
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
				    UsedFind[i] = 0;
				}
		    }
   			if(MedicTime[i] > 0)
			{
			    if(MedicTime[i] == 3)
			    {
			        SetPlayerInterior(i, 3);
			        PlayerInfo[i][pInt] = 3;
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(i, X,Y,Z);
			        SetPlayerCameraPos(i, X - 3, Y, Z);
			        SetPlayerCameraLookAt(i,X,Y,Z);
			    }
			    MedicTime[i] ++;
			    if(MedicTime[i] >= NeedMedicTime[i])
			    {
					new cut = deathcost;
					format(string, sizeof(string), "Docteur : Votre examen medical est positif $%d, Bonne journée.", cut);
					SendClientMessage(i, TEAM_CYAN_COLOR, string);
					TogglePlayerControllable(i, 1);
			        MedicBill[i] = 0;
			        MedicTime[i] = 0;
			        NeedMedicTime[i] = 0;
			        PlayerInfo[i][pDeaths] += 1;
			        PlayerFixRadio(i);
			        ClearAnimations(i);
			        SpawnPlayerEx(i);
			        InSpec[i] = 0;
			    }
			}
			if(WantLawyer[i] >= 1)
			{
			    CallLawyer[i] = 111;
			    if(WantLawyer[i] == 1)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Voulez-vous un avocat (oui ou non ?)");
				}
				WantLawyer[i] ++;
				if(WantLawyer[i] == 8)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Voulez-vous un avocat (oui ou non ?)");
				}
	            if(WantLawyer[i] == 15)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Voulez-vous un avocat (oui ou non ?)");
				}
				if(WantLawyer[i] == 20)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Il n'y a pas d'avocat à votre disposition plus, la prison a commencé.");
				    WantLawyer[i] = 0;
				    CallLawyer[i] = 0;
				}
			}
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
			    if(TutTime[i] == 3)
			    {
			        SendClientMessage(i, COLOR_WHITE, "Alors, vous êtes nouveau ici? Nous allons vous montrer certains endroits et  vous donnez quelques conseils.");
			        SendClientMessage(i, COLOR_WHITE, "Si vous ne savez pas comment jouer RP, alors lisez les regles(gamingofliferoleplay.forum2jeux.com).");
			    }
                else if(TutTime[i] == 6)
			    {
			        ClearChatbox(i, 10);
			        SendClientMessage(i, COLOR_WHITE, " ");
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 99);
			        SetPlayerPos(i, 1518.7207,-1688.6521,13.5469);
			        SetPlayerCameraPos(i, 1518.7207,-1688.6521,13.5469);
					SetPlayerCameraLookAt(i, 1518.7207,-1688.6521,13.5469);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, ":: LSPD Los Santos Police Departement ::");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Los Santos Police Departement 'LSPD' est la Police Général de Los Santos.");
					SendClientMessage(i, COLOR_YELLOW2, "Elle est la pour assurer la sécuritée des habitants. Elle arrete les criminels avec force si il le faut.");
					SendClientMessage(i, COLOR_YELLOW2, "Pour appeler un agent de police, faite '/appeler 911'.");

			    }
			    else if(TutTime[i] == 19)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1022.0882,-1704.8432,31.2639);
			        SetPlayerCameraPos(i, 1022.0882,-1704.8432,31.2639);
					SetPlayerCameraLookAt(i, 1022.0882,-1704.8432,31.2639);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, ":: ECOLE DE CONDUITE ::");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Vous n'avez pas encore de permis de conduire?");
					SendClientMessage(i, COLOR_YELLOW2, "Vous devez passer un examen de conduite pour obtenir un permis");
					SendClientMessage(i, COLOR_YELLOW2, "Vous pouvez voir la liste des instructeurs en tappant /instructeurs.");
			    }
			    else if(TutTime[i] == 35)
			    {
			        ClearChatbox(i, 10);
					SetPlayerInterior(i, 0);
			        SetPlayerCameraPos(i, 2247.0215,-1655.0173,17.2856);
					SetPlayerCameraLookAt(i, 2244.6536,-1663.9304,15.4766);
					SetPlayerPos(i, 2256.3555,-1646.6377,15.4959);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
                    SendClientMessage(i, COLOR_YELLOW, ":: MAGASIN DE VETEMENTS ::");
                    SendClientMessage(i, COLOR_WHITE, "");
                    SendClientMessage(i, COLOR_YELLOW2, "Tout d'abord, vous aurez besoin de quelques vêtements, vous pouvez les acheter à n'importe quel magasin de vêtements.");
                    SendClientMessage(i, COLOR_YELLOW2, "Quand vous êtes dans le magasin tappez /vetements pour choisir votre skin.");
			    }
			    else if(TutTime[i] == 57)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1232.9413,-1339.0624,14.1258);
			        SetPlayerCameraPos(i, 1232.9413,-1339.0624,14.1258);
					SetPlayerCameraLookAt(i, 1184.5944,-1325.8170,13.5746);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, ":: HOPITAL De Los Santos ::");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Vous vous sentez malade? Vous avez besoin de consulter le médecin de Los Santos");
					SendClientMessage(i, COLOR_YELLOW2, "Pour appeler un médecin, utilisez le numéro d'urgence /appeler 911");
					SendClientMessage(i, COLOR_YELLOW2, "Vous spawnez ici après la mort");
			    }
			    else if(TutTime[i] == 79)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1423.8308,-1034.8577,26.8959);
			        SetPlayerCameraPos(i, 1423.8308,-1034.8577,26.8959);
					SetPlayerCameraLookAt(i, 1423.8308,-1034.8577,26.8959);
					SetPlayerInterior(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW, ":: Los Santos Banque General:");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "Vous ne pourrez pas garder votre argent en cash, on risquerait de vous le voller.");
					SendClientMessage(i, COLOR_YELLOW2, "Vous pouvez déposer ou retirer votre argent à la banque.");
					SendClientMessage(i, COLOR_YELLOW2, "Votre paye est déposée sur votre compte banquaire.");
			    }
			    else if(TutTime[i] == 113)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerInterior(i, 3);
			        SetPlayerPos(i, 330.6825,163.6688,1014.1875);
			        SetCameraBehindPlayer(i);
			        SetPlayerVirtualWorld(i, 0);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_YELLOW, ":: GaminG Of Life [ gamingofliferoleplay.forum2jeux.com ] ::");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_YELLOW2, "Nous arrivons a la Fin Du Tutorial.");
			    }
			    else if(TutTime[i] == 122)
			    {
			        ClearChatbox(i, 10);
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
					SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "Bienvenue à Los Santos.");
			        SendClientMessage(i, COLOR_GRAD1, "Aide: Pour appeler un taxi ou un bus faites /appeler 444 ou /appeler 222.");
			        SendClientMessage(i, COLOR_GRAD1, "Aide: Pour changer vos vétements vous devez allez au magasin de vêtements.");
			        SendClientMessage(i, COLOR_GRAD1, "Aide: Vous pouvez demander de l'aide en /rapport ou /nouveau.");
					SendClientMessage(i, COLOR_GRAD1, "Nous vous souhaitons un bon jeu sur GaminG Of Life.");
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gOoc[i] = 0; gNews[i] = 0; gFam[i] = 0;
					TogglePlayerControllable(i, 1);
					MedicBill[i] = 0;
					AfterTutorial[i] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", i);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", i);
					SetPlayerSpawn(i);
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
					}
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
		        PlayerStoned[i] += 0;
			    if(PlayerStoned[i] == 0)
			    {
			        PlayerStoned[i] = 2;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 0);
						}
					}
					else
					{
					    SetPlayerFacingAngle(i, angle + 0);
					}
			    }
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Debut du Match", 5000, 1);
					TogglePlayerControllable(i, 1);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
					        	PlayerInfo[Boxer1][pInt] = 5; PlayerInfo[Boxer2][pInt] = 5;
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(PlayerInfo[Boxer1][pJob] == 11) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 11) { PlayerInfo[Boxer2][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(PlayerInfo[Boxer2][pJob] == 11)
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "News de boxe : %s a gagné la lutte contre le Champion %s et est maintenant le nouveau champion de boxe.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_WHITE, "* Vous seriez devenu champion si vous seriez boxeur !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Le Champion %s a gagné son combat de boxe contre %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* Vous avez perdu le match contre %s.", winner);
								SendClientMessage(Boxer1, COLOR_WHITE, string);
								GameTextForPlayer(Boxer1, "~r~Vous Perdez", 3500, 1);
								format(string, sizeof(string), "* Vous avez gagner le match contre %s.", loser);
								SendClientMessage(Boxer2, COLOR_WHITE, string);
								GameTextForPlayer(Boxer2, "~r~Vous Gagnez", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* Vous vous sentez épuisé par le combat , aller manger quelque part.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* Vous vous sentez parfaitement bien , même après le combat.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* Vous vous sentez épuisé par le combat , aller manger quelque part.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* Vous vous sentez parfaitement, même après la lutte .");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Fin du match", 5000, 1);
								if(PlayerInfo[Boxer2][pJob] == 11) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
					        	PlayerInfo[Boxer1][pInt] = 5; PlayerInfo[Boxer2][pInt] = 5;
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(PlayerInfo[Boxer2][pJob] == 11) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 11) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(PlayerInfo[Boxer1][pJob] == 11)
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "News de boxe: %s a gagné la lutte contre le Champion %s et est maintenant le nouveau champion de boxe.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_WHITE, "* Vous êtes le champion, si vous avez eu le job de Boxer !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "News de boxe : Boxing Champion %s a gagné la lutte contre %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* Vous avez perdu la lutte contre %s.", winner);
								SendClientMessage(Boxer2, COLOR_WHITE, string);
								GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* Vous avez gagné la lutte contre %s.", loser);
								SendClientMessage(Boxer1, COLOR_WHITE, string);
								GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* Vous vous sentez épuisé par le combat, aller manger quelque part.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* Vous vous sentez parfaitement, même après le combat.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* Vous vous sentez épuisé par le combat , aller manger quelque part.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* Vous vous sentez parfaitement, même après le combat.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Fin du match", 5000, 1);
								if(PlayerInfo[Boxer1][pJob] == 11) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
			    AnnouncedPaintballRound = 1;
			    if(PlayerPaintballing[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Le match de Paintball sera annoncé dans 15 secondes (Pour obtenir plus de parcticipants).");
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "La course de Karting sera annoncé dans les 15 secondes (Pour obtenir plus de participants).");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicCallTime[i] == 90) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Marqueur Rouge parti", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 90 - MedicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 200) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Marqueur Rouge parti", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 200 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(PizzaCallTime[i] > 0)
   			{
       			if(PizzaCallTime[i] == 90) { PizzaCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Marqueur Rouge parti", 2500, 1); }
       			else
    			{
        			format(string, sizeof(string), "%d", 90 - PizzaCallTime[i]);
     				GameTextForPlayer(i, string, 1500, 6);
     				PizzaCallTime[i] += 1;
    			}
   			}
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        if(PlayerCuffed[i] == 0)
			        {
			            TogglePlayerControllable(i, 1);
           		        PlayerCuffed[i] = 0;
			        }

			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        GameTextForPlayer(i, "~r~Vous avez brisé les menottes, vous êtes libre!", 2500, 3);
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(IsDrinking[i] > 0)
			{
			    if(IsDrinking[i] == 1)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
				    if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s finit sa biere.", sendername); }
					else { format(string, sizeof(string), "* %s finit sa biere.", sendername); }
				    ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    new Float:PlayerHealth;
				    GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
				    if(UsingSmokeAnim[i] == 1)
				    {
				        UsingSmokeAnim[i] = 0;
				        ClearAnimations(i);
				    }
			    }
			    if(IsDrinking[i] == 51)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s boit une gorgée de biere.", sendername); }
					else { format(string, sizeof(string), "* %s boit une gorgée de biere.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsDrinking[i] == 31)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s boit une gorgée de biere.", sendername); }
					else { format(string, sizeof(string), "* %s boit une gorgée de biere.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsDrinking[i] == 11)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s boit une gorgée de biere.", sendername); }
					else { format(string, sizeof(string), "* %s boit une gorgée de biere.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    IsDrinking[i] -= 1;
			}
			if(IsSmoking[i] > 0)
			{
			    if(IsSmoking[i] == 1)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
				    if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s finit sa cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s finit sa cigarette.", sendername); }
				    ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    new Float:PlayerHealth;
				    GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
				    if(UsingSmokeAnim[i] == 1)
				    {
				        UsingSmokeAnim[i] = 0;
				        ClearAnimations(i);
				    }
			    }
			    if(IsSmoking[i] == 51)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s fume sa cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s fume sa cigarette.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsSmoking[i] == 31)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s fume sa cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s fume sa cigarette.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsSmoking[i] == 11)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s fume sa cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s fume sa cigarette.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    IsSmoking[i] -= 1;
			}
			else if(PlayerToPoint(20, i,2233.9099,1710.7300,1011.2987))
			{//Caligula
			    GameTextForPlayer(i, "~r~fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(10, i,2265.7900,1619.5800,1090.4453))
			{//Caligula Roof 1
			    GameTextForPlayer(i, "~r~fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(10, i,2265.7800,1675.9301,1090.4453))
			{//Caligula Roof 2
			    GameTextForPlayer(i, "~r~fermer", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
		}
	}
}

public StoppedVehicle()
{
	new Float:x,Float:y,Float:z;
	new Float:distance,value;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i))
			{
				GetPlayerPos(i, x, y, z);
				distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][LastX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][LastY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][LastZ])),2));
				value = floatround(distance * 3600);
				if(UpdateSeconds > 1)
				{
					value = floatround(value / UpdateSeconds);
				}
				if(SpeedMode)
				{
	            }
				SavePlayerPos[i][LastX] = x;
				SavePlayerPos[i][LastY] = y;
				SavePlayerPos[i][LastZ] = z;
			}
		}
	}
	return 1;
}

public SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SafeResetPlayerWeapons(playerid);
	    if(PlayerInfo[playerid][pJailed] < 1)
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				SafeGivePlayerWeapon(playerid, 41, 500); //spray
				if(OnDuty[playerid] == 1 || PlayerInfo[playerid][pMember] == 2)//Cops & FBI/ATF
				{
				    SafeGivePlayerWeapon(playerid, 41, 500); //spray
					SafeGivePlayerWeapon(playerid, 24, 200);
					SafeGivePlayerWeapon(playerid, 3, 1);
					if(PlayerInfo[playerid][pChar] == 285)//SWAT
					{
					    SafeGivePlayerWeapon(playerid, 24, 200);
					    SafeGivePlayerWeapon(playerid, 29, 450);
						SafeGivePlayerWeapon(playerid, 31, 600);
					}
					else if(PlayerInfo[playerid][pChar] == 287)//Army
					{
					    SafeGivePlayerWeapon(playerid, 24, 200);
					    SafeGivePlayerWeapon(playerid, 29, 450);
					    SafeGivePlayerWeapon(playerid, 31, 500);
					}
				}
				if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//National Guard
				{
				    SafeGivePlayerWeapon(playerid, 24, 200);
				    SafeGivePlayerWeapon(playerid, 31, 600);
				    SafeGivePlayerWeapon(playerid, 29, 600);
				}
			}
			if(gTeam[playerid] >= 3)
			{
				SafeGivePlayerWeapon(playerid, 0, 0);
			}
			if(PlayerInfo[playerid][pDonateRank] > 0)
			{
				if (PlayerInfo[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
				if (PlayerInfo[playerid][pGun3] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
					PlayerInfo[playerid][pGun3] = 0; PlayerInfo[playerid][pAmmo3] = 0;
				}
				if (PlayerInfo[playerid][pGun4] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
					PlayerInfo[playerid][pGun4] = 0; PlayerInfo[playerid][pAmmo4] = 0;
				}
			}
			else
			{
			    if (PlayerInfo[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
			}
		}
	}
}

public PrintSBizInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",SBizzInfo[targetid][sbMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Fermé: %d Entrée: $%d Caisse: $%d", SBizzInfo[targetid][sbLocked], SBizzInfo[targetid][sbEntranceCost], SBizzInfo[targetid][sbTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Produits: %d/%d Extorqué Par: %s", SBizzInfo[targetid][sbProducts],SBizzInfo[targetid][sbMaxProducts],SBizzInfo[targetid][sbExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
	}
}

public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Fermé: %d Entrée: $%d Caisse: $%d", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Produits: %d/%d Extorqué Par: %s", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts],BizzInfo[targetid][bExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________");
	}
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash = GetPlayerMoney(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "M"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "F"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Europe"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Asie"; }
		else if(PlayerInfo[targetid][pOrigin] == 4) { otext = "Afrique"; }
		new ttext[20];
		if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Medecin"; }
		else if(gTeam[targetid] == 3 || gTeam[targetid] == 4) { ttext = "Civil"; }
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) { ttext = "LSPD"; }
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2) { ttext = "FBI"; }
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3) { ttext = "FAAC"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Aucun"; }
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5) { ttext = "MS-13"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6) { ttext = "Cosa Nostra"; }
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7) { ttext = "Gouvernement"; }
		/*else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8) { ttext = "Organizatsiya"; }*/
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9) { ttext = "San News"; }
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10) { ttext = "Racer'z"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11) { ttext = "Instructeur"; }
		else if(PlayerInfo[targetid][pMember] == 12 || PlayerInfo[targetid][pLeader] == 12) { ttext = "Famille Russe"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14) { ttext = "Ruff Ryders"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15) { ttext = "Grove Families"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16) { ttext = "Blood'z"; }
		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "None"; }
	    new ftext[30];
	    if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) // nom des factions
		{ ftext = "LSPD"; }
        if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2)
		{ ftext = "FBI"; }
        else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4)
		{ ftext = "Aucun"; }
  		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)
		{ ftext = "MS-13"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)
		{ ftext = "Cosa Nostra"; }
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10)
		{ ftext = "Racer'z"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11)
		{ ftext = "Instructeur"; }
		else if(PlayerInfo[targetid][pMember] == 12 || PlayerInfo[targetid][pLeader] == 12)
		{ ftext = "Russe"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14)
		{ ftext = "Ruff Ryders"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15)
		{ ftext = "Crip's"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16)
		{ ftext = "Blood'z"; }
		else
		{ ftext = "None"; }
		new f2text[20];
	    if(PlayerInfo[targetid][pFMember] < 255) { f2text = FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]; }
		else { f2text = "None"; }
	    new rtext[64];
	    /*if(gTeam[targetid] == 5 || PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Outsider"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Associate"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldier"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capo"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Underboss"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "parrain"; }
			else { rtext = "Outsider"; }
		}*/
		if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1)//PD Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Cadet"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Officier"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Sergent"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Lieutenant"; }
	        else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Capitaine"; }
	        else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Assistant Sheriff"; }
	        else if(PlayerInfo[targetid][pRank] == 7) { rtext = "Sheriff de la LSPD"; }
			else { rtext = "Cadet"; }
		}
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2)//FBI Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Stagiaire au FBI"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Agent du FBI"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Agent expérimenté"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Agent Spécial"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Co-Directeur"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Directeur de la FBI"; }
			else { rtext = "Stagiaire au FBI"; }
		}
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3)//NG Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Soldat Stagiaire"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Soldat"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Caporal"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Major"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Lieutenant-Colonel"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Colonel"; }
			else { rtext = "Soldat Stagiaire"; }
        }
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)//Vagos Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Nuevo"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Dealer"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Delincuente"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Traficante"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Consejero"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Dirigente MS-13"; }
			else { rtext = "Nuevo"; }
		}
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)//Familglia Italia
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Reclutare"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Soldato"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Sicario"; }
  			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Associato"; }
  			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Vice Capo"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Capo"; }
			else { rtext = "Reclutare"; }
		}
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7)//gouvernement
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "GDC/chauffeur"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "chef des GDC"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Secrétaire d'état"; }
  			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Ministre"; }
  			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Vice présiden"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Président"; }
			else { rtext = "GDC/chauffeur"; }
		}
		/*else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8)//Organizatsiya
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Brute"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Tueur"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Assassin"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Rouge"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Dirigeant"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Parrain"; }
			else { rtext = "Exilé"; }
		}*/
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9)//Yamaguchi ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Homme de main"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Bras Gauche"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Bras Droit"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Porte Parole"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Sous Chef"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Chef"; }
			else { rtext = "Homme de main"; }
		}
		else if(IsAnInstructor(targetid))//Driving/Flying School Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Stagiaire"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Instructeur"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Instructeur Confirmé"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Gestionnaire"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Sous Patron"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss"; }
			else { rtext = "Stagiaire"; }
		}
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10)// Racer'z
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Relation"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Zonard"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Ami"; }
  			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Pote"; }
  			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Frere"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Leader de bande"; }
			else { rtext = "Relation"; }
		}
		else if(PlayerInfo[targetid][pMember] == 12 || PlayerInfo[targetid][pLeader] == 12)//Familglia Italia
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Apprenti"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Dealer"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Dealer en chef"; }
  			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Gérant de la mafia"; }
  			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Bras-droit"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss"; }
			else { rtext = "Apprenti"; }
		}
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14)//Ruff Ryders
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "New Ryder'Z"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Ryder'Z"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Rider'Z confirmé"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Expert Ryder'Z"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Boss Ryder'Z"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "King Ryder'z"; }
			else { rtext = "New Ryder'Z"; }
		}

		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15)//47th Street Saints Families gang Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Delinquant"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Voyou"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Gros-bras"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Grossiste"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Caid"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss"; }
			else { rtext = "Delinquant"; }
		}
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16)//East Beach Ballas Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Petit gangsta"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Gangsta"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Voyou"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Malfrat"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Delinquant"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Leader Blood'z"; }
			else { rtext = "Petit Gangsta"; }
		}
		else
		{
		    rtext = "None";
		}
        new jtext[20];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detective"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Avocat"; }
        else if(PlayerInfo[targetid][pJob] == 3) { jtext = "Prostituer"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Dealer de drogue"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Voleur de caisse"; }
        else if(PlayerInfo[targetid][pJob] == 6) { jtext = "Journaliste"; }
        else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Mecanicien"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Garde du corps"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Dealer d'armes"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Ambulancier"; }
        else if(PlayerInfo[targetid][pJob] == 11) { jtext = "boxeur"; }
		else if(PlayerInfo[targetid][pJob] == 12) { jtext = "Taximan"; }
		else if(PlayerInfo[targetid][pJob] == 13) { jtext = "Conducteur de bus"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Camionneur"; }
        else if(PlayerInfo[targetid][pJob] == 15) { jtext = "Livreur de pizza"; }
        else if(PlayerInfo[targetid][pJob] == 16) { jtext = "Fermier"; }
        else if(PlayerInfo[targetid][pJob] == 17) { jtext = "Nettoyeur de rue"; }
        else if(PlayerInfo[targetid][pJob] == 18) { jtext = "Fermier"; }
        else { jtext = "None"; }
        new Radios[20];
        if(PlayerInfo[playerid][Radio] != 0) { Radios = "Oui"; }
        else { Radios = "Non"; }
		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Bronze donater"; }
		else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "Golden donater"; }
		else { drank = "None"; }
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		new arrests = PlayerInfo[targetid][pArrested];
		new drugs = PlayerInfo[targetid][pDrugs];
		new mats = PlayerInfo[targetid][pMats];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		new housekey = PlayerInfo[targetid][pPhousekey];
		new bizkey = PlayerInfo[targetid][pPbiskey];
		new intir = PlayerInfo[targetid][pInt];
		new virworld = PlayerInfo[targetid][pVirWorld];
		new local = PlayerInfo[targetid][pLocal];
		new Float:health;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new coordsstring[256];
		SendClientMessage(playerid, TEAM_GREEN_COLOR,"_______________________________Vos Stats De La Vie Virtuelle_______________________________ ");
		format(coordsstring, sizeof(coordsstring),"___________________________________%s___________________________________ ",name);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Niveau:[%d] Sex:[%s] Age:[%d] Argent:[$%d] Banque :[$%d] Ph:[%d] Rang:[%s]", level,atext,age,cash,account,pnumber,drank);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Temp de jeu:[%d] Poissons:[%d] Nbr de fois arreter:[%d] Job:[%s] Respect:[%d/%d]", ptime,bigfish,arrests,jtext,exp,expamount);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Drogue:[%d] Materiaux:[%d] Team:[%s] Organisation:[%s] Rang:[%s]",drugs,mats,ttext,ftext,rtext);
		SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Radio:[%s] Frequence:[%d]",Radios, PlayerInfo[playerid][Frequence]);
		SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
		if (PlayerInfo[playerid][pAdmin] >= 1000)
		{
			format(coordsstring, sizeof(coordsstring), "Maison [%d] Entreprise [%d] clef [%d] int:[%d] virworld:[%d] local[%d]", housekey,bizkey,HireCar[targetid],intir,virworld,local);
			SendClientMessage(playerid, COLOR_GRAD6,coordsstring);
		}
		SendClientMessage(playerid, TEAM_GREEN_COLOR,"__________________________________________________________________________________________ ");
	}
}
//---------------------------------------------------------

public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerColor(playerid,TEAM_HIT_COLOR);

	}
}

//---------------------------------------------------------
public GameModeExitFunc()
{
	KillTimer(synctimer);
	KillTimer(hackchecktimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(cartimer);
	KillTimer(accountstimer);
	KillTimer(idletimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(burgertimer);
	KillTimer(chickentimer);
	KillTimer(tracetimer);
	KillTimer(braquagetimer);
	KillTimer(lathune);
	DestroyMenu(Guide);
	DestroyMenu(JobLocations);
	DestroyMenu(JobLocations2);
	GameModeExit();
}

//------------------------------------------------------------------------------------------------------
public SaveMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
	    new coordsstring[256];
	    new missionname[64];
		new var[128];
		new makername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, makername, sizeof(makername));
		new rand = random(999);
		if(rand == 0) { rand = 1; }
		new number = rand;
		if(MissionInfo[mToggle] == 0 || MissionInfo[mToggle] == 1) { }
		else { MissionInfo[mToggle] = 1; }
		format(missionname, sizeof(missionname), "%s.mis",name);
		new File: hFile = fopen(missionname, io_write);
		format(var, 128, "Title=%s\n", MissionInfo[mTitle]);fwrite(hFile, var);
		format(var, 128, "Maker=%s\n", makername);fwrite(hFile, var);
		format(var, 128, "Text1=%s\n", MissionInfo[mText1]);fwrite(hFile, var);
		format(var, 128, "Text2=%s\n", MissionInfo[mText2]);fwrite(hFile, var);
		format(var, 128, "Text3=%s\n", MissionInfo[mText3]);fwrite(hFile, var);
		format(var, 128, "Text4=%s\n", MissionInfo[mText4]);fwrite(hFile, var);
		format(var, 128, "Text5=%s\n", MissionInfo[mText5]);fwrite(hFile, var);
		format(var, 128, "Text6=%s\n", MissionInfo[mText6]);fwrite(hFile, var);
		format(var, 128, "Text7=%s\n", MissionInfo[mText7]);fwrite(hFile, var);
		format(var, 128, "Text8=%s\n", MissionInfo[mText8]);fwrite(hFile, var);
		format(var, 128, "Text9=%s\n", MissionInfo[mText9]);fwrite(hFile, var);
		format(var, 128, "Text10=%s\n", MissionInfo[mText10]);fwrite(hFile, var);
		format(var, 128, "Text11=%s\n", MissionInfo[mText11]);fwrite(hFile, var);
		format(var, 128, "Text12=%s\n", MissionInfo[mText12]);fwrite(hFile, var);
		format(var, 128, "Text13=%s\n", MissionInfo[mText13]);fwrite(hFile, var);
		format(var, 128, "Text14=%s\n", MissionInfo[mText14]);fwrite(hFile, var);
		format(var, 128, "Text15=%s\n", MissionInfo[mText15]);fwrite(hFile, var);
		format(var, 128, "Text16=%s\n", MissionInfo[mText16]);fwrite(hFile, var);
		format(var, 128, "Text17=%s\n", MissionInfo[mText17]);fwrite(hFile, var);
		format(var, 128, "Text18=%s\n", MissionInfo[mText18]);fwrite(hFile, var);
		format(var, 128, "GText1=%s\n", MissionInfo[mGText1]);fwrite(hFile, var);
		format(var, 128, "GText2=%s\n", MissionInfo[mGText2]);fwrite(hFile, var);
		format(var, 128, "GText3=%s\n", MissionInfo[mGText3]);fwrite(hFile, var);
		format(var, 128, "GText4=%s\n", MissionInfo[mGText4]);fwrite(hFile, var);
		format(var, 128, "GText5=%s\n", MissionInfo[mGText5]);fwrite(hFile, var);
		format(var, 128, "GText6=%s\n", MissionInfo[mGText6]);fwrite(hFile, var);
		format(var, 128, "CP1X=%f\n", MissionInfo[mCP1][0]);fwrite(hFile, var);
		format(var, 128, "CP1Y=%f\n", MissionInfo[mCP1][1]);fwrite(hFile, var);
		format(var, 128, "CP1Z=%f\n", MissionInfo[mCP1][2]);fwrite(hFile, var);
		format(var, 128, "CP2X=%f\n", MissionInfo[mCP2][0]);fwrite(hFile, var);
		format(var, 128, "CP2Y=%f\n", MissionInfo[mCP2][1]);fwrite(hFile, var);
		format(var, 128, "CP2Z=%f\n", MissionInfo[mCP2][2]);fwrite(hFile, var);
		format(var, 128, "CP3X=%f\n", MissionInfo[mCP3][0]);fwrite(hFile, var);
		format(var, 128, "CP3Y=%f\n", MissionInfo[mCP3][1]);fwrite(hFile, var);
		format(var, 128, "CP3Z=%f\n", MissionInfo[mCP3][2]);fwrite(hFile, var);
		format(var, 128, "CP4X=%f\n", MissionInfo[mCP4][0]);fwrite(hFile, var);
		format(var, 128, "CP4Y=%f\n", MissionInfo[mCP4][1]);fwrite(hFile, var);
		format(var, 128, "CP4Z=%f\n", MissionInfo[mCP4][2]);fwrite(hFile, var);
		format(var, 128, "CP5X=%f\n", MissionInfo[mCP5][0]);fwrite(hFile, var);
		format(var, 128, "CP5Y=%f\n", MissionInfo[mCP5][1]);fwrite(hFile, var);
		format(var, 128, "CP5Z=%f\n", MissionInfo[mCP5][2]);fwrite(hFile, var);
		format(var, 128, "CP6X=%f\n", MissionInfo[mCP6][0]);fwrite(hFile, var);
		format(var, 128, "CP6Y=%f\n", MissionInfo[mCP6][1]);fwrite(hFile, var);
		format(var, 128, "CP6Z=%f\n", MissionInfo[mCP6][2]);fwrite(hFile, var);
		format(var, 128, "Number=%d\n", number);fwrite(hFile, var);
		format(var, 128, "Reward=%d\n", MissionInfo[mReward]);fwrite(hFile, var);
		format(var, 128, "Toggle=%d\n", MissionInfo[mToggle]);fwrite(hFile, var);
		fclose(hFile);
		format(coordsstring, sizeof(coordsstring), "%s Mission Saved.",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
	return 1;
}


public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}

public SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadStuff()
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		Security = strval(arrCoords[3]);
		fclose(file);
		if(Security == 0 || Security == 1)
		{
		}
		else
		{
		    GameModeExit();
		}
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

public SaveStuff()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d", Jackpot,Tax,TaxValue,Security);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}
public LoadStat()
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new File: file = fopen("stat.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		ArgentGouv = strval(arrCoords[0]);
		Connextion = strval(arrCoords[1]);
		Deconnextion = strval(arrCoords[2]);
 		Maxconnextion = strval(arrCoords[3]);
		fclose(file);
		if(Security == 0 || Security == 1)
		{
		}
		else
		{
		    GameModeExit();
		}
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}
public SaveStat()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d", ArgentGouv,Connextion,Deconnextion,Maxconnextion);
	new File: file2 = fopen("stat.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}



public LoadCK()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("ck.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(CKInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(CKInfo[idx][cSendername], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(CKInfo[idx][cGiveplayer], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			CKInfo[idx][cUsed] = strval(arrCoords[2]);
			printf("CK:%d Taken: %d Sendername:%s Giveplayer: %s",
			idx,CKInfo[idx][cUsed],CKInfo[idx][cSendername],CKInfo[idx][cGiveplayer]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveCK()
{
	new idx;
	new File: file2;
	while (idx < sizeof(CKInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%d\n",
		CKInfo[idx][cSendername],
		CKInfo[idx][cGiveplayer],
		CKInfo[idx][cUsed]);
		if(idx == 0)
		{
			file2 = fopen("ck.cfg", io_write);
		}
		else
		{
			file2 = fopen("ck.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadFamilies()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("families.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(FamilyInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			FamilyInfo[idx][FamilyTaken] = strval(arrCoords[0]);
			strmid(FamilyInfo[idx][FamilyName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(FamilyInfo[idx][FamilyMOTD], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(FamilyInfo[idx][FamilyColor], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(FamilyInfo[idx][FamilyLeader], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			FamilyInfo[idx][FamilyMembers] = strval(arrCoords[5]);
			FamilyInfo[idx][FamilySpawn][0] = floatstr(arrCoords[6]);
			FamilyInfo[idx][FamilySpawn][1] = floatstr(arrCoords[7]);
			FamilyInfo[idx][FamilySpawn][2] = floatstr(arrCoords[8]);
			FamilyInfo[idx][FamilySpawn][3] = floatstr(arrCoords[9]);
			FamilyInfo[idx][FamilyInterior] = strval(arrCoords[10]);
			printf("Family:%d Taken: %d Name:%s MOTD:%s Leader:%s Members:%d SpawnX:%f SpawnY:%f SpawnZ:%f Int:%d",
			idx,FamilyInfo[idx][FamilyTaken],FamilyInfo[idx][FamilyName],FamilyInfo[idx][FamilyMOTD],FamilyInfo[idx][FamilyLeader],FamilyInfo[idx][FamilyMembers],FamilyInfo[idx][FamilySpawn][0],FamilyInfo[idx][FamilySpawn][1],FamilyInfo[idx][FamilySpawn][2],FamilyInfo[idx][FamilyInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%d|%f|%f|%f|%f|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilySpawn][0],
		FamilyInfo[idx][FamilySpawn][1],
		FamilyInfo[idx][FamilySpawn][2],
		FamilyInfo[idx][FamilySpawn][3],
		FamilyInfo[idx][FamilyInterior]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadPapers()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("papers.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(PaperInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			PaperInfo[idx][PaperUsed] = strval(arrCoords[0]);
			strmid(PaperInfo[idx][PaperMaker], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(PaperInfo[idx][PaperTitle], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(PaperInfo[idx][PaperText1], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(PaperInfo[idx][PaperText2], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			strmid(PaperInfo[idx][PaperText3], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(PaperInfo[idx][PaperText4], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(PaperInfo[idx][PaperText5], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(PaperInfo[idx][PaperText6], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(PaperInfo[idx][PaperText7], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			PaperInfo[idx][SafeSaving] = strval(arrCoords[10]);
			printf("Paper:%d Used: %d Maker:%s Title: %s Text1: %s Text2: %s Text3: %s Text4: %s Text5: %s Text6: %s Text7: %s",
			idx,PaperInfo[idx][PaperUsed],PaperInfo[idx][PaperMaker],PaperInfo[idx][PaperTitle],PaperInfo[idx][PaperText1],PaperInfo[idx][PaperText2],PaperInfo[idx][PaperText3],PaperInfo[idx][PaperText4],PaperInfo[idx][PaperText5],PaperInfo[idx][PaperText6],PaperInfo[idx][PaperText7]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SavePapers()
{
	new idx;
	new File: file2;
	while (idx < sizeof(PaperInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%d\n",
		PaperInfo[idx][PaperUsed],
		PaperInfo[idx][PaperMaker],
		PaperInfo[idx][PaperTitle],
		PaperInfo[idx][PaperText1],
		PaperInfo[idx][PaperText2],
		PaperInfo[idx][PaperText3],
		PaperInfo[idx][PaperText4],
		PaperInfo[idx][PaperText5],
		PaperInfo[idx][PaperText6],
		PaperInfo[idx][PaperText7],
		PaperInfo[idx][SafeSaving]);
		if(idx == 0)
		{
			file2 = fopen("papers.cfg", io_write);
		}
		else
		{
			file2 = fopen("papers.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}



public LoadProperty()
{
	new arrCoords[30][64];
	new strFromFile2[256];
	new File: file = fopen("property.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			HouseInfo[idx][hHealthx] = strval(arrCoords[6]);
			HouseInfo[idx][hHealthy] = strval(arrCoords[7]);
			HouseInfo[idx][hHealthz] = strval(arrCoords[8]);
			HouseInfo[idx][hArmourx] = strval(arrCoords[9]);
			HouseInfo[idx][hArmoury] = strval(arrCoords[10]);
			HouseInfo[idx][hArmourz] = strval(arrCoords[11]);
			strmid(HouseInfo[idx][hOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[14]);
			HouseInfo[idx][hHel] = strval(arrCoords[15]);
			HouseInfo[idx][hArm] = strval(arrCoords[16]);
			HouseInfo[idx][hInt] = strval(arrCoords[17]);
			HouseInfo[idx][hLock] = strval(arrCoords[18]);
			HouseInfo[idx][hOwned] = strval(arrCoords[19]);
			HouseInfo[idx][hRooms] = strval(arrCoords[20]);
			HouseInfo[idx][hRent] = strval(arrCoords[21]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[22]);
			HouseInfo[idx][hTakings] = strval(arrCoords[23]);
			HouseInfo[idx][hVec] = strval(arrCoords[24]);
  	        if(HouseInfo[idx][hVec] == 457)
			{
				HouseInfo[idx][hVec] = 411;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[25]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[26]);
			HouseInfo[idx][hDate] = strval(arrCoords[27]);
			HouseInfo[idx][hLevel] = strval(arrCoords[28]);
			HouseInfo[idx][hWorld] = strval(arrCoords[29]);
        	Create3DTextLabel(HouseInfo[idx][hDiscription],0xB40100FF, HouseInfo[idx][hEntrancex],HouseInfo[idx][hEntrancey],HouseInfo[idx][hEntrancez]+1,20,0);

			printf("HouseInfo:%d Owner:%s hTakings %d hVec %d",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings],HouseInfo[idx][hVec]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public LoadBizz()
{
	new arrCoords[20][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntranceX] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntranceY] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntranceZ] = floatstr(arrCoords[6]);
			BizzInfo[idx][bExitX] = floatstr(arrCoords[7]);
			BizzInfo[idx][bExitY] = floatstr(arrCoords[8]);
			BizzInfo[idx][bExitZ] = floatstr(arrCoords[9]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[10]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[11]);
			BizzInfo[idx][bEntranceCost] = strval(arrCoords[12]);
			BizzInfo[idx][bTill] = strval(arrCoords[13]);
			BizzInfo[idx][bLocked] = strval(arrCoords[14]);
			BizzInfo[idx][bInterior] = strval(arrCoords[15]);
			BizzInfo[idx][bProducts] = strval(arrCoords[16]);
			BizzInfo[idx][bMaxProducts] = strval(arrCoords[17]);
			BizzInfo[idx][bPriceProd] = strval(arrCoords[18]);
			printf("BizzInfo:%d Propriétaire:%s Message:%s Entrée:%d Caisse:%d Produits:%d/%d Interieur:%d.\n",
			idx,
			BizzInfo[idx][bOwner],
			BizzInfo[idx][bMessage],
			BizzInfo[idx][bEntranceCost],
			BizzInfo[idx][bTill],
			BizzInfo[idx][bProducts],
			BizzInfo[idx][bMaxProducts],
			BizzInfo[idx][bInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}


public LoadSBizz()
{
	new arrCoords[16][64];
	new strFromFile2[256];
	new File: file = fopen("sbizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(SBizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			SBizzInfo[idx][sbOwned] = strval(arrCoords[0]);
			strmid(SBizzInfo[idx][sbOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(SBizzInfo[idx][sbMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(SBizzInfo[idx][sbExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			SBizzInfo[idx][sbEntranceX] = floatstr(arrCoords[4]);
			SBizzInfo[idx][sbEntranceY] = floatstr(arrCoords[5]);
			SBizzInfo[idx][sbEntranceZ] = floatstr(arrCoords[6]);
			SBizzInfo[idx][sbLevelNeeded] = strval(arrCoords[7]);
			SBizzInfo[idx][sbBuyPrice] = strval(arrCoords[8]);
			SBizzInfo[idx][sbEntranceCost] = strval(arrCoords[9]);
			SBizzInfo[idx][sbTill] = strval(arrCoords[10]);
			SBizzInfo[idx][sbLocked] = strval(arrCoords[11]);
			SBizzInfo[idx][sbInterior] = strval(arrCoords[12]);
			SBizzInfo[idx][sbProducts] = strval(arrCoords[13]);
			SBizzInfo[idx][sbMaxProducts] = strval(arrCoords[14]);
			SBizzInfo[idx][sbPriceProd] = strval(arrCoords[15]);
			printf("Biz Info:%d Patron:%s Message:%s Prix d'entrée:%d Caisse:%d Produits:%d/%d Interior:%d.\n",
			idx,
			SBizzInfo[idx][sbOwner],
			SBizzInfo[idx][sbMessage],
			SBizzInfo[idx][sbEntranceCost],
			SBizzInfo[idx][sbTill],
			SBizzInfo[idx][sbProducts],
			SBizzInfo[idx][sbMaxProducts],
			SBizzInfo[idx][sbInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}
public RobTimer(playerid)
{
	if(PlayerInfo[playerid][probbank] > 1)
	{
		PlayerInfo[playerid][probbank]--;
	}
	if(PlayerInfo[playerid][probbank] == 1)
	{
		PlayerInfo[playerid][probbank] = 0;
		SendClientMessage(playerid, COLOR_RED, "***Vous pouvez à nouveau braquer la/une Banque");
	}
	if(PlayerInfo[playerid][probbank] < 0)
	{
		PlayerInfo[playerid][probbank] = 0;
		SendClientMessage(playerid, COLOR_RED, "***Vous pouvez à nouveau braquer la/une Banque");
	}
	if(lavoituregarer[playerid] > 0)
	{
	    lavoituregarer[playerid] --;
	}
	return 1;
}

public DonnerThune(playerid)
{
	if(PlayerToPoint(30, playerid,2144.0420,1638.5311,993.5761) || PlayerToPoint(40, playerid,-29.0377,-86.6471,1003.5542) || PlayerToPoint(40, playerid,-27.6196,-53.8779,1003.5469) || PlayerToPoint(40, playerid,-28.5354,-85.5751,1003.5542))
	{
		new sendername[MAX_PLAYER_NAME];
		new string[128];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerToPoint(30, playerid,2144.0420,1638.5311,993.5761))
		{
			robmoney = random(40000) + random(40000);
		}
		else
		{
		    robmoney = random(10000) + random(10000);
		}
		format(string, sizeof(string), "** Vous avez volé $%d !!!",robmoney);
		SendClientMessage(playerid,COLOR_YELLOW,string);
		SetPlayerCheckpoint(playerid,1054.8140,2148.3220,10.8203,3);
		SendClientMessage(playerid,COLOR_YELLOW,"Aller blanchir votre thune(point rouge)");
		return 0;
	}
	else
	{
	    braquageencours = 0;
	}
	return 1;
}

/*public Braquage()
{
    braquageencours = 0;
}
public OuvertureGrille(playerid)
{
	grilleouverte[playerid] = 0;
}*/

//------------------------------------------------------------------------------------------------------

public OnGameModeInit()
{
	Atext = TextDrawCreate(5.0, 400.0,Text_Minimap);
   	TextDrawUseBox(Atext, 0);
	TextDrawFont(Atext, 3);
	TextDrawSetShadow(Atext,0);
	TextDrawSetOutline(Atext,1);
	TextDrawBackgroundColor(Atext,0x000000FF);
	TextDrawColor(Atext,0xFFFFFFFF);
    Script_OnGameModeInit();
    Ann = 0;
    braquagetimer = SetTimer("RobTimer", 1000, 1);
    SetTimer("EnvoiAnnonce", 1800000, 1);
	SetTimer("Bourrer",10000,1);
	/*SetTimer("SystemMort", 20,1);*/
	Grille[0] = 0, Grille[1] = 0, Grille[2] = 0, Grille[3] = 0, Grille[4] = 0;
	Grille[5] = 0, Grille[6] = 0, Grille[7] = 0, Grille[8] = 0, Grille[9] = 0;
	Grille[10] = 0, Grille[11] = 0, Grille[12] = 0;
    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
	ShowPlayerMarkers(1);
	UsePlayerPedAnims();
	CreateFoodMenus();
	CreateGuideMenus();
	LoadProperty();
	LoadBizz();
	LoadSBizz();
	LoadBoxer();
	LoadStuff();
	LoadFamilies();
	LoadCK();
	LoadPapers();
	LoadDrugSystem();
	LoadStat();
	LoadMatsSystem();
	LoadHQLocks();
	LoadTrunk();
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Rien");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "Personne");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	PlayerHaul[108][pCapasity] = 100;
	PlayerHaul[109][pCapasity] = 100;
	PlayerHaul[110][pCapasity] = 50;
	PlayerHaul[111][pCapasity] = 50;
	format(string, sizeof(string), "LVV RP %s.%s", MAJOR_VERSION, MINOR_VERSION);
	SetGameModeText(string);
	format(string, sizeof(string), "mapname %s", NOM_SERVEUR);
	SendRconCommand(string);
	format(string, sizeof(string), "weburl %s", URL_SERVEUR);
	SendRconCommand(string);
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "LSPD : Rien a Signaler, terminer.");
	format(motd, sizeof(motd), "Bienvenue à Los Santos !.");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}

	SetPDistance(10);
	EnableTirePopping(1);
	EnableZoneNames(1);
	AllowInteriorWeapons(1);
	AllowAdminTeleport(0);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	zonecrip = GangZoneCreate(2372.123, -1729.235, 2531.842, -1634.489);
	zoneballas = GangZoneCreate(1866.346, -1259.454, 2060.291, -1141.021);
	/*zonecosa = GangZoneCreate(668.4526, -1393.677, 1090.567, -1160.76);*/
	zonevagos = GangZoneCreate(1801.698, -2167.434, 1950.008, -1985.838);
	/*zoneleone = GangZoneCreate(1071.553, -943.6342, 1622.964, -655.4491);
	zonerusse = GangZoneCreate(238.7321, -1338.408, 626.6214, -742.2994);
	zoneyakuza = GangZoneCreate(2706.773, -2321.396, 2919.731, -1891.092);*/

//---------------------------------[Objects]------------------------------------

    /*//mdpbanque = 100;
	mdpbanque = random(10000);*/

	AddStaticVehicle(454,466.3298,-2630.6702,0.2225,0.2938,0,0); // bateau2
	/*blindebanque = CreateObject(2634, 2144.1813964844, 1626.6809082031, 994.26220703125, 0, 0, 179.77966308594);*/
	// Barrieres
    lspddoor1 = CreateStreamObject(1500, 239.5513,116.1804,1002.1687,0, 0.0000, 90.0000);
    lspddoor2 = CreateStreamObject(1500, 239.5613,117.4503,1002.1687,0, 0.0000, 90.0000);
    lspddoor3 = CreateStreamObject(1500, 253.1441,110.4971,1002.2187,0, 0.0000, 270.0000);
    lspddoor4 = CreateStreamObject(1500, 253.1420,109.1938,1002.2187,0, 0.0000, 270.0000);
    lspddoor5 = CreateStreamObject(1500, 253.1712,126.7515,1002.2187,0, 0.0000, 270.0000);
    lspddoor6 = CreateStreamObject(1500, 253.1823,125.4255,1002.2187,0, 0.0000, 270.0000);
    lspddoor7 = CreateStreamObject(1500, 239.6337,123.5868,1002.2257,0, 0.0000, 90.0000);
    lspddoor8 = CreateStreamObject(1500, 239.6599,124.9501,1002.2257,0, 0.0000, 90.0000);
	police1 = CreateStreamObject(971, 1589.02050781, -1638.08789062, 14.95541191, 0, 0, 179.4561); // barriere haut police levee
    police2 = CreateStreamObject(985, 1544.55432129, -1627.27563477, 11.64160728, 0, 0, 88.9800); //  barriere bas police levee
	aeroport = CreateStreamObject(980, 1961.5328369141, -2189.7648925781, 15.320266723633, 0, 0, 0); // barriere entrée Crip'Z
	fourriere1 = CreateStreamObject(975, 1643.8198242188, -1715.1018066406, 16.284065246582, 0, 0, 90, 500); // Barriere 1 fourriere
	fourriere2 = CreateStreamObject(980, -2655.2478027344, -221.04484558105, 6.1350336074829, 0, 0, 0, 500); // Barriere 2 fourriere
    armee1 = CreateStreamObject(986, -1530.8883056641, 482.1833190918, 6.1796875, 0, 0, 0, 500); // Barriere armée
    russe = CreateStreamObject(980, 1284.7415771484, -2056.7543945313, 60.710502624512, 0.00000000, 0.00000000, 90.00000000);// porte mafia
    cosa1 = CreateStreamObject(980, 785.28924560547, -1152.4187011719, 25.391334533691, 0, 0, 272);
    cosa2 = CreateStreamObject(980, 664.82769775391, -1308.4271240234, 15.154035568237, 0, 0, 0);
    cosa3 = CreateStreamObject(980, 659.69165039063, -1227.2137451172, 17.413446426392, 0, 0, 242);
    racer1 = CreateStreamObject(971, 1595.0223388672, -2175.6259765625, 13.379755020142, 0, 0, 280);
	racer2 = CreateStreamObject(980, 1497.2830810547, -2166.7561035156, 15.450307846069, 0, 0, 90);


//-------------------------------------------[Mapping]-----------------------------------//
	//sono the sun
/*	CreateStreamObject(2964, 503.20095825195, -4.7169876098633, 999.6796875, 0, 0, 0, 500);
	CreateStreamObject(1584, 495.95971679688, -1.3660227060318, 1002.7242431641, 0, 0, 0, 500);
	CreateStreamObject(14391, 476.19787597656, -15.223565101624, 1003.6676025391, 0, 0, 178.95526123047, 500);
	CreateStreamObject(2104, 477.3828125, -16.028541564941, 1002.3889770508, 0, 0, 0, 500);
	CreateStreamObject(2104, 477.38650512695, -13.374797821045, 1002.494934082, 0, 0, 0, 500); */
	// Mapping l'alhambra fait par massimo

	CreateStreamObject(18092, 487.4951171875, -2.817152261734, 1001.6580810547, 0, 0, 180.08947753906, 500);
    CreateStreamObject(2190, 476.92193603516, -14.616927146912, 1003.4891357422, 0, 0, 270, 500);
    CreateStreamObject(2232, 485.41329956055, -3.2846019268036, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 486.10403442383, -3.2962417602539, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 486.78881835938, -3.2860152721405, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 487.47515869141, -3.2914288043976, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 488.18048095703, -3.2900903224945, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 488.85290527344, -3.2857060432434, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 489.51831054688, -3.2782063484192, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 489.5322265625, -2.9358849525452, 1002.7565307617, 0, 0, 22, 500);
    CreateStreamObject(2232, 485.43225097656, -2.9471309185028, 1002.7565307617, 0, 0, 342, 500);
    CreateStreamObject(14820, 487.47265625, -3.0546875, 1002.1682739258, 0, 0, 359.74731445313, 500);
    CreateStreamObject(2894, 476.53207397461, -15.070133209229, 1003.4891357422, 0, 0, 270, 500);
    CreateStreamObject(2196, 476.19107055664, -15.495956420898, 1003.5068359375, 0, 0, 122.5, 500);
    CreateStreamObject(2967, 476.36279296875, -15.636517524719, 1003.4865722656, 0, 0, 240, 500);
    CreateStreamObject(2922, 475.5458984375, -21.359375, 1003.8775634766, 0, 0, 181.24694824219, 500);
    CreateStreamObject(1523, 473.78555297852, -21.255294799805, 1002.682800293, 0, 0, 0, 500);
    CreateStreamObject(1754, 474.91741943359, -10.834185600281, 1002.6953125, 0, 0, 0, 500);
    CreateStreamObject(2292, 473.95318603516, -10.845105171204, 1002.6953125, 0, 0, 0, 500);
    CreateStreamObject(2291, 475.37796020508, -10.826944351196, 1002.6953125, 0, 0, 0, 500);
    CreateStreamObject(2291, 473.94802856445, -12.299083709717, 1002.6953125, 0, 0, 90, 500);
    CreateStreamObject(2293, 473.93072509766, -12.767097473145, 1002.6953125, 0, 0, 0, 500);
    CreateStreamObject(2086, 475.65600585938, -12.576710700989, 1002.7615966797, 0, 0, 0, 500);
    CreateStreamObject(1754, 476.81887817383, -10.799030303955, 1002.6953125, 0, 0, 0, 500);
    CreateStreamObject(1510, 475.59710693359, -12.477409362793, 1003.1552734375, 0, 0, 0, 500);
    CreateStreamObject(1520, 475.74783325195, -12.472457885742, 1003.2053222656, 0, 0, 0, 500);
    CreateStreamObject(1668, 475.61633300781, -12.618885993958, 1003.3219604492, 0, 0, 40, 500);
    CreateStreamObject(1669, 475.74932861328, -12.638149261475, 1003.3219604492, 0, 0, 0, 500);
    CreateStreamObject(1210, 475.451171875, -12.216477394104, 1003.3037109375, 90, 0, 218, 500);
    CreateStreamObject(2200, 473.609375, -15.506537437439, 1002.6953125, 0, 0, 90.25, 500);
    CreateStreamObject(1962, 477.1015625, -12.83419418335, 1004.242980957, 0, 0, 90, 500);
    CreateStreamObject(1960, 477.07250976563, -11.886207580566, 1004.2446289063, 0, 0, 270.25, 500);
    CreateStreamObject(1961, 477.08294677734, -10.934367179871, 1004.2336425781, 0, 0, 270, 500);
    CreateStreamObject(2262, 476.28750610352, -10.826415061951, 1004.1376953125, 0, 0, 0, 500);
    CreateStreamObject(2265, 475.16455078125, -10.825784683228, 1004.0762939453, 0, 0, 0, 500);
    CreateStreamObject(2264, 474.17227172852, -10.836313247681, 1004.1258544922, 0, 0, 0, 500);
    CreateStreamObject(2571, 475.63864135742, -17.296829223633, 1002.6953125, 0, 0, 266.49536132813, 500);
    CreateStreamObject(1517, 476.39086914063, -18.864078521729, 1003.3844604492, 0, 0, 0, 500);
    CreateStreamObject(1544, 476.27001953125, -19.000341415405, 1003.1846923828, 0, 0, 0, 500);
    CreateStreamObject(1665, 476.08639526367, -18.940830230713, 1003.2201538086, 0, 0, 348.5, 500);
    CreateStreamObject(1664, 476.42327880859, -19.052562713623, 1003.3513793945, 0, 0, 0, 500);
    CreateStreamObject(1649, 489.19104003906, -23.250974655151, 1004.5246582031, 0, 0, 270, 500);
    CreateStreamObject(1649, 489.1982421875, -23.2294921875, 1004.2794189453, 0, 0, 90, 500);
    CreateStreamObject(1649, 484.2112121582, -21.081192016602, 1004.6978149414, 0, 90, 0, 500);
    CreateStreamObject(1649, 480.91860961914, -21.084022521973, 1004.3044433594, 0, 90, 0, 500);
    CreateStreamObject(1649, 487.50866699219, -21.074625015259, 1004.6978149414, 0, 90, 0, 500);
    CreateStreamObject(1649, 487.53500366211, -21.041864395142, 1004.8454589844, 0, 90, 180, 500);
    CreateStreamObject(1649, 484.21655273438, -21.041307449341, 1005.0954589844, 0, 90, 180, 500);
    CreateStreamObject(1649, 480.88833618164, -21.040372848511, 1004.8376464844, 0, 90, 180, 500);
    CreateStreamObject(2332, 473.77505493164, -16.412399291992, 1003.1331787109, 0, 0, 89.25, 500);
    CreateStreamObject(2344, 476.14105224609, -18.666913986206, 1003.1947631836, 0, 0, 309.75, 500);
    CreateStreamObject(2596, 473.77862548828, -20.69259262085, 1004.8471679688, 0, 0, 142, 500);
    CreateStreamObject(2773, 479.19311523438, -17.797107696533, 1000.1968994141, 0, 0, 0, 500);
    CreateStreamObject(2773, 1835.7800292969, -1677.8011474609, 12.939314842224, 0, 0, 90, 500);
    CreateStreamObject(2773, 1835.7185058594, -1680.9959716797, 12.925591468811, 0, 0, 89.75, 500);
    
    //---------------------QG Fire-Graft----------------------------
    
    CreateObject(16151,1949.87268066,-1576.79016113,13.09061241,0.00000000,0.00000000,136.00000000); //object(ufo_bar) (1)
    CreateObject(11665,1971.33276367,-1584.84252930,13.28355122,0.00000000,0.00000000,46.00000000); //object(kb_chair03ext) (1)
    CreateObject(1723,1968.67480469,-1583.95996094,12.58650780,0.00000000,0.00000000,72.00000000); //object(mrk_seating1) (1)
    CreateObject(2571,1961.09387207,-1577.68652344,12.59066010,0.00000000,0.00000000,0.00000000); //object(hotel_single_1) (1)
    CreateObject(1764,1959.83203125,-1581.23559570,12.58634567,0.00000000,0.00000000,98.00000000); //object(low_couch_2) (1)
    CreateObject(1429,1962.11010742,-1581.18103027,12.84132290,0.00000000,0.00000000,180.00000000); //object(dyn_tv) (1)
    CreateObject(1429,1962.09960938,-1581.18225098,13.35838985,0.00000000,0.00000000,181.99996948); //object(dyn_tv) (2)
    CreateObject(1429,1962.80944824,-1581.16943359,12.84133911,0.00000000,0.00000000,180.00000000); //object(dyn_tv) (3)
    CreateObject(1429,1962.79638672,-1581.17639160,13.35840607,0.00000000,0.00000000,180.00000000); //object(dyn_tv) (4)
    CreateObject(14826,1960.33227539,-1586.47595215,13.34215260,0.00000000,0.00000000,0.00000000); //object(int_kbsgarage2) (1)
    CreateObject(1558,1958.14965820,-1587.65771484,13.15318108,0.00000000,0.00000000,0.00000000); //object(cj_cardbrd_pickup) (1)
    CreateObject(1558,1956.99511719,-1587.76062012,13.15241623,0.00000000,0.00000000,0.00000000); //object(cj_cardbrd_pickup) (2)

    // partie 2 de l'alhambra de massimo

    CreateStreamObject(2773, 1835.7392578125, -1683.96484375, 12.964526176453, 0, 0, 90.247192382813, 500);
    CreateStreamObject(2773, 1835.8032226563, -1687.1229248047, 12.936356544495, 0, 0, 270, 500);
    CreateStreamObject(970, 1829.0773925781, -1677.1665039063, 13.048357009888, 0, 0, 0, 500);
    CreateStreamObject(970, 1829.0263671875, -1687.6845703125, 13.098356246948, 0, 0, 0, 500);
    CreateStreamObject(970, 1827.0238037109, -1679.2242431641, 13.098356246948, 0, 0, 90, 500);
    CreateStreamObject(970, 1827.04296875, -1685.6640625, 13.098356246948, 0, 0, 270, 500);
    CreateStreamObject(970, 1833.1822509766, -1677.1627197266, 12.984672546387, 0, 0, 0, 500);
    CreateStreamObject(970, 1837.2784423828, -1677.1750488281, 12.865791320801, 0, 0, 0, 500);
    CreateStreamObject(970, 1833.173828125, -1687.6602783203, 12.996820449829, 0, 0, 0, 500);
    CreateStreamObject(970, 1837.2808837891, -1687.650390625, 12.865791320801, 0, 0, 0, 500);
    CreateStreamObject(1215, 1827.0125732422, -1681.4630126953, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1827.0192871094, -1683.4722900391, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(2681, 502.82247924805, -10.305779457092, 999.6796875, 0, 0, 0, 500);
    CreateStreamObject(2779, 504.94073486328, -7.5327124595642, 999.671875, 0, 0, 180, 500);
    CreateStreamObject(2964, 503.63717651367, -4.680908203125, 999.6796875, 0, 0, 0, 500);
    CreateStreamObject(3105, 503.27526855469, -4.4227824211121, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3102, 504.07107543945, -4.8772473335266, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3104, 504.24722290039, -4.3125457763672, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3001, 503.11242675781, -4.8927159309387, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(2998, 503.91940307617, -4.2778034210205, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(2995, 504.43145751953, -4.8761701583862, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3002, 502.77780151367, -4.3987588882446, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3000, 503.6369934082, -4.704909324646, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3106, 503.17169189453, -4.5616211891174, 1000.6096801758, 0, 0, 0, 500);
    CreateStreamObject(3003, 502.90930175781, -4.2712378501892, 1000.6100463867, 0, 0, 0, 500);
    CreateStreamObject(3004, 503.93447875977, -4.7630662918091, 1000.5966796875, 0, 0, 342, 500);
    CreateStreamObject(3004, 503.43414306641, -4.5274424552917, 1000.5716552734, 0, 0, 120, 500);
    CreateStreamObject(2290, 506.96963500977, -3.3661484718323, 999.6796875, 0, 0, 270, 500);
    CreateStreamObject(2290, 503.34170532227, -1.4192476272583, 999.6796875, 0, 0, 0, 500);
    CreateStreamObject(2205, 476.65469360352, -21.881563186646, 1002.0593261719, 0, 0, 269.99450683594, 500);
    CreateStreamObject(1663, 475.59872436523, -22.774322509766, 1002.5695800781, 0, 0, 81.996459960938, 500);
    CreateStreamObject(2531, 506.3173828125, -7.6040372848511, 999.671875, 0, 0, 180, 500);
    CreateStreamObject(2606, 476.81433105469, -22.516998291016, 1003.196105957, 0, 0, 269.99450683594, 500);
    CreateStreamObject(1616, 489.10833740234, -26.933252334595, 1005.3133544922, 0, 0, 0, 500);
    CreateStreamObject(1616, 493.68673706055, -12.605858802795, 1004.8552856445, 0, 0, 256, 500);
    CreateStreamObject(1616, 477.75717163086, -4.3038372993469, 1005.0139160156, 0, 0, 178.25, 500);
    CreateStreamObject(1616, 1837.0643310547, -1686.7451171875, 16.237356185913, 0, 0, 10.5, 500);
    CreateStreamObject(2232, 489.5182800293, -2.6960608959198, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 489.51315307617, -2.5834970474243, 1001.4051513672, 0, 0, 0, 500);
    CreateStreamObject(2232, 485.42037963867, -2.6865060329437, 1001.4306640625, 0, 0, 0, 500);
    CreateStreamObject(2232, 485.42730712891, -2.5916154384613, 1001.4301757813, 0, 0, 0, 500);
    CreateStreamObject(1714, 475.48046875, -15.1630859375, 1002.6953125, 0, 0, 109.9951171875, 500);
    CreateStreamObject(2773, 477.27444458008, -24.91756439209, 1002.6265869141, 0, 0, 0, 500);
    CreateStreamObject(2726, 482.73733520508, -24.745500564575, 1002.9177856445, 0, 0, 0, 500);
    CreateStreamObject(2726, 486.72512817383, -24.908592224121, 1002.9177856445, 0, 0, 0, 500);
    CreateStreamObject(1668, 482.53817749023, -24.574745178223, 1002.7404174805, 0, 0, 0, 500);
    CreateStreamObject(1665, 486.99264526367, -25.005735397339, 1002.5849609375, 0, 0, 0, 500);
    CreateStreamObject(1669, 486.91885375977, -24.755844116211, 1002.7404174805, 0, 0, 0, 500);
    CreateStreamObject(1544, 487.09051513672, -24.711429595947, 1002.5737304688, 0, 0, 0, 500);
    CreateStreamObject(1543, 486.98474121094, -24.648794174194, 1002.5737304688, 0, 0, 0, 500);
    CreateStreamObject(1520, 482.4365234375, -24.68560218811, 1002.5987548828, 0, 0, 0, 500);
    CreateStreamObject(1510, 482.52529907227, -24.846183776855, 1002.5783691406, 0, 0, 0, 500);
    CreateStreamObject(1486, 482.73773193359, -24.921518325806, 1002.7186889648, 0, 0, 0, 500);
    CreateStreamObject(2773, 479.1828918457, -24.916210174561, 1002.6265869141, 0, 0, 0, 500);
    CreateStreamObject(2922, 475.52606201172, -21.062501907349, 1003.9072875977, 0, 0, 0, 500);
	// Mapping de l'alhambra by sebastian
	
	CreateStreamObject(8661, 1918.3824462891, -1642.2337646484, 12.57187461853, 0, 0, 270.5);
    CreateStreamObject(8661, 1918.7313232422, -1681.7937011719, 12.57187461853, 0, 0, 270.49987792969);
    CreateStreamObject(8661, 1921.6556396484, -1719.1962890625, 12.57187461853, 0, 0.25, 269.49987792969);
    CreateStreamObject(8661, 1921.7817382813, -1642.4334716797, 12.57187461853, 0, 0, 270.49987792969);
    CreateStreamObject(8661, 1921.8280029297, -1679.0913085938, 12.57187461853, 0, 0, 269.74987792969);
    CreateStreamObject(8661, 1919.3665771484, -1697.3005371094, 12.57187461853, 0, 0, 270.49987792969);
    CreateStreamObject(8661, 1919.1633300781, -1722.2502441406, 12.571872711182, 0, 0, 270.49987792969);
    CreateStreamObject(8661, 1921.5849609375, -1722.2414550781, 12.571872711182, 0, 0, 269.49987792969);
    CreateStreamObject(8661, 1916.6961669922, -1682.0773925781, 12.57187461853, 0, 0, 179.99731445313);
    CreateStreamObject(1412, 1910.85546875, -1622.2664794922, 13.820835113525, 0, 0, 0);
    CreateStreamObject(1412, 1908.2578125, -1624.8665771484, 13.845834732056, 0, 0, 270);
    CreateStreamObject(1412, 1908.2552490234, -1629.9838867188, 13.845834732056, 0, 0, 270);
    CreateStreamObject(1412, 1912.6075439453, -1622.2510986328, 13.820835113525, 0, 0, 0);
    CreateStreamObject(3749, 1934.2591552734, -1682.1954345703, 18.430290222168, 0, 0, 270);
    CreateStreamObject(1412, 1911.9014892578, -1742.2581787109, 13.845832824707, 0, 0, 0);
    CreateStreamObject(1412, 1909.3472900391, -1739.6068115234, 13.687498092651, 0, 0, 90.500061035156);
    CreateStreamObject(1412, 1909.0892333984, -1734.2143554688, 13.516637802124, 0, 0, 89.49462890625);
    CreateStreamObject(640, 1933.8881835938, -1682.2749023438, 13.268908500671, 0, 0, 270);
    CreateStreamObject(997, 1931.609375, -1670.4620361328, 12.546875, 0, 0, 270);
    CreateStreamObject(997, 1931.4691162109, -1691.0078125, 12.546875, 0, 0, 270.25);
    CreateStreamObject(9697, 1913.7512207031, -1676.6334228516, 12.686250686646, 0, 0, 90);
    CreateStreamObject(9697, 1913.5771484375, -1689.7965087891, 12.686248779297, 0, 0, 90);
    CreateStreamObject(1215, 1936.3276367188, -1682.2790527344, 13.236821174622, 0, 0, 0);
    CreateStreamObject(1223, 1910.1413574219, -1729.0809326172, 12.571871757507, 0, 0, 0);
    CreateStreamObject(1223, 1910.1785888672, -1716.0402832031, 12.57187461853, 0, 0, 0);
    CreateStreamObject(1223, 1910.3591308594, -1702.8576660156, 12.571873664856, 0, 0, 0);
    CreateStreamObject(1223, 1910.2700195313, -1689.6950683594, 12.57187461853, 0, 0, 0);
    CreateStreamObject(1223, 1910.0817871094, -1676.5294189453, 12.57187461853, 0, 0, 0);
    CreateStreamObject(1223, 1910.0986328125, -1663.4803466797, 12.57187461853, 0, 0, 0);
    CreateStreamObject(1223, 1910.0146484375, -1650.4027099609, 12.57187461853, 0, 0, 0);
    CreateStreamObject(1223, 1910.0930175781, -1637.2497558594, 12.57187461853, 0, 0, 0);
    CreateStreamObject(1223, 1910.2579345703, -1624.2548828125, 12.57187461853, 0, 0, 330);
    CreateStreamObject(1223, 1909.8754882813, -1742.1044921875, 12.571872711182, 0, 0, 34);
    CreateStreamObject(1223, 1930.1600341797, -1650.5396728516, 12.57187461853, 0, 0, 180);
    CreateStreamObject(1223, 1930.1378173828, -1637.2374267578, 12.57187461853, 0, 0, 179.99450683594);
    CreateStreamObject(1223, 1929.7924804688, -1623.8883056641, 12.57187461853, 0, 0, 215.99450683594);
    CreateStreamObject(1223, 1930.1694335938, -1663.5998535156, 12.57187461853, 0, 0, 179.99450683594);
    CreateStreamObject(1223, 1930.1081542969, -1740.8741455078, 12.571872711182, 0, 0, 137.99719238281);
    CreateStreamObject(1223, 1930.1832275391, -1730.3544921875, 12.571872711182, 0, 0, 178);
    CreateStreamObject(1223, 1930.0552978516, -1716.0919189453, 12.585740089417, 0, 0, 177.99548339844);
    CreateStreamObject(1223, 1930.2794189453, -1702.9044189453, 12.643291473389, 0, 0, 177.99548339844);
    CreateStreamObject(1223, 1931.5981445313, -1688.6469726563, 12.57187461853, 0, 0, 177.99499511719);
    CreateStreamObject(1223, 1931.7912597656, -1675.8223876953, 12.57187461853, 0, 0, 177.99499511719);

	// mapping de la banque
    CreateStreamObject(7091, 1462.0198974609, -1018.4583129883, 33.07462310791, 0, 0, 270, 500);
    CreateStreamObject(1215, 1451.158203125, -1016.841796875, 26.937355041504, 0, 0, 0, 500);
    CreateStreamObject(1215, 1472.6550292969, -1016.6848754883, 26.931510925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1472.7272949219, -1013.2926025391, 26.822135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1451.357421875, -1013.2960205078, 26.822135925293, 0, 0, 0, 500);
    CreateStreamObject(994, 1485.5952148438, -1023.8278198242, 22.806770324707, 0, 0, 0, 500);
    CreateStreamObject(994, 1477.7293701172, -1023.8145141602, 22.825836181641, 0, 0, 0, 500);
    CreateStreamObject(994, 1433.2237548828, -1023.7528076172, 22.828125, 0, 0, 0, 500);
    CreateStreamObject(994, 1441.2587890625, -1023.8760375977, 22.828125, 0, 0, 0, 500);
    CreateStreamObject(994, 1452.8021240234, -1023.7706298828, 22.828125, 0, 0, 0, 500);
    CreateStreamObject(994, 1465.4603271484, -1023.8391723633, 22.83310508728, 0, 0, 0, 500);
    CreateStreamObject(3920, 1457.7276611328, -1021.1286621094, 32.122978210449, 0, 0, 0, 500);
    CreateStreamObject(3920, 1467.9815673828, -1021.0388183594, 32.334392547607, 0, 0, 0, 500);
    CreateStreamObject(638, 1455.9326171875, -1022.9779052734, 23.525157928467, 0, 0, 92, 500);
    CreateStreamObject(638, 1468.4545898438, -1023.2114257813, 23.525157928467, 0, 0, 88, 500);
    CreateStreamObject(1215, 1460.3701171875, -1023.8653564453, 23.397426605225, 0, 0, 0, 500);
    CreateStreamObject(1215, 1464.3968505859, -1023.8333740234, 23.397426605225, 0, 0, 0, 500);
    CreateStreamObject(1215, 1476.2332763672, -1023.7861328125, 23.393642425537, 0, 0, 0, 500);
    CreateStreamObject(1215, 1472.9885253906, -1023.8278808594, 23.399158477783, 0, 0, 0, 500);
    CreateStreamObject(1215, 1474.5554199219, -1023.8049316406, 23.396549224854, 0, 0, 0, 500);
    CreateStreamObject(1215, 1448.708984375, -1023.7968139648, 23.392448425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1451.6890869141, -1023.7828979492, 23.392448425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1450.2255859375, -1023.8125, 23.392448425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1432.6142578125, -1022.791015625, 23.392448425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1492.1353759766, -1022.865234375, 23.377927780151, 0, 0, 0, 500);
    CreateStreamObject(2961, 1467.369140625, -1012.29296875, 25.768508911133, 0, 0, 0, 500);
    CreateStreamObject(2961, 1472.8121337891, -1013.5930786133, 27.786140441895, 0, 0, 182, 500);
    CreateStreamObject(3350, 1471.6174316406, -1020.1140136719, 32.812038421631, 0, 0, 294, 500);

	// petite banque
	CreateStreamObject(8957, 2145.6572265625, 1602.7520751953, 1003.8563232422, 270.52258300781, 180.80017089844, 179.87768554688, 500);
	CreateStreamObject(1616, 2146.0737304688, 1604.4000244141, 1004.6889038086, 0, 0, 166.96337890625, 500);
	CreateStreamObject(1622, 2149.2531738281, 1595.7750244141, 1002.431640625, 0, 0, 266.83276367188, 500);
	CreateStreamObject(14559, 2144.0251464844, 1637.6671142578, 1000.8333129883, 0, 0, 279.74700927734, 500);
	CreateStreamObject(1886, 2144.2023925781, 1626.8470458984, 996.44140625, 0, 0, 0, 500);
	CreateStreamObject(1886, 2147.38671875, 1626.4636230469, 997.31024169922, 0, 0, 301.88577270508, 500);
	CreateStreamObject(1886, 2140.9645996094, 1626.4921875, 997.52990722656, 0, 0, 29.518371582031, 500);
    // Hosto
    CreateStreamObject(14595, 1163.0966796875, -1324.3876953125, 1022.6499023438, 0, 0, 0);
    CreateStreamObject(16501, 1166.268677, -1335.303955, 1020.389648, 0.0000, 0.0000, 180.0000);
    CreateStreamObject(1505, 1166.177368, -1335.178589, 1018.692688, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(1661, 1169.560425, -1324.684937, 1022.323486, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1808, 1167.4765625, -1319.4951171875, 1018.6908569336, 0, 0, 9.920654296875);
    CreateStreamObject(2631, 1164.119995, -1335.954346, 1018.667236, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(2773, 1164.838989, -1337.248413, 1019.213196, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(2773, 1162.9020996094, -1337.2595214844, 1019.2131958008, 0, 0, 270);
    CreateStreamObject(630, 1164.763916, -1340.772095, 1019.721130, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(630, 1160.472656, -1340.435059, 1019.721130, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(914, 1154.434937, -1338.328369, 1021.502625, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(2380, 1155.460571, -1331.774780, 1019.784607, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(2609, 1155.1490478516, -1337.9067382813, 1019.4276733398, 0, 0, 270);
    CreateStreamObject(2197, 1165.705444, -1339.816650, 1018.688171, 0.0000, 0.0000, 180.0000);
    CreateStreamObject(2009, 1163.876831, -1338.861572, 1018.695984, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1714, 1165.349609375, -1339.2080078125, 1018.6945800781, 0, 0, 202.49450683594);
    CreateStreamObject(2631, 1160.237183, -1335.944458, 1018.667236, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1723, 1169.5107421875, -1320.111328125, 1018.6940307617, 0, 0, 0);
    CreateStreamObject(1723, 1167.222290, -1328.581421, 1018.694031, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(1724, 1167.096069, -1325.500244, 1018.693970, 0.0000, 0.0000, 67.5000);
    CreateStreamObject(2009, 1153.7315673828, -1335.7595214844, 1018.6959838867, 0, 0, 0);
    CreateStreamObject(1714, 1154.9321289063, -1336.1998291016, 1018.6945800781, 0, 0, 202.5);
    CreateStreamObject(2007, 1153.3615722656, -1337.6949462891, 1018.6923828125, 0, 0, 180);
    CreateStreamObject(14455, 1167.135132, -1329.279175, 1020.298279, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1717, 1171.774780, -1327.855713, 1018.693970, 0.0000, 0.0000, 191.2500);
    CreateStreamObject(2009, 1140.7807617188, -1336.2747802734, 1018.6967773438, 0, 0, 0);
    CreateStreamObject(1714, 1141.9132080078, -1336.5949707031, 1018.6953735352, 0, 0, 202.5);
    CreateStreamObject(2609, 1135.6047363281, -1338.2689208984, 1019.4284667969, 0, 0, 90);
    CreateStreamObject(2007, 1141.9171142578, -1337.9934082031, 1018.6923828125, 0, 0, 180);
    CreateStreamObject(2380, 1136.119751, -1329.759644, 1020.014465, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1369, 1128.008301, -1328.060669, 1019.318665, 0.0000, 0.0000, 112.5000);
    CreateStreamObject(1369, 1127.793579, -1326.000488, 1019.318665, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(1369, 1127.192383, -1321.236206, 1019.325500, 0.0000, 0.0000, 67.5000);
    CreateStreamObject(1369, 1127.380615, -1323.005981, 1019.325500, 0.0000, 0.0000, 67.5000);
    CreateStreamObject(1502, 1137.9683837891, -1329.5140380859, 1018.7042236328, 0, 0, 0);
    CreateStreamObject(1502, 1151.736328125, -1329.59765625, 1018.686340332, 0, 0, 0);
    CreateStreamObject(14597, 1148.147217, -1305.585449, 1024.694092, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(16500, 1148.314697, -1318.838989, 1024.503540, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(1505, 1147.568604, -1318.786987, 1022.495605, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(1523, 1151.445068, -1313.135864, 1022.671692, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(1523, 1144.806885, -1313.134399, 1022.678955, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(1523, 1144.911621, -1303.795776, 1022.684631, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(1523, 1151.418213, -1303.799316, 1022.689392, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(3383, 1155.7250976563, -1310.9541015625, 1022.7019042969, 0, 0, 179.99450683594);
    CreateStreamObject(3383, 1135.836792, -1313.293213, 1022.709229, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(3383, 1136.010498, -1305.521606, 1022.701904, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(3383, 1157.088013, -1308.093506, 1022.701904, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(3391, 1161.146729, -1311.334106, 1022.699707, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(3392, 1161.146118, -1314.853394, 1022.699707, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(3393, 1158.391724, -1316.274902, 1022.699707, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(3392, 1136.400635, -1310.055054, 1022.699707, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(3394, 1137.307007, -1316.213135, 1022.699707, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(3393, 1139.993896, -1310.070801, 1022.707031, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(3395, 1138.500000, -1308.517334, 1022.699707, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(3396, 1138.070801, -1302.247070, 1022.699707, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(3394, 1141.659058, -1302.246094, 1022.699707, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(3395, 1161.201660, -1307.254272, 1022.699707, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(3396, 1161.172852, -1303.571899, 1022.699707, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(3394, 1157.995605, -1302.196777, 1022.699707, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(16501, 1148.435547, -1301.466064, 1024.909668, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(2700, 1157.973633, -1299.072632, 1021.590576, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(2700, 1157.957397, -1310.534790, 1021.655640, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(2700, 1154.466187, -1310.534790, 1021.708679, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(2700, 1155.117432, -1299.072632, 1021.562744, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(2700, 1150.609375, -1299.072632, 1021.511841, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(2700, 1150.351074, -1310.534790, 1021.569641, 0.0000, 0.0000, 90.0000);
    CreateStreamObject(1502, 1163.83203125, -1311.18359375, 1018.6877441406, 0, 0, 179.99450683594);
    CreateStreamObject(983, 1148.377686, -1291.909302, 13.344784, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(966, 1144.946533, -1291.971680, 12.624389, 0.0000, 0.0000, 0.0000);
    CreateStreamObject(983, 1134.787720, -1291.993774, 13.234808, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(983, 1139.560547, -1369.144165, 13.468687, 0.0000, 0.0000, 270.0000);
    CreateStreamObject(983, 1085.773682, -1335.106812, 13.320826, 0.0000, 0.0000, 270.000);
    CreateStreamObject(1798, 1158.6285400391, -1307.4279785156, 1018.5859985352, 0, 0, 179.6572265625);
    CreateStreamObject(1798, 1154.7209472656, -1307.5163574219, 1018.5442504883, 0, 0, 181.52862548828);
    CreateStreamObject(1798, 1150.7445068359, -1307.6263427734, 1018.5982666016, 0, 0, 179.6572265625);
    CreateStreamObject(1798, 1154.7878417969, -1302.1510009766, 1018.484375, 0, 0, 0);
    CreateStreamObject(1798, 1149.9342041016, -1302.1159667969, 1018.5905761719, 0, 0, 0);
    CreateStreamObject(1798, 1158.6031494141, -1302.0124511719, 1018.5905761719, 0, 0, 0);
    CreateStreamObject(2146, 1153.1697998047, -1320.1094970703, 1019.1823120117, 0, 0, 275.78564453125);
	
	// Mappage des flics by Xoss [Los Santos STaff]
    CreateStreamObject(3111, 224.35009765625, 110.44974517822, 1004.365234375, 88.799285888672, 91.322326660156, 0, 500);
	CreateStreamObject(2737, 231.77366638184, 112.82554626465, 1003.9851074219, 0, 0, 270.52255249023, 500);
	CreateStreamObject(3851, 221.15110778809, 112.96129608154, 1011.2117919922, 0, 0, 90.39990234375, 500);
	CreateStreamObject(2241, 231.27940368652, 112.03825378418, 1002.7225341797, 0, 0, 0, 500);
	CreateStreamObject(2202, 224.70181274414, 114.50849151611, 1002.2200317383, 0, 0, 89.477447509766, 500);
	CreateStreamObject(2827, 224.64749145508, 110.0749206543, 1003.0390625, 0, 0, 277.65795898438, 500);
	CreateStreamObject(1808, 231.828125, 119.70825195313, 1002.0286254883, 0, 0, 268.67767333984, 500);
	CreateStreamObject(2312, 229.40838623047, 115.7890625, 1004.6156005859, 0, 0, 0, 500);
	CreateStreamObject(2312, 228.38995361328, 115.7890625, 1004.6182861328, 0, 0, 0, 500);
	CreateStreamObject(2312, 229.39886474609, 115.7890625, 1003.8659057617, 0, 0, 0, 500);
	CreateStreamObject(2312, 228.39031982422, 115.7890625, 1003.868347168, 0, 0, 0, 500);
	CreateStreamObject(2312, 227.37983703613, 115.7890625, 1004.6176147461, 0, 0, 0, 500);
	CreateStreamObject(2312, 227.36608886719, 115.7890625, 1003.8788452148, 0, 0, 0, 500);
	CreateStreamObject(2312, 230.4359588623, 115.7890625, 1004.6115112305, 0, 0, 0, 500);
	CreateStreamObject(2312, 230.42462158203, 115.7890625, 1003.8956298828, 0, 0, 0, 500);
	CreateStreamObject(2967, 224.92242431641, 111.12283325195, 1003.0390625, 0, 0, 0, 500);
	CreateStreamObject(2616, 224.31314086914, 113.02542114258, 1004.1157836914, 0, 0, 88.554992675781, 500);
	CreateStreamObject(2611, 231.73016357422, 108.86035919189, 1004.4785766602, 0, 0, 270.52255249023, 500);
	CreateStreamObject(17951, 241.71484375, 74.4208984375, 1005.689453125, 0, 0, 0, 500);
	CreateStreamObject(17951, 226.3564453125, 70.3525390625, 1005.5880737305, 0, 0, 0, 500);
	CreateStreamObject(17951, 226.1318359375, 77.43359375, 1005.5858764648, 0, 0, 0, 500);
	CreateStreamObject(1586, -1587.0610351563, 735.10278320313, -5.90625, 0, 0, 0, 500);
	CreateStreamObject(1586, -1586.544921875, 736.68212890625, -6.3853306770325, 0, 0, 77.485626220703, 500);
	CreateStreamObject(1585, -1566.5135498047, 742.10595703125, -5.90625, 0, 0, 82.097869873047, 500);
	CreateStreamObject(1584, -1573.7746582031, 730.64111328125, -6.2421875, 0, 359.07754516602, 2.767333984375, 500);
	CreateStreamObject(1584, -1578.8070068359, 705.72534179688, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1587.3034667969, 720.43121337891, -5.90625, 0, 0, 0, 500);
	CreateStreamObject(1584, -1578.923828125, 730.19097900391, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1572.8850097656, 716.80908203125, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1583.1193847656, 715.23223876953, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1576.359375, 721.70922851563, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1582.7712402344, 726.20697021484, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1571.9116210938, 721.62811279297, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1576.1885986328, 729.53833007813, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1578.6025390625, 719.37805175781, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1581.2271728516, 725.03607177734, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1586.4392089844, 711.71057128906, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1572.3063964844, 717.84796142578, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1577.7507324219, 726.11541748047, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1581.1495361328, 708.74896240234, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1583, -1580.8795166016, 687.0390625, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1581.2888183594, 717.92535400391, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1574.1298828125, 712.7646484375, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(1584, -1589.9375, 713.2041015625, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(18032, -1578.064453125, 739.375, -4.7175674438477, 0, 0, 89.47265625, 500);
	CreateStreamObject(10832, 232.00843811035, 66.724609375, 1002.5187988281, 0, 0, 90.39990234375, 500);
	CreateStreamObject(14638, 237.09790039063, 66.825698852539, 1004.3340454102, 0, 0, 0, 500);
	CreateStreamObject(17853, -1623.8134765625, 746.94927978516, -0.085443496704102, 270.52255249023, 94.089660644531, 2.767333984375, 500);
	CreateStreamObject(14638, -1619.5858154297, 743.49426269531, -6.2421875, 0, 0, 0, 500);
	CreateStreamObject(5822, 1577.2034912109, -1639.3168945313, 21.226654052734, 0, 0, 275, 500);
	
	// Mappage Eglise by gigise [Los Santos STaff]
	CreateObject(10676, -2081.264, 1094.225, 18.983, 0.0, 0.0, 89.381);
	CreateObject(10676, -1965.052, 1091.448, 18.998, 0.0, 0.0, -88.522);
	CreateStreamObject(5710, -2035.896, 1092.055, 21.414, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(5710, -2021.334, 1074.279, 21.330, 0.0, 0.0, -89.381, 500);
	CreateStreamObject(5710, -2023.422, 1074.527, 24.567, 180.482, 0.0, -87.663, 500);
	CreateStreamObject(5710, -2010.786, 1092.276, 21.418, 0.0, 0.0, 180.482, 500);
	CreateStreamObject(10676, -2024.833984375, 1101.6259765625, 9.6070003509521, 0, 0, 0, 500);
	CreateStreamObject(5710, -2003.884, 1124.533, 22.372, 0.0, 0.0, 2.578, 500);
	CreateStreamObject(5710, -2044.215, 1124.109, 22.372, 0.0, 0.0, 179.622, 500);
	CreateStreamObject(5710, -2024.951, 1145.353, 20.497, 0.0, 0.0, 273.301, 500);
	CreateStreamObject(10676, -2025.564453125, 1132.251953125, 31.499000549316, 180.47790527344, 0, 1.7138671875, 500);
	CreateStreamObject(17950, -2025.184, 1147.850, 19.802, -6.016, 0.0, -177.044, 500);
	CreateStreamObject(616, -2055.353, 1090.207, -2.164, 0.0, 0.0, -7.735, 500);
	CreateStreamObject(616, -1992.35546875, 1092.404296875, -2.3989999294281, 0, 0, 2.5762939453125, 500);
	CreateStreamObject(617, -2039.203, 1124.151, 12.521, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(617, -2009.599, 1123.927, 13.046, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(3406, -2024.755859375, 1139.859375, 14.998000144958, 0, 0, 91.95556640625, 500);
	CreateStreamObject(14535, -2002.932, 1089.430, 19.881, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(2591, -2005.792, 1087.077, 18.070, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(2591, -2007.452, 1088.775, 18.059, 0.0, 0.0, -91.100, 500);
	CreateStreamObject(2591, -2010.355, 1090.212, 18.159, 0.0, 0.0, -274.160, 500);
	CreateStreamObject(2639, -2026.608, 1129.086, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2028.664, 1129.044, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.265, 1129.003, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2026.460, 1125.217, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2028.505, 1125.171, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.316, 1125.076, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2026.407, 1121.527, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2028.439, 1121.477, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.265, 1121.446, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2026.299, 1117.462, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2028.308, 1117.420, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.234, 1117.276, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2026.137, 1114.010, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2028.174, 1113.973, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.392, 1113.952, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2026.029, 1110.293, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2028.039, 1110.233, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.395, 1110.150, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2025.828, 1105.819, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2027.845, 1105.769, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2032.477, 1105.597, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2025.950, 1102.415, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2020.607, 1102.462, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.182, 1106.072, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.068, 1106.128, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.293, 1110.423, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.176, 1110.462, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.494, 1114.056, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.416, 1114.099, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.488, 1117.377, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.359, 1117.439, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.701, 1121.653, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.672, 1121.698, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.795, 1125.266, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.715, 1125.309, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2021.890, 1129.222, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(2639, -2019.839, 1129.284, 17.680, 0.0, 0.0, 181.341, 500);
	CreateStreamObject(949, -2025.626, 1099.546, 18.491, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(949, -2021.007, 1099.579, 18.496, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(3406, -2024.526, 1133.215, 14.998, 0.0, 0.0, 91.960, 500);
	CreateStreamObject(3406, -2024.287, 1126.647, 14.998, 0.0, 0.0, 91.960, 500);
	CreateStreamObject(3406, -2024.092, 1120.099, 14.998, 0.0, 0.0, 91.960, 500);
	CreateStreamObject(3406, -2023.873, 1113.530, 15.003, 0.0, 0.0, 91.960, 500);
	CreateStreamObject(3406, -2023.646, 1107.074, 14.998, 0.0, 0.0, 91.960, 500);
	CreateStreamObject(1841, -2013.758, 1101.719, 21.371, 0.0, 0.0, -42.112, 500);
	CreateStreamObject(1841, -2033.508, 1101.456, 21.313, 0.0, 0.0, -140.088, 500);
	CreateStreamObject(14527, -2024.357, 1125.755, 21.458, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(14527, -2023.682, 1110.281, 21.211, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(14527, -2023.954, 1118.863, 21.359, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(2048, -2032.371, 1100.039, 21.713, 0.0, 0.0, 91.100, 500);
	CreateStreamObject(2048, -2014.370, 1100.264, 21.664, 0.859, -0.859, 270.723, 500);
	CreateStreamObject(626, -2032.645, 1086.687, 19.916, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(626, -2013.396, 1086.476, 19.920, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(936, -2022.400, 1095.251, 17.527, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(936, -2024.281, 1095.263, 17.527, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(936, -2024.247, 1094.204, 17.527, 0.0, 0.0, -178.763, 500);
	CreateStreamObject(936, -2022.370, 1094.223, 17.527, 0.0, 0.0, -179.622, 500);
	CreateStreamObject(936, -2023.282, 1093.588, 17.277, 0.0, 0.0, -178.763, 500);
	CreateStreamObject(936, -2023.265, 1093.137, 16.952, 0.0, 0.0, -178.763, 500);
	CreateStreamObject(1743, -2023.655, 1094.334, 18.020, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(1510, -2023.4091796875, 1095.1845703125, 19.017000198364, 0, 0, 0, 500);
	CreateStreamObject(1667, -2023.043, 1095.203, 19.119, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(1668, -2022.793, 1095.308, 19.197, 0.0, 0.0, 31.799, 500);
	CreateStreamObject(1720, -2025.537, 1097.943, 17.051, 0.0, 0.0, 42.972, 500);
	CreateStreamObject(1720, -2021.614, 1097.964, 17.051, 0.0, 0.0, -42.112, 500);
	CreateStreamObject(1720, -2024.596, 1086.202, 17.051, 0.0, 0.0, -182.201, 500);
	CreateStreamObject(1720, -2023.301, 1086.164, 17.051, 0.0, 0.0, -181.341, 500);
	CreateStreamObject(1720, -2022.044, 1086.137, 17.051, 0.0, 0.0, -179.622, 500);
	CreateStreamObject(2745, -2015.290, 1099.679, 19.087, 0.0, 0.0, -89.381, 500);
	CreateStreamObject(2745, -2031.465, 1099.431, 19.076, 0.0, 0.0, 91.100, 500);
	CreateStreamObject(3462, -2023.001, 1140.864, 18.566, 0.0, 0.0, 68.755, 500);
	CreateStreamObject(3462, -2026.740, 1141.009, 18.566, 0.0, 0.0, 118.602, 500);
	CreateStreamObject(626, -2021.627, 1141.992, 19.101, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(626, -2019.373, 1142.115, 19.101, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(626, -2027.930, 1141.726, 19.101, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(626, -2030.010, 1141.719, 19.101, 0.0, 0.0, 0.0, 500);
	CreateStreamObject(2639, -2020.268, 1140.766, 17.680, 0.0, 0.0, 182.201, 500);
	CreateStreamObject(2639, -2028.983, 1140.265, 17.680, 0.0, 0.0, 182.201, 500);
	CreateStreamObject(1720, -2015.520, 1125.016, 17.051, 0.0, 0.0, -60.161, 500);
	CreateStreamObject(1720, -2015.694, 1123.822, 17.051, 0.0, 0.0, -85.944, 500);
	CreateStreamObject(1720, -2015.4208984375, 1122.462890625, 17.051000595093, 0, 1.7138671875, 220.77026367188, 500);
	CreateStreamObject(1491, -2016.1982421875, 1124.525390625, 16.764999389648, 0, 0, 273.19152832031, 500);
	CreateStreamObject(967, -2015.487, 1123.763, 17.010, 0.0, 0.0, 93.679, 500);
	CreateStreamObject(1497, -2016.280, 1124.456, 15.831, 0.0, 0.0, 2.578, 500);
	CreateStreamObject(15035, -2042.980, 1096.350, 17.845, 0.0, 0.0, 90.241, 500);
	CreateStreamObject(2591, -2038.595, 1100.055, 18.894, 0.0, 0.0, -179.622, 500);
	
	 // mapping commisariat et ville
	CreateStreamObject(3089, 245.79786682129, 127.0859375, 1003.5477294922, 0, 0, 0, 500);
	CreateStreamObject(1257, 1422.0063476563, -1666.38671875, 13.826066970825, 0, 0, 180.74096679688, 500);
	CreateStreamObject(14638, 1779.7033691406, -1663.2318115234, 13.438833236694, 0, 0, 35.80712890625, 500);
	CreateStreamObject(14638, 1773.8138427734, -1654.9702148438, 13.429310798645, 0, 0, 35.80712890625, 500);
	CreateStreamObject(982, 1306.74609375, -1828.7844238281, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1306.7229003906, -1803.0874023438, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1303.1630859375, -1828.6187744141, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1303.1589355469, -1802.8916015625, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1303.1632080078, -1777.2287597656, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1306.708984375, -1777.3126220703, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1306.6997070313, -1751.6284179688, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1303.2098388672, -1751.5358886719, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1303.1938476563, -1725.8807373047, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1306.6817626953, -1725.9200439453, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1306.6236572266, -1700.2271728516, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(982, 1303.1892089844, -1700.0538330078, 13.230429649353, 0, 0, 0, 500);
	CreateStreamObject(946, 2510.9655761719, -1666.1724853516, 14.774486541748, 0, 0, 99.502014160156, 500);
	CreateStreamObject(2114, 2510.3142089844, -1667.0637207031, 12.713551521301, 0, 0, 0, 500);
	CreateStreamObject(1646, 595.72161865234, -1906.30078125, 1.7031517028809, 0, 0, 0, 500);
	CreateStreamObject(1646, 593.99963378906, -1906.134765625, 1.689927816391, 0, 0, 0, 500);
	CreateStreamObject(1646, 592.61151123047, -1906.0458984375, 1.7039606571198, 0, 0, 0, 500);
	CreateStreamObject(1646, 591.32171630859, -1905.9578857422, 1.6785447597504, 0, 0, 0, 500);
	CreateStreamObject(1646, 599.77490234375, -1906.2386474609, 1.8232148885727, 0, 0, 0, 500);
	CreateStreamObject(1646, 600.15948486328, -1909.2521972656, 1.2454466819763, 0, 0, 0, 500);
	CreateStreamObject(1646, 598.11218261719, -1909.3752441406, 1.1669178009033, 0, 0, 0, 500);
	CreateStreamObject(1646, 596.10614013672, -1909.1993408203, 1.1478191614151, 0, 0, 0, 500);
	CreateStreamObject(1646, 594.33892822266, -1909.0067138672, 1.1383436918259, 0, 0, 0, 500);
	CreateStreamObject(1646, 592.82037353516, -1908.8116455078, 1.1461615562439, 0, 0, 0, 500);
	CreateStreamObject(1646, 591.38537597656, -1908.8558349609, 1.1128830909729, 0, 0, 0, 500);
	CreateStreamObject(2606, 246.61318969727, 119.82977294922, 1003.2037353516, 0, 0, 180.36779785156, 500);
	CreateStreamObject(2608, 241.81658935547, 126.9114074707, 1002.9302368164, 0, 0, 0, 500);
	CreateStreamObject(2604, 251.14646911621, 126.69926452637, 1003.015625, 0, 0, 0, 500);
	CreateStreamObject(1714, 245.72868347168, 121.31958770752, 1002.2518310547, 0, 0, 0, 500);
	CreateStreamObject(1714, 247.28877258301, 121.17166137695, 1002.2257080078, 0, 0, 0, 500);
	CreateStreamObject(3430, 1512.6662597656, -1715.2163085938, 14.709887504578, 0, 0, 0, 500);
	CreateStreamObject(3512, 1536.9293212891, -1601.9588623047, 12.546875, 0, 0, 0, 500);
	CreateStreamObject(846, 1234.2413330078, -1375.6604003906, 13.089981079102, 0, 0, 43.042877197266, 500);
	CreateStreamObject(3920, 1221.8968505859, -1415.8671875, 19.792795181274, 0, 0, 0, 500);
	CreateStreamObject(3920, 1172.0325927734, -1323.0971679688, 17.803356170654, 0, 0, 267.81213378906, 500);
	CreateStreamObject(3920, 1416.5756835938, -1702.1450195313, 16.303007125854, 0, 0, 49.100006103516, 500);
	CreateStreamObject(3462, 1736.8896484375, -1267.1607666016, 14.055983543396, 0, 0, 46.848968505859, 500);
	CreateStreamObject(925, 2083.2111816406, -1999.6938476563, 13.616275787354, 0, 0, 0, 500);
	CreateStreamObject(930, 2094.8176269531, -2006.4724121094, 13.030246734619, 0, 0, 0, 500);
	CreateStreamObject(3569, 2077.8679199219, -2032.3641357422, 15.160493850708, 0, 0, 0, 500);
	CreateStreamObject(3576, 2103.3466796875, -1997.0147705078, 14.039547920227, 0, 0, 0, 500);
	CreateStreamObject(3576, 2104.0881347656, -2000.8430175781, 14.039547920227, 0, 0, 0, 500);
	CreateStreamObject(5269, 2095.4838867188, -2014.4677734375, 14.863418579102, 0, 0, 314.14999389648, 500);
	CreateStreamObject(7025, 2089.1220703125, -2025.2900390625, 15.974655151367, 0, 0, 0, 500);
	CreateStreamObject(12927, 2091.0070800781, -1983.3536376953, 12.939613342285, 0, 0, 0, 500);
	CreateStreamObject(3585, 2094.7756347656, -1993.7401123047, 14.176763534546, 0, 0, 0, 500);
	CreateStreamObject(3066, 2076.4626464844, -2015.2629394531, 13.60115146637, 0, 0, 0, 500);
	CreateStreamObject(18257, 2090.7121582031, -2009.6936035156, 12.554370880127, 0, 0, 0, 500);
	CreateStreamObject(9833, 1230.3354492188, -1348.7608642578, 16.352916717529, 0, 0, 0, 500);
	CreateStreamObject(9833, 1230.1737060547, -1319.5852050781, 16.340293884277, 0, 0, 0, 500);
	CreateStreamObject(750, 1231.1264648438, -1334.9473876953, 13.138641357422, 0, 0, 0, 500);
	CreateStreamObject(1342, 1811.8717041016, -1882.498046875, 13.611818313599, 0, 0, 156.13159179688, 500);
	CreateStreamObject(10079, 1781.4478759766, -1880.0043945313, 32.144226074219, 0, 0, 0, 500);
	CreateStreamObject(1694, 1768.6611328125, -1880.9495849609, 34.413719177246, 0, 0, 0, 500);
	CreateStreamObject(2735, 1418.71484375, -1621.43359375, 14.416933059692, 0, 0, 87.957183837891, 500);
	CreateStreamObject(2736, 1418.8009033203, -1623.9927978516, 18.28645324707, 0, 0, 87.957183837891, 500);
	CreateStreamObject(2735, 1418.8173828125, -1626.4285888672, 14.321401596069, 0, 0, 87.957183837891, 500);
	
	// Mapping devant le comi

    CreateStreamObject(997, 1534.6513671875, -1663.7044677734, 12.546875, 0, 0, 0, 500);
    CreateStreamObject(997, 1537.8101806641, -1667.1975097656, 12.546875, 0, 0, 90, 500);
    CreateStreamObject(997, 1537.8173828125, -1670.4814453125, 12.546875, 0, 0, 90, 500);
    CreateStreamObject(997, 1537.8557128906, -1678.2344970703, 12.546875, 0, 0, 90, 500);
    CreateStreamObject(997, 1537.8743896484, -1681.6302490234, 12.546875, 0, 0, 90, 500);
    CreateStreamObject(997, 1537.9284667969, -1681.8432617188, 12.546875, 0, 0, 179.99450683594, 500);
    CreateStreamObject(3876, 1573.0352783203, -1699.2333984375, 27.395587921143, 0, 0, 0, 500);
    CreateStreamObject(1216, 1535.9975585938, -1663.1591796875, 13.238877296448, 0, 0, 182, 500);
    CreateStreamObject(1269, 1538.1149902344, -1670.2935791016, 13.364785194397, 0, 0, 0, 500);
    CreateStreamObject(1291, 1535.4208984375, -1682.544921875, 13.061274528503, 0, 0, 4, 500);
    CreateStreamObject(1215, 1546.7503662109, -1678.7658691406, 14.509635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1550.9809570313, -1672.4731445313, 16.236198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1546.6484375, -1672.50390625, 14.509635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1551.0568847656, -1678.7650146484, 16.236198425293, 0, 0, 0, 500);
    CreateStreamObject(1359, 1546.5350341797, -1679.8162841797, 13.258478164673, 0, 0, 0, 500);
    CreateStreamObject(1280, 1543.1829833984, -1665.0798339844, 12.957312583923, 0, 0, 0, 500);
    CreateStreamObject(1280, 1543.2446289063, -1686.1102294922, 12.955059051514, 0, 0, 0, 500);
    CreateStreamObject(1280, 1543.2529296875, -1693.6843261719, 12.949514389038, 0, 0, 0, 500);
    CreateStreamObject(1280, 1543.2042236328, -1657.5830078125, 12.961547851563, 0, 0, 0, 500);
    CreateStreamObject(1216, 1537.0688476563, -1663.1342773438, 13.238877296448, 0, 0, 181.99951171875, 500);
    CreateStreamObject(10250, 1575.615234375, -1702.3896484375, 61.177959442139, 0, 0, 265.99548339844, 500);
    CreateStreamObject(1682, 1569.9755859375, -1707.5378417969, 33.84903717041, 0, 0, 126, 500);
    CreateStreamObject(1360, 1529.69921875, -1680.5936279297, 13.15483379364, 0, 0, 0, 500);
    CreateStreamObject(1360, 1529.5690917969, -1664.8134765625, 13.15483379364, 0, 0, 0, 500);
    CreateStreamObject(1360, 1529.6580810547, -1651.6722412109, 13.15483379364, 0, 0, 0, 500);
    CreateStreamObject(1360, 1529.6181640625, -1637.6893310547, 13.15483379364, 0, 0, 0, 500);
    CreateStreamObject(1360, 1529.5979003906, -1694.4145507813, 13.15483379364, 0, 0, 0, 500);
    CreateStreamObject(1360, 1529.5948486328, -1708.5074462891, 13.15483379364, 0, 0, 0, 500);

	// Mappage des Crip'z  , Ville by gigise =)

	CreateStreamObject(1415, 2423.1723632813, -1641.4781494141, 12.480152130127, 0, 0, 90, 500)
	CreateStreamObject(12957, 2446.8513183594, -1671.7286676953, 13.371850013733, 0, 0, 0, 500)
    CreateStreamObject(2677, 2424.7087402344, -1641.4991455078, 12.7523393098, 0, 0, 0, 500)
    CreateStreamObject(1430, 2490.9548339844, -1649.3182373047, 12.831289291382, 0, 0, 0, 500)
    CreateStreamObject(2905, 2478.7770996094, -1647.55676226953, 12.565251350403, 0, 0, 0, 500)
    CreateStreamObject(1347, 2434.0954589844, -1644.6678466797, 13.070784568787, 0, 0, 0, 500)
    CreateStreamObject(1550, 2524.5478515625, -1672.783203125, 19.323566436768, 0, 0, 0,  500)
    CreateStreamObject(1550, 2523.7790527344, -1673.4871826172, 19.323566436768, 0, 0, 0, 500)
    CreateStreamObject(2045, 2512.4370117188, -1673.8016357422, 12.592490196228, 0, 0, 0, 500)
    CreateStreamObject(3007, 2422.5625, -1640.208007825, 12.629953384399, 0, 0, 0, 500)
    CreateStreamObject(1439, 2478.9958496094, -1687.7001953125, 12.5078125, 0, 0, 172, 500)
    CreateStreamObject(1441, 2527.48046875, -1664.0013427734, 14.817841529846, 0, 0, 0, 500)
    CreateStreamObject(1575, 2528.2329101563, -1664.7297363281, 14.369148254395, 0, 0, 0, 500)
    CreateStreamObject(1728, 2529.4985351563, -1672.7965087891, 18.930225372314, 0, 0, 0, 500)
    CreateStreamObject(1728, 2533.4985351563, -1675.2978515625, 18.930225372314, 0, 0, 260, 500)
    CreateStreamObject(1729, 2529.1149902344, -1676.4294433594, 18.930225372314, 0, 0, 142, 500)
    CreateStreamObject(2321, 2531.0639648438, -1676.2242431641, 18.930225372314, 0, 4, 100, 500)
    CreateStreamObject(3934, 1548.1071777344, -1644.3726806641, 27.402114868164, 0, 0, 0, 500)
    CreateStreamObject(2957, 1843.2862548828, -1856.1264648438, 14.002597808838, 0, 0, 90, 500)
    CreateStreamObject(10244, 2529.3249511719, -1685.9020996094, 14.706098556519, 0, 0, 356, 500)
    CreateStreamObject(2115, 2523.6125488281, -1677.5201416016, 18.930225372314, 0, 0, 90, 500)
    CreateStreamObject(2044, 2523.6274414063, -1676.2142333984, 19.759511947632, 0, 0, 0, 500)
    CreateStreamObject(2037, 2523.3193359375, -1676.5407714844, 19.8043384552, 0, 0, 0, 500)
    CreateStreamObject(2035, 2523.8410644531, -1677.0495605469, 19.756416320801, 0, 0, 110, 500)
	CreateStreamObject(2034, 2523.58203125, -1677.8005371094, 19.762796401978, 0, 0, 0, 500)
	CreateStreamObject(2115, 2523.6125488281, -1677.5201416016, 18.930225372314, 0, 0, 90, 500)
	CreateStreamObject(1575, 2523.4790039063, -1677.4259033203, 19.759405136108, 2, 0, 94, 500)
    CreateStreamObject(1575, 2523.3989257813, -1677.0593261719, 19.834403991699, 358.34155273438, 34.016204833984, 97.118041992188, 500)
    
    
    // mapping /achetermateriaux by gigise
    
    CreateStreamObject(1516, -91.720458984375, -1575.9234619141, 1.7841559648514, 0, 0, 308, 500)
    CreateStreamObject(2037, -91.29044342041, -1575.9124755859, 2.3895485401154, 0, 0, 0, 500)
    CreateStreamObject(2037, -92.01473236084, -1575.9294433594, 2.3895485401154, 0, 0, 0, 500)
    CreateStreamObject(2037, -91.678802490234, -1575.5576171875, 2.3895485401154, 0, 0, 0, 500)
    CreateStreamObject(2044, -91.670570373535, -1576.2983398438, 2.3447210788727, 0, 0, 0, 500)
    CreateStreamObject(2044, -91.647277832031, -1575.9626464844, 2.3447210788727, 0, 0, 0, 500)
    
    //mapping /acheterdrogue by gigise =)
    
    CreateStreamObject(1516, -70.978843688965, -1573.0654296875, 1.7841559648514, 0, 0, 273.9962, 500)
    CreateStreamObject(1575, -70.66487121582, -1573.0618896484, 2.3196110725403, 0, 0, 0, 500)
    CreateStreamObject(1577, -71.250640869141, -1573.1553955078, 2.3196110725403, 0, 0, 0, 500)
    CreateStreamObject(1580, -70.781700134277, -1573.2814941406, 2.3989040851593, 346.18957519531, 329.01025390625, 83.841003417969, 500)
    CreateStreamObject(1579, -70.961334228516, -1572.8957519531, 2.3696112632751, 0, 30, 94, 500)
    
    //mapping mecano by gigise
    
    CreateStreamObject(14826, 1653.9598388672, -1836.0695800781, 13.309415817261, 0, 0, 58, 500)
    CreateStreamObject(3359, 1655.791015625, -1824.228515625, 12.549916267395, 0, 0, 271.5, 500)
    CreateStreamObject(11393, 1655.9814453125, -1819.72265625, 14.064491271973, 0, 0, 0, 500)
    
    // grille Cosa by gigise
    
    CreateStreamObject(993, 666.03448486328, -1215.4243164063, 17.08224105835, 0, 0, 46, 500)
    CreateStreamObject(993, 666.0341796875, -1215.423828125, 19.382236480713, 0, 0, 46, 500)
    CreateStreamObject(993, 666.0341796875, -1215.423828125, 21.682151794434, 0, 0, 46, 500)
    
    // Mapping station essence by Gigise
    
    CreateStreamObject(978, 1942.1998291016, -1769.3408203125, 13.262097358704, 0, 0, 270, 500)
    CreateStreamObject(978, 1942.2209472656, -1776.7864990234, 13.262097358704, 0, 0, 270, 500)
    CreateStreamObject(979, 1941.0612792969, -1776.6763916016, 13.273032188416, 0, 0, 90, 500)
    CreateStreamObject(979, 1940.951171875, -1769.6968994141, 13.273032188416, 0, 0, 90, 500)
    CreateStreamObject(971, -797.05731201172, 493.01531982422, 1365.9356689453, 0, 0, 88, 500)
    CreateStreamObject(2773, 1496.5672607422, -1585.4654541016, 13.064103126526, 0, 0, 0, 500)
    CreateStreamObject(2773, 1496.5638427734, -1583.5762939453, 13.064103126526, 0, 0, 0, 500)
    CreateStreamObject(2773, 1500.3016357422, -1583.7235107422, 13.064103126526, 0, 0, 0, 500)
    CreateStreamObject(2773, 1500.3125, -1585.6588134766, 13.064103126526, 0, 0, 0, 500)
    
        // Mapping de la station  ( le mapping entre /* */ et les lampes au dessu de la sation )

    CreateStreamObject(984, 1951.7004394531, -1770.9060058594, 13.183554649353, 0, 0, 0, 500);
/*  CreateStreamObject(1215, 1932.9429931641, -1782.4323730469, 19.089338302612, 0, 0, 0, 500);
    CreateStreamObject(1215, 1932.8836669922, -1763.5533447266, 19.089338302612, 0, 0, 0, 500);
    CreateStreamObject(1215, 1950.3775634766, -1782.3796386719, 19.089338302612, 0, 0, 0, 500);
    CreateStreamObject(1215, 1950.3391113281, -1763.4442138672, 19.089338302612, 0, 0, 0, 500); */
    CreateStreamObject(1223, 1949.8406982422, -1761.3493652344, 12.546875, 0, 0, 178, 500);
    CreateStreamObject(1223, 1931.044921875, -1785.8472900391, 12.546875, 0, 0, 0, 500);
    
    //mapping teritoire cryp'z
    
    CreateStreamObject(3657, 2011.6938476563, -1699.3214111328, 13.06508731842, 0, 0, 269, 500)
    CreateStreamObject(3657, 2031.0960693359, -1682.9526367188, 13.06508731842, 0, 0, 180, 500)
    CreateStreamObject(3657, 2062.4069824219, -1682.9899902344, 13.06508731842, 0, 0, 178, 500)
    CreateStreamObject(1710, 2070.9580078125, -1701.333984375, 12.546875, 0, 0, 100, 500)
    CreateStreamObject(2111, 2052.1318359375, -1694.9287109375, 12.944314002991, 0, 0, 0, 500)
    CreateStreamObject(1710, 2050.025390625, -1693.1224365234, 12.554683685303, 0, 0, 1, 500)
    CreateStreamObject(1710, 2050.30078125, -1696.3739013672, 12.554683685303, 0, 0, 115, 500)
    CreateStreamObject(1763, 2051.5241699219, -1696.4346923828, 16.453125, 0, 0, 159, 500)
    CreateStreamObject(1763, 2052.0895996094, -1693.4678955078, 16.453125, 0, 0, 325, 500)
    CreateStreamObject(1763, 2049.4770507813, -1694.3602294922, 16.453125, 0, 0, 54, 500)
    CreateStreamObject(17969, 1948.4593505859, -2042.5910644531, 13.822423934937, 0, 0, 90, 500)
    
    //Tonneau/voiture en feux
    
    CreateStreamObject(1362, 2069.9001464844, -1688.5375976563, 13.153166770935, 0, 0, 0, 500)
    CreateStreamObject(3461, 2069.9360351563, -1688.5224609375, 11.654732704163, 0, 0, 0, 500)
    CreateStreamObject(1362, 2045.8096923828, -1703.0650634766, 13.153166770935, 0, 0, 0, 500)
    CreateStreamObject(3461, 2045.8160400391, -1703.1115722656, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(1362, 1926.4063720703, -2063.0178222656, 13.153166770935, 0, 0, 0, 500)
    CreateStreamObject(3461, 1926.4989013672, -2063.1203613281, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(1362, 1859.7927246094, -2059.8024902344, 13.153166770935, 0, 0, 0, 500)
    CreateStreamObject(3461, 1859.9912109375, -2059.8364257813, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3594, 1906.7861328125, -2046.4455566406, 13.178051948547, 0, 0, 330, 500)
    CreateStreamObject(3461, 1908.0472412109, -2044.6541748047, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 1907.0134277344, -2046.3833007813, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 1906.9014892578, -2047.4044189453, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 1905.3208007813, -2048.5500488281, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3594, 2453.5690917969, -1662.9830322266, 13.168546676636, 0, 0, 0, 500)
    CreateStreamObject(3461, 2453.6752929688, -1661.2540283203, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 2453.9243164063, -1663.0375976563, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 2453.7175292969, -1665.1257324219, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3594, 2442.7834472656, -1653.2189941406, 13.168546676636, 0, 0, 0, 500)
    CreateStreamObject(3461, 2442.6540527344, -1655.6986083984, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 2442.6740722656, -1653.3977050781, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 2442.9458007813, -1650.8997802734, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3594, 1818.5155029297, -2127.6997070313, 13.013989448547, 0, 0, 316, 500)
    CreateStreamObject(3461, 1820.0642089844, -2125.94140625, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(3461, 1818.9265136719, -2127.5109863281, 11.729731559753, 0, 0, 0, 500)
    
    // Bar ms-13
    
    CreateStreamObject(3461, 1817.3044433594, -2129.1481933594, 11.729731559753, 0, 0, 0, 500)
    CreateStreamObject(1510, -228.62623596191, 1411.4421386719, 27.691452026367, 0, 0, 0, 500)
    CreateStreamObject(1510, -228.70225524902, 1409.0688476563, 27.691452026367, 0, 0, 0, 500)
    CreateStreamObject(1510, -224.09690856934, 1404.162109375, 27.741451263428, 0, 0, 0, 500)
    CreateStreamObject(1510, -224.04573059082, 1406.7926025391, 27.741451263428, 0, 0, 0, 500)
    CreateStreamObject(1551, -228.2935333252, 1404.1635742188, 27.931716918945, 0, 0, 0, 500)
    CreateStreamObject(1551, -228.94583129883, 1404.5751953125, 27.931716918945, 0, 0, 0, 500)
    CreateStreamObject(1551, -229.17570495605, 1406.6629638672, 27.931716918945, 0, 0, 0, 500)
    CreateStreamObject(1551, -228.29342651367, 1411.7885742188, 27.781719207764, 358, 95, 100, 500)
    CreateStreamObject(1511, -222.25271606445, 1406.9417724609, 28.186666488647, 0, 0, 0, 500)
    CreateStreamObject(1520, -224.11825561523, 1403.3541259766, 27.806980133057, 0, 0, 0, 500)
    CreateStreamObject(1520, -224.08654785156, 1405.4624023438, 27.806980133057, 0, 0, 0, 500)
    CreateStreamObject(1520, -224.26692199707, 1407.4920654297, 27.806980133057, 0, 0, 0, 500)
    CreateStreamObject(1520, -223.04972839355, 1408.5997314453, 27.806980133057, 0, 0, 0, 500)
    
    //Skoite bar ms-13
    /*
    CreateStreamObject(983, 1937.7467041016, -2024.5426025391, 18.824180603027, 0, 0, 0, 500)
    CreateStreamObject(984, 1937.7298583984, -2014.9361572266, 18.777305603027, 0, 0, 0, 500)
    CreateStreamObject(984, 1944.1314697266, -2008.5544433594, 18.777305603027, 0, 0, 90, 500)
    CreateStreamObject(984, 1950.5360107422, -2014.9189453125, 18.777305603027, 0, 0, 0, 500)
    CreateStreamObject(984, 1950.5164794922, -2023.3209228516, 18.777305603027, 0, 0, 0, 500)
    CreateStreamObject(984, 1944.1063232422, -2029.7574462891, 18.777305603027, 0, 0, 90, 500)
    CreateStreamObject(5820, 1936.1242675781, -2025.8312988281, 14.643049240112, 0, 0, 270, 500)
    CreateStreamObject(1726, 1940.8687744141, -2015.2137451172, 18.140625, 0, 0, 122, 500)
    CreateStreamObject(1726, 1941.5522460938, -2010.4599609375, 18.140625, 0, 0, 0, 500)
    CreateStreamObject(2855, 1944.5032958984, -2010.8907470703, 18.140625, 0, 0, 0, 500)
    CreateStreamObject(1827, 1942.7341308594, -2012.9210205078, 18.140625, 0, 0, 0, 500)
    CreateStreamObject(1543, 1942.7484130859, -2013.0888671875, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1543, 1942.93359375, -2012.40625, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1543, 1942.2827148438, -2012.7777099609, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1543, 1942.0661621094, -2012.9016113281, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1665, 1942.6538085938, -2012.3579101563, 18.601070404053, 0, 0, 0, 500)
    CreateStreamObject(2229, 1946.5274658203, -2010.0797119141, 18.140625, 0, 0, 318, 500)
    CreateStreamObject(2229, 1947.6333007813, -2011.0927734375, 18.140625, 0, 0, 318, 500)
    CreateStreamObject(643, 1946.8636474609, -2017.0433349609, 18.611095428467, 0, 0, 0, 500)
    CreateStreamObject(1728, 1948.2241210938, -2023.5095214844, 18.140625, 0, 0, 283, 500)
    CreateStreamObject(1728, 1946.0939941406, -2027.5819091797, 18.140625, 0, 0, 146, 500)
    CreateStreamObject(1827, 1946.1921386719, -2025.1821289063, 18.140625, 0, 0, 0, 500)
    CreateStreamObject(1543, 1946.3698730469, -2024.9606933594, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1543, 1945.8311767578, -2025.4005126953, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1543, 1946.236328125, -2025.7392578125, 18.590618133545, 0, 0, 0, 500)
    CreateStreamObject(1665, 1946.4821777344, -2025.3310546875, 18.601070404053, 0, 0, 0, 500)
    CreateStreamObject(2229, 1948.1558837891, -2028.8609619141, 18.140625, 0, 0, 233, 500)
    CreateStreamObject(2229, 1949.3983154297, -2027.6286621094, 18.140625, 0, 0, 233, 500)
    CreateStreamObject(3657, 1873.0102539063, -2035.1226806641, 13.06508731842, 0, 0, 88, 500)
    CreateStreamObject(1256, 1930.2327880859, -2076.9406738281, 13.216862678528, 0, 0, 270, 500)
    CreateStreamObject(1256, 1924.8254394531, -2076.8002929688, 13.216862678528, 0, 0, 270, 500)
    CreateStreamObject(1280, 1840.3179931641, -2095.7536621094, 12.948230743408, 0, 0, 88, 500)
    CreateStreamObject(1280, 1800.9357910156, -2123.865234375, 12.948230743408, 0, 0, 282, 500) */
    
    // mapping toilette Bar MS-13
    
    CreateStreamObject(2738, 2227.5270996094, -1110.7290039063, 1050.4857177734, 0, 0, 0, 500)
    CreateStreamObject(2525, 2225.3862304688, -1110.6256103516, 1049.8828125, 0, 0, 0, 500)
    CreateStreamObject(2741, 2226.0434570313, -1114.9583740234, 1051.1475830078, 0, 0, 179, 500)
    CreateStreamObject(2739, 2226.0920410156, -1114.5433349609, 1049.9246826172, 0, 0, 179, 500)
    CreateStreamObject(2739, 2227.0930175781, -1114.5090332031, 1049.8828125, 0, 0, 179, 500)
    CreateStreamObject(1738, 2228.0383300781, -1114.8599853516, 1050.5374755859, 0, 0, 0, 500)
    CreateStreamObject(1738, 2229.0222167969, -1114.8527832031, 1050.5374755859, 0, 0, 0, 500)
    CreateStreamObject(14527, 2228.0183105469, -1113.2718505859, 1050.9152832031, 0, 0, 0, 500)
    
    // mapping Cosa nostra

    CreateStreamObject(1649, 968.49768066406, -53.012203216553, 1001.7829589844, 0, 0, 270, 500)
    CreateStreamObject(1569, 968.47027587891, -53.941493988037, 1000.1245727539, 0, 0, 90, 500)
    CreateStreamObject(2315, 729.2021484375, -1276.4346923828, 16.6484375, 0, 0, 4, 500)
    CreateStreamObject(1723, 731.17327880859, -1278.2337646484, 16.6484375, 0, 0, 182, 500)
    CreateStreamObject(1723, 728.65374755859, -1274.5100097656, 16.6484375, 0, 0, 4, 500)
    CreateStreamObject(1724, 727.42980957031, -1277.0386962891, 16.6484375, 0, 0, 93, 500)
    
    // mapping cosa nostra ( ajout par Jake_tyle )
    /*
    CreateStreamObject(3934, 756.78448486328, -1260.2337646484, 12.565131187439, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.97619628906, -1280.9244384766, 13.198971748352, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.97003173828, -1282.0405273438, 13.199244499207, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.95867919922, -1283.1157226563, 13.199506759644, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.955078125, -1284.1549072266, 13.199760437012, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.94189453125, -1285.1950683594, 13.20001411438, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.93334960938, -1286.2947998047, 13.200283050537, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.93450927734, -1287.3425292969, 13.200538635254, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.93084716797, -1270.1130371094, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.94018554688, -1268.9808349609, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.92980957031, -1268.0290527344, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.94561767578, -1266.9742431641, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.92590332031, -1266.0023193359, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.94421386719, -1264.9873046875, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 672.92553710938, -1271.0023193359, 13.189323425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 737.31701660156, -1253.8006591797, 13.119499206543, 0, 0, 0, 500);
    CreateStreamObject(1215, 753.34442138672, -1253.7886962891, 13.119010925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 753.19750976563, -1222.5388183594, 13.117725372314, 0, 0, 0, 500);
    CreateStreamObject(1215, 737.29248046875, -1222.4914550781, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 758.91064453125, -1222.6358642578, 13.118906021118, 0, 0, 0, 500);
    CreateStreamObject(1215, 774.76605224609, -1222.5559082031, 13.117725372314, 0, 0, 0, 500);
    CreateStreamObject(1215, 774.72943115234, -1253.6680908203, 13.126955032349, 0, 0, 0, 500);
    CreateStreamObject(1215, 758.92150878906, -1253.7418212891, 13.121185302734, 0, 0, 0, 500);
    CreateStreamObject(1215, 774.73413085938, -1265.5184326172, 13.128301620483, 0, 0, 0, 500);
    CreateStreamObject(1215, 758.84375, -1265.3583984375, 13.128851890564, 0, 0, 0, 500);
    CreateStreamObject(1215, 774.76513671875, -1296.6768798828, 13.126823425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 758.96441650391, -1296.6303710938, 13.126823425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 753.20733642578, -1296.6795654297, 13.132490158081, 0, 0, 0, 500);
    CreateStreamObject(1215, 737.32495117188, -1296.7415771484, 13.13165473938, 0, 0, 0, 500);
    CreateStreamObject(1215, 753.21252441406, -1265.2963867188, 13.125539779663, 0, 0, 0, 500);
    CreateStreamObject(1215, 737.27691650391, -1265.3693847656, 13.119010925293, 0, 0, 0, 500);
    CreateStreamObject(10244, 726.142578125, -1299.7761230469, 14.231628417969, 0, 0, 88, 500);
    CreateStreamObject(1472, 722.91479492188, -1295.2850341797, 17.06360244751, 0, 0, 268, 500);
    CreateStreamObject(3461, 720.60485839844, -1299.6104736328, 18.297710418701, 0, 0, 0, 500);
    CreateStreamObject(3461, 724.53466796875, -1299.1932373047, 18.223449707031, 0, 0, 0, 500);
    CreateStreamObject(3461, 724.53729248047, -1254.7829589844, 18.223449707031, 0, 0, 0, 500);
    CreateStreamObject(3461, 728.04626464844, -1259.8823242188, 18.223449707031, 0, 0, 0, 500);
    CreateStreamObject(3528, 733.27014160156, -1276.7611083984, 26.40491104126, 0, 0, 0, 500);
    CreateStreamObject(947, 729.49334716797, -1269.6002197266, 14.756324768066, 0, 0, 270, 500);
    CreateStreamObject(3031, 731.12841796875, -1276.6212158203, 18.252193450928, 0, 0, 0, 500);
    CreateStreamObject(1255, 729.92242431641, -1290.3944091797, 13.141948699951, 0, 0, 0, 500);
    CreateStreamObject(1255, 729.87432861328, -1289.2541503906, 13.141403198242, 0, 0, 0, 500);
    CreateStreamObject(1255, 729.87353515625, -1287.9698486328, 13.140776634216, 0, 0, 0, 500);
    CreateStreamObject(1255, 730.00695800781, -1285.0842285156, 13.13933467865, 0, 0, 0, 500);
    CreateStreamObject(1255, 729.96118164063, -1286.4505615234, 13.140012741089, 0, 0, 0, 500);
    CreateStreamObject(2964, 720.71459960938, -1257.4064941406, 16.6484375, 0, 0, 0, 500);
    CreateStreamObject(2965, 721.27722167969, -1257.3194580078, 17.562694549561, 0, 0, 0, 500);
    CreateStreamObject(3001, 721.47375488281, -1257.5021972656, 17.578386306763, 0, 0, 0, 500);
    CreateStreamObject(3002, 721.47155761719, -1257.4266357422, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3003, 720.17272949219, -1257.3803710938, 17.578784942627, 0, 0, 0, 500);
    CreateStreamObject(3004, 719.75177001953, -1257.8088378906, 17.53412437439, 0, 0, 0, 500);
    CreateStreamObject(3000, 721.47625732422, -1257.3464355469, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(2999, 721.46820068359, -1257.2645263672, 17.578386306763, 0, 0, 0, 500);
    CreateStreamObject(2998, 721.46728515625, -1257.1761474609, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(2997, 721.39685058594, -1257.189453125, 17.578386306763, 0, 0, 0, 500);
    CreateStreamObject(2996, 721.39184570313, -1257.2700195313, 17.578386306763, 0, 0, 0, 500);
    CreateStreamObject(2995, 721.40051269531, -1257.3521728516, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3106, 721.40270996094, -1257.4252929688, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3105, 721.40655517578, -1257.4719238281, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3104, 721.3251953125, -1257.2163085938, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3103, 721.32061767578, -1257.296875, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3102, 721.31610107422, -1257.3764648438, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3101, 721.15032958984, -1257.3189697266, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3100, 721.20178222656, -1257.2811279297, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3105, 721.26062011719, -1257.2379150391, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3104, 721.24249267578, -1257.3157958984, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3103, 721.47186279297, -1257.1083984375, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3102, 721.21197509766, -1257.3640136719, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(3101, 721.34765625, -1257.4285888672, 17.578388214111, 0, 0, 0, 500);
    CreateStreamObject(9833, 778.58514404297, -1299.4812011719, 15.764049530029, 0, 0, 0, 500);
    CreateStreamObject(9833, 741.74664306641, -1300.2362060547, 15.772510528564, 0, 0, 0, 500);
    CreateStreamObject(9833, 778.37432861328, -1268.1800537109, 15.772563934326, 0, 0, 0, 500);
    CreateStreamObject(9833, 733.20690917969, -1266.8570556641, 15.755945205688, 0, 0, 0, 500);
    CreateStreamObject(16151, 718.37481689453, -1291.5793457031, 16.655212402344, 0, 0, 180, 500);
    CreateStreamObject(1488, 717.49475097656, -1290.0183105469, 17.895723342896, 0, 0, 96, 500);
    CreateStreamObject(2108, 718.08306884766, -1295.9401855469, 16.655212402344, 0, 0, 0, 500);
    CreateStreamObject(2108, 717.87609863281, -1286.5908203125, 16.655212402344, 0, 0, 0, 500);
    CreateStreamObject(1645, 718.58117675781, -1261.4411621094, 16.980585098267, 0, 0, 88, 500);
    CreateStreamObject(1646, 718.58905029297, -1263.3477783203, 16.985866546631, 0, 0, 88, 500);
    CreateStreamObject(1647, 718.61724853516, -1259.6911621094, 16.89009475708, 0, 0, 90, 500);
    CreateStreamObject(1255, 718.81396484375, -1265.3734130859, 17.222333908081, 0, 0, 0, 500);
    CreateStreamObject(1215, 728.22204589844, -1292.3427734375, 17.212760925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 728.97100830078, -1279.0653076172, 17.212760925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 733.33728027344, -1279.0081787109, 17.212760925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 732.99066162109, -1273.6395263672, 17.212760925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 728.85656738281, -1273.2365722656, 17.212760925293, 0, 0, 0, 500); */

    // mapping barrage & barriere
    
    CreateStreamObject(3091, 1362.1392822266, -1722.7775878906, 13.184115409851, 0, 0, 179, 500)
    CreateStreamObject(3091, 1357.072265625, -1722.7059326172, 13.213606834412, 0, 0, 179, 500)
    CreateStreamObject(1238, 1359.2183837891, -1723.3225097656, 12.864477157593, 0, 0, 0, 500)
    CreateStreamObject(978, 1359.4063720703, -1721.7312011719, 13.41299533844, 0, 0, 179, 500)
    CreateStreamObject(979, 1580.1730957031, -1757.3869628906, 13.376243591309, 0, 0, 90, 500)
    CreateStreamObject(979, 1580.1374511719, -1751.0360107422, 13.376243591309, 0, 0, 90.5, 500)
    CreateStreamObject(3091, 1579.8634033203, -1759.1639404297, 13.182060241699, 0, 0, 89.5, 500)
    CreateStreamObject(3091, 1579.8737792969, -1754.6401367188, 13.182060241699, 0, 0, 89.25, 500)
    CreateStreamObject(3091, 1579.7080078125, -1749.75390625, 13.182060241699, 0, 0, 90, 500)
    CreateStreamObject(3091, 1399.4373779297, -1449.4958496094, 13.199728965759, 0, 0, 0, 500)
    CreateStreamObject(3091, 1404.5391845703, -1449.5496826172, 13.199728965759, 0, 0, 0, 500)
    CreateStreamObject(979, 1401.8828125, -1450.37890625, 13.437927246094, 0, 0, 0, 500)
    CreateStreamObject(979, 1363.1032714844, -1592.2979736328, 13.312096595764, 0, 0, 344, 500)
    CreateStreamObject(978, 1367.9188232422, -1573.8994140625, 13.287096977234, 0, 0, 163, 500)
    CreateStreamObject(994, 1700.8481445313, -1871.7000732422, 12.558656692505, 0, 0, 90, 500)
    CreateStreamObject(994, 1700.8581542969, -1864.7978515625, 12.558656692505, 0, 0, 90, 500)
    CreateStreamObject(1419, 1700.4467773438, -1847.8828125, 13.087774276733, 0, 0, 90, 500)
    CreateStreamObject(1419, 1700.4736328125, -1846.232421875, 13.087774276733, 0, 0, 90, 500)
    
    /*// mapping San News studio
    
    CreateStreamObject(16775, 1831.6578369141, -1292.5003662109, 108.20129394531, 270.27001953125, 0.000000, 270.27026367188); //
	CreateStreamObject(16775, 1824.9814453125, -1280.3916015625, 108.21611785889, 270.01647949219, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1814.9877929688, -1294.5434570313, 108.15462493896, 270.26916503906, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1831.6174316406, -1277.8989257813, 108.19361877441, 270.26916503906, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1831.0057373047, -1289.7058105469, 108.19387817383, 270.26916503906, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1815.3114013672, -1285.9696044922, 108.15163421631, 270.26916503906, 0.000000, 222.91931152344); //
	CreateStreamObject(16775, 1822.1859130859, -1277.8100585938, 108.16410064697, 270.26916503906, 0.000000, 222.91809082031); //
	CreateStreamObject(16775, 1827.9045410156, -1282.9499511719, 108.20997619629, 270.26916503906, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1831.7154541016, -1306.9925537109, 108.22587585449, 270.26916503906, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1828.0802001953, -1314.814453125, 108.20877075195, 270.26916503906, 0.000000, 180.53918457031); //
	CreateStreamObject(16775, 1827.0626220703, -1303.55078125, 108.19248962402, 270.26916503906, 0.000000, 90.808380126953); //
	CreateStreamObject(16775, 1826.7896728516, -1291.5206298828, 108.17569732666, 270.26916503906, 0.000000, 90.807495117188); //
	CreateStreamObject(16775, 1822.9694824219, -1273.8961181641, 108.16901397705, 270.01647949219, 0.000000, 180.53918457031); //
	CreateStreamObject(16775, 1815.7901611328, -1281.5319824219, 108.15892028809, 270.26916503906, 0.000000, 268.79797363281); //
	CreateStreamObject(16775, 1804.5906982422, -1295.7861328125, 108.11841583252, 270.01647949219, 0.000000, 222.41931152344); //
	CreateStreamObject(16775, 1803.7978515625, -1298.1171875, 108.22132110596, 270.01098632813, 0.000000, 181.5380859375); //
	CreateStreamObject(16775, 1789.2568359375, -1298.9248046875, 108.24791717529, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(16775, 1800.9345703125, -1304.873046875, 108.22339630127, 270.01098632813, 0.000000, 181.5380859375); //
	CreateStreamObject(16775, 1778.021484375, -1298.9581298828, 108.14926147461, 270.01098632813, 0.000000, 0.578125); //
	CreateStreamObject(16775, 1780.1573486328, -1306.7995605469, 108.15173339844, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(16775, 1789.4561767578, -1308.7423095703, 108.2444229126, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(16775, 1804.1586914063, -1308.7709960938, 108.17132568359, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(16775, 1813.7550048828, -1309.5108642578, 108.19836425781, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(16775, 1821.7009277344, -1314.8900146484, 108.21033477783, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(16775, 1797.2592773438, -1304.1932373047, 108.12449645996, 270.01098632813, 0.000000, 0.5767822265625); //
	CreateStreamObject(10154, 1779.9953613281, -1310.8717041016, 111.04299163818, 0.000000, 0.000000, 62.994934082031); //
	CreateStreamObject(10154, 1774.9803466797, -1308.3679199219, 111.0424041748, 0.000000, 0.000000, 62.740112304688); //
	CreateStreamObject(10154, 1773.2219238281, -1307.5588378906, 111.04257202148, 0.000000, 0.000000, 64.240112304688); //
	CreateStreamObject(16775, 1782.0643310547, -1308.1556396484, 108.24640655518, 270.01098632813, 0.000000, 180.03295898438); //
	CreateStreamObject(10154, 1776.6599121094, -1296.2379150391, 111.04026794434, 0.000000, 0.000000, 293.37707519531); //
	CreateStreamObject(10154, 1773.1453857422, -1297.646484375, 111.04002380371, 0.000000, 0.000000, 290.37341308594); //
	CreateStreamObject(10154, 1797.5391845703, -1295.0061035156, 111.03646087646, 0.000000, 0.000000, 273.6787109375); //
	CreateStreamObject(10154, 1814.5915527344, -1273.9152832031, 111.05966949463, 0.000000, 0.000000, 300.66369628906); //
	CreateStreamObject(10154, 1818.4012451172, -1271.6268310547, 111.05913543701, 0.000000, 0.000000, 300.66284179688); //
	CreateStreamObject(10154, 1833.4536132813, -1272.2698974609, 111.09228515625, 0.000000, 0.000000, 219.43298339844); //
	CreateStreamObject(10154, 1833.7133789063, -1315.6802978516, 111.10301208496, 0.000000, 0.000000, 150.35980224609); //
	CreateStreamObject(10154, 1814.3367919922, -1316.0509033203, 111.10092163086, 0.000000, 0.000000, 0.05889892578125); //
	CreateStreamObject(10154, 1811.50390625, -1312.2596435547, 111.08930969238, 0.000000, 0.000000, 90.034942626953); //
	CreateStreamObject(10154, 1808.0966796875, -1312.2475585938, 111.08937072754, 0.000000, 0.000000, 90.282958984375); //
	CreateStreamObject(10154, 1818.6706542969, -1309.0098876953, 111.08882904053, 0.000000, 0.000000, 0.55014038085938); //
	CreateStreamObject(10154, 1815.7103271484, -1305.736328125, 111.08836364746, 0.000000, 0.000000, 90.309326171875); //
	CreateStreamObject(10154, 1810.1129150391, -1305.7386474609, 111.08821868896, 0.000000, 0.000000, 90.3076171875); //
	CreateStreamObject(10154, 1809.2243652344, -1301.7410888672, 111.03759002686, 0.000000, 0.000000, 270.31774902344); //
	CreateStreamObject(10154, 1814.9331054688, -1301.7834472656, 111.04218292236, 0.000000, 0.000000, 270.31311035156); //
	CreateStreamObject(10154, 1818.681640625, -1298.7230224609, 111.06188964844, 0.000000, 0.000000, 0.04296875); //
	CreateStreamObject(10154, 1818.6497802734, -1292.8389892578, 111.0609588623, 0.000000, 0.000000, 0.0384521484375); //
	CreateStreamObject(10154, 1818.6354980469, -1289.8353271484, 111.06289672852, 0.000000, 0.000000, 0.0384521484375); //
	CreateStreamObject(10154, 1821.3082275391, -1311.7657470703, 111.10031890869, 0.000000, 0.000000, 270.05859375); //
	CreateStreamObject(10154, 1824.1643066406, -1308.9323730469, 111.09693908691, 0.000000, 0.000000, 359.78479003906); //
	CreateStreamObject(10154, 1824.1625976563, -1303.3807373047, 111.09638214111, 0.000000, 0.000000, 359.7802734375); //
	CreateStreamObject(10154, 1824.1849365234, -1297.7077636719, 111.09672546387, 0.000000, 0.000000, 359.7802734375); //
	CreateStreamObject(10154, 1824.1945800781, -1292.0317382813, 111.07804870605, 0.000000, 0.000000, 359.78479003906); //
	CreateStreamObject(10154, 1824.1672363281, -1289.8194580078, 111.08254241943, 0.000000, 0.000000, 359.7802734375); //
	CreateStreamObject(10154, 1821.3676757813, -1287.1330566406, 111.10546875, 0.000000, 0.000000, 270.05041503906); //
	CreateStreamObject(10154, 1787.2139892578, -1301.7145996094, 111.03882598877, 0.000000, 0.000000, 270.04943847656); //
	CreateStreamObject(10154, 1787.1547851563, -1305.8884277344, 111.13442993164, 0.000000, 0.000000, 270.04943847656); //
	CreateStreamObject(10154, 1786.4586181641, -1305.8822021484, 111.13445281982, 0.000000, 0.000000, 270.04943847656); //
	CreateStreamObject(10154, 1786.4631347656, -1301.7628173828, 111.03897094727, 0.000000, 0.000000, 270.04943847656); //
	CreateStreamObject(10182, 1789.7125244141, -1303.7277832031, 110.88352966309, 270.98999023438, 0.000000, 0.000000); //
	CreateStreamObject(10182, 1783.6179199219, -1303.7958984375, 109.96111297607, 270.98876953125, 0.000000, 0.000000); //
	CreateStreamObject(10182, 1806.3743896484, -1303.8236083984, 111.00821685791, 277.23876953125, 0.000000, 0.000000); //
	CreateStreamObject(3089, 1818.4946289063, -1300.1333007813, 109.60272216797, 0.000000, 0.000000, 89.775085449219); //
	CreateStreamObject(3089, 1818.4885253906, -1286.9932861328, 109.6033706665, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(2949, 1814.3482666016, -1301.5629882813, 108.30044555664, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(2987, 1818.4869384766, -1290.9274902344, 109.6217956543, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(3089, 1810.4201660156, -1305.8956298828, 109.62920379639, 0.000000, 0.000000, 0.044921875); //
	CreateStreamObject(2970, 1790.0639648438, -1301.6702880859, 108.40110778809, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(1998, 1808.8969726563, -1310.6959228516, 108.30096435547, 0.000000, 0.000000, 270.05017089844); //
	CreateStreamObject(1998, 1811.8663330078, -1311.7288818359, 108.30130767822, 0.000000, 0.000000, 89.509155273438); //
	CreateStreamObject(2008, 1820.9644775391, -1271.0930175781, 108.27089691162, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(2008, 1823.7908935547, -1271.0316162109, 108.27088165283, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(2008, 1826.9135742188, -1271.0096435547, 108.27089691162, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(2008, 1830.0001220703, -1270.9573974609, 108.28954315186, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(2165, 1833.3369140625, -1273.1953125, 108.30432891846, 0.000000, 0.000000, 312.08862304688); //
	CreateStreamObject(2174, 1805.6030273438, -1311.5769042969, 108.34939575195, 0.000000, 0.000000, 180.54052734375); //
	CreateStreamObject(2198, 1795.0006103516, -1305.125, 108.34625244141, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(2198, 1796.0065917969, -1304.1455078125, 108.32572937012, 0.000000, 0.000000, 180.54052734375); //
	CreateStreamObject(2198, 1796.9155273438, -1305.18359375, 108.32593536377, 0.000000, 0.000000, 90.058380126953); //
	CreateStreamObject(2198, 1794.0780029297, -1304.0986328125, 108.35198974609, 0.000000, 0.000000, 270.59509277344); //
	CreateStreamObject(2198, 1800.4304199219, -1305.0477294922, 108.32593536377, 0.000000, 0.000000, 90.398376464844); //
	CreateStreamObject(2198, 1800.3807373047, -1303.0960693359, 108.32554626465, 0.000000, 0.000000, 180.12561035156); //
	CreateStreamObject(2198, 1799.4979248047, -1305.9434814453, 108.32614898682, 0.000000, 0.000000, 0.660888671875); //
	CreateStreamObject(2198, 1805.8410644531, -1302.0386962891, 108.32543182373, 0.000000, 0.000000, 270.92932128906); //
	CreateStreamObject(2198, 1805.8900146484, -1303.9753417969, 108.32578277588, 0.000000, 0.000000, 271.42834472656); //
	CreateStreamObject(2165, 1818.3979492188, -1272.5583496094, 108.27114105225, 0.000000, 0.000000, 29.910003662109); //
	CreateStreamObject(2165, 1816.671875, -1273.8494873047, 108.27150726318, 0.000000, 0.000000, 29.90478515625); //
	CreateStreamObject(2165, 1814.1993408203, -1275.0385742188, 108.25333404541, 0.000000, 0.000000, 29.90478515625); //
	CreateStreamObject(2191, 1790.5236816406, -1305.4456787109, 108.34630584717, 0.000000, 0.000000, 89.730041503906); //
	CreateStreamObject(2191, 1790.5346679688, -1304.0040283203, 108.35208129883, 1.0799560546875, 0.000000, 89.725341796875); //
	CreateStreamObject(2198, 1794.8446044922, -1311.7332763672, 108.34696960449, 0.000000, 0.000000, 179.78497314453); //
	CreateStreamObject(2198, 1796.7072753906, -1311.79296875, 108.3473815918, 0.000000, 0.000000, 178.87841796875); //
	CreateStreamObject(2191, 1803.6226806641, -1311.6968994141, 108.27435302734, 1.07666015625, 0.000000, 180.53576660156); //
	CreateStreamObject(2191, 1802.2559814453, -1311.7165527344, 108.27439880371, 1.0711669921875, 0.000000, 180.53283691406); //
	CreateStreamObject(2200, 1832.35546875, -1270.9711914063, 108.30983734131, 0.000000, 0.000000, 310.15014648438); //
	CreateStreamObject(2200, 1812.1378173828, -1277.1823730469, 108.30014801025, 0.000000, 0.000000, 84.854553222656); //
	CreateStreamObject(2200, 1812.0322265625, -1279.4443359375, 108.29438781738, 0.000000, 0.000000, 88.818969726563); //
	CreateStreamObject(2164, 1835.2027587891, -1274.8254394531, 108.31269073486, 0.000000, 0.000000, 270.26916503906); //
	CreateStreamObject(1998, 1824.4793701172, -1275.0151367188, 108.31845855713, 0.000000, 0.000000, 270.04943847656); //
	CreateStreamObject(1998, 1826.5704345703, -1277.9439697266, 108.31917572021, 0.000000, 0.000000, 89.464111328125); //
	CreateStreamObject(1998, 1828.4278564453, -1276.9351806641, 108.31967163086, 0.000000, 0.000000, 180.27197265625); //
	CreateStreamObject(1998, 1828.568359375, -1276.0329589844, 108.31985473633, 0.000000, 0.000000, 359.72888183594); //
	CreateStreamObject(2193, 1799.6458740234, -1310.7517089844, 108.27410125732, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(2184, 1832.7427978516, -1280.6129150391, 108.34776306152, 0.000000, 0.000000, 244.89038085938); //
	CreateStreamObject(2184, 1835.2927246094, -1279.2529296875, 108.34767913818, 0.000000, 0.000000, 202.50915527344); //
	CreateStreamObject(2184, 1831.7547607422, -1283.3630371094, 108.34799957275, 0.000000, 0.000000, 288.73498535156); //
	CreateStreamObject(2184, 1832.8703613281, -1286.0196533203, 108.34700012207, 0.000000, 0.000000, 328.61157226563); //
	CreateStreamObject(2190, 1832.1877441406, -1282.6232910156, 109.1237411499, 0.000000, 0.000000, 59.820007324219); //
	CreateStreamObject(2190, 1833.2058105469, -1280.6794433594, 109.12350463867, 0.000000, 0.000000, 36.230102539063); //
	CreateStreamObject(2190, 1835.0881347656, -1279.7355957031, 109.12342071533, 0.000000, 0.000000, 355.66027832031); //
	CreateStreamObject(2190, 1832.6303710938, -1284.6540527344, 109.1237411499, 0.000000, 0.000000, 99.695098876953); //
	CreateStreamObject(2190, 1834.2203369141, -1286.5395507813, 109.12274169922, 0.000000, 0.000000, 139.56994628906); //
	CreateStreamObject(1806, 1799.8819580078, -1301.7592773438, 108.32531738281, 0.000000, 0.000000, 180.54052734375); //
	CreateStreamObject(1806, 1804.1184082031, -1302.3890380859, 108.32546234131, 0.000000, 0.000000, 270.26818847656); //
	CreateStreamObject(1806, 1804.2974853516, -1304.4787597656, 108.32585906982, 0.000000, 0.000000, 270.263671875); //
	CreateStreamObject(1806, 1796.1048583984, -1310.0854492188, 108.34720611572, 0.000000, 0.000000, 178.63879394531); //
	CreateStreamObject(1806, 1794.1785888672, -1310.2091064453, 108.34722900391, 0.000000, 0.000000, 178.6376953125); //
	CreateStreamObject(1806, 1795.4580078125, -1302.7543945313, 108.32548522949, 0.000000, 0.000000, 178.6376953125); //
	CreateStreamObject(1806, 1798.0610351563, -1304.7706298828, 108.3258895874, 0.000000, 0.000000, 94.90771484375); //
	CreateStreamObject(2191, 1799.3576660156, -1304.3172607422, 108.32576751709, 0.000000, 0.000000, 269.18518066406); //
	CreateStreamObject(1806, 1795.7451171875, -1306.4871826172, 108.34651184082, 0.000000, 0.000000, 357.19030761719); //
	CreateStreamObject(1806, 1792.6655273438, -1304.6439208984, 108.22694396973, 0.000000, 0.000000, 267.45751953125); //
	CreateStreamObject(1714, 1799.5676269531, -1311.2572021484, 108.34941101074, 0.000000, 0.000000, 43.89501953125); //
	CreateStreamObject(1714, 1833.7690429688, -1283.0885009766, 108.30894470215, 0.000000, 0.000000, 264.35595703125); //
	CreateStreamObject(1715, 1834.9525146484, -1285.1052246094, 108.31504821777, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(1715, 1834.2346191406, -1284.4270019531, 108.31169128418, 0.000000, 0.000000, 290.21020507813); //
	CreateStreamObject(1715, 1834.8051757813, -1280.8291015625, 108.31139373779, 0.000000, 0.000000, 130.68957519531); //
	CreateStreamObject(1715, 1833.9914550781, -1281.9312744141, 108.3072052002, 0.000000, 0.000000, 220.41821289063); //
	CreateStreamObject(1998, 1818.8892822266, -1286.4990234375, 108.2759552002, 0.000000, 0.000000, 359.77917480469); //
	CreateStreamObject(1998, 1822.7469482422, -1285.4670410156, 108.31790161133, 0.000000, 0.000000, 268.96447753906); //
	CreateStreamObject(1806, 1814.9371337891, -1275.8375244141, 108.25687408447, 0.000000, 0.000000, 300.18017578125); //
	CreateStreamObject(1806, 1817.5872802734, -1274.2839355469, 108.27163696289, 0.000000, 0.000000, 29.909423828125); //
	CreateStreamObject(1806, 1819.4664306641, -1273.4084472656, 108.27138519287, 0.000000, 0.000000, 29.90478515625); //
	CreateStreamObject(1806, 1821.3833007813, -1272.2105712891, 108.27104949951, 0.000000, 0.000000, 340.05480957031); //
	CreateStreamObject(1806, 1824.76171875, -1272.1311035156, 108.27103424072, 0.000000, 0.000000, 39.874298095703); //
	CreateStreamObject(1806, 1827.7153320313, -1271.3917236328, 108.27795410156, 0.000000, 0.000000, 359.98937988281); //
	CreateStreamObject(1806, 1830.9072265625, -1271.9895019531, 108.29293823242, 0.000000, 0.000000, 359.98901367188); //
	CreateStreamObject(1715, 1833.0139160156, -1274.4158935547, 108.30278015137, 0.000000, 0.000000, 130.68786621094); //
	CreateStreamObject(2639, 1771.0845947266, -1304.8057861328, 108.88157653809, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(2639, 1771.0732421875, -1302.6971435547, 108.87874603271, 0.000000, 0.000000, 270.26916503906); //
	CreateStreamObject(2639, 1771.0875244141, -1300.5611572266, 108.87915039063, 0.000000, 0.000000, 270.26916503906); //
	CreateStreamObject(2639, 1771.8883056641, -1299.1260986328, 108.87944793701, 0.000000, 0.000000, 216.404296875); //
	CreateStreamObject(2639, 1772.0008544922, -1306.2894287109, 108.90103149414, 0.000000, 0.000000, 322.10302734375); //
	CreateStreamObject(2286, 1833.7266845703, -1272.6798095703, 111.13148498535, 0.000000, 0.000000, 309.35009765625); //
	CreateStreamObject(3675, 1815.8020019531, -1279.0661621094, 111.06871032715, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1829.3171386719, -1279.0791015625, 111.02450561523, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1829.2473144531, -1294.1848144531, 111.09857177734, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1829.2573242188, -1313.8342285156, 111.09783935547, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1815.0546875, -1313.861328125, 111.04383087158, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1778.5787353516, -1306.0842285156, 111.1795501709, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1778.5321044922, -1298.8592529297, 111.15787506104, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3675, 1811.0856933594, -1292.51953125, 110.99499511719, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3813, 1823.2321777344, -1286.9951171875, 112.38264465332, 0.000000, 0.000000, 89.730041503906); //
	CreateStreamObject(3638, 1827.8851318359, -1303.8666992188, 134.06484985352, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3638, 1826.9493408203, -1282.0211181641, 134.06367492676, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(14867, 1835.134765625, -1291.63671875, 109.8483581543, 0.000000, 0.000000, 89.725341796875); //
	CreateStreamObject(14867, 1835.10546875, -1299.484375, 109.84948730469, 0.000000, 0.000000, 89.725341796875); //
	CreateStreamObject(14867, 1835.0615234375, -1307.3793945313, 109.87240600586, 0.000000, 0.000000, 89.725341796875); //
	CreateStreamObject(2762, 1773.3078613281, -1300.6221923828, 108.75663757324, 0.000000, 0.000000, 69.789978027344); //
	CreateStreamObject(2762, 1772.8577880859, -1302.8597412109, 108.78372955322, 0.000000, 0.000000, 89.725158691406); //
	CreateStreamObject(2762, 1773.7790527344, -1305.2377929688, 108.75914001465, 0.000000, 0.000000, 129.59985351563); //
	CreateStreamObject(1209, 1824.4956054688, -1291.3590087891, 108.28946685791, 0.000000, 0.000000, 89.730041503906); //
	CreateStreamObject(1775, 1824.2510986328, -1287.6140136719, 109.41539764404, 0.000000, 0.000000, 90.810546875); //
	CreateStreamObject(1776, 1818.4943847656, -1289.1909179688, 109.37313842773, 0.000000, 0.000000, 269.19006347656); //
	CreateStreamObject(1776, 1818.5712890625, -1292.4484863281, 109.37307739258, 0.000000, 0.000000, 269.18701171875); //
	CreateStreamObject(1808, 1805.2062988281, -1300.5187988281, 108.2493057251, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(1808, 1828.6296386719, -1279.947265625, 108.31986236572, 0.000000, 0.000000, 270.26916503906); //
	CreateStreamObject(626, 1818.4066162109, -1300.8504638672, 110.32167053223, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1820.1304931641, -1271.3511962891, 110.31939697266, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1835.1385498047, -1277.8443603516, 110.35552978516, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1806.2231445313, -1301.0946044922, 110.37381744385, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1818.5047607422, -1306.3765869141, 110.34888458252, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1815.1099853516, -1318.4714355469, 110.36214447021, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1834.6520996094, -1312.5336914063, 110.39067840576, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(2290, 1801.134765625, -1294.7153320313, 108.24817657471, 0.000000, 0.000000, 43.850006103516); //
	CreateStreamObject(2290, 1803.2822265625, -1292.6455078125, 108.22001647949, 0.000000, 0.000000, 43.840942382813); //
	CreateStreamObject(2290, 1805.4270019531, -1290.5465087891, 108.21999359131, 0.000000, 0.000000, 43.846435546875); //
	CreateStreamObject(2290, 1807.6057128906, -1288.4560546875, 108.21997070313, 0.000000, 0.000000, 43.846435546875); //
	CreateStreamObject(2290, 1809.7619628906, -1286.3507080078, 108.2377166748, 0.000000, 0.000000, 43.846435546875); //
	CreateStreamObject(2714, 1787.2199707031, -1301.5341796875, 111.25981140137, 0.000000, 0.000000, 179.76037597656); //
	CreateStreamObject(2714, 1818.4418945313, -1294.3104248047, 111.56116485596, 0.000000, 0.000000, 270.23815917969); //
	CreateStreamObject(1715, 1812.2749023438, -1310.7935791016, 108.30113220215, 0.000000, 0.000000, 270.26306152344); //
	CreateStreamObject(1715, 1809.1390380859, -1311.8416748047, 108.3013381958, 0.000000, 0.000000, 140.64837646484); //
	CreateStreamObject(1806, 1800.0397949219, -1306.9061279297, 108.3263092041, 0.000000, 0.000000, 3.1903991699219); //
	CreateStreamObject(3856, 1819.9454345703, -1298.4807128906, 108.72267913818, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3856, 1814.2473144531, -1302.8548583984, 108.69466400146, 0.000000, 0.000000, 270.27026367188); //
	CreateStreamObject(3856, 1814.6778564453, -1304.6708984375, 108.56468963623, 0.000000, 0.000000, 90.809234619141); //
	CreateStreamObject(1295, 1823.5913085938, -1308.9985351563, 108.09999084473, 0.000000, 0.000000, 280.240234375); //
	CreateStreamObject(1295, 1823.951171875, -1304.92578125, 108.07448577881, 0.000000, 0.000000, 280.2392578125); //
	CreateStreamObject(1295, 1823.51953125, -1299.5153808594, 108.19914245605, 0.000000, 0.000000, 280.2392578125); //
	CreateStreamObject(1295, 1823.8540039063, -1292.6912841797, 108.20667266846, 0.000000, 0.000000, 280.2392578125); //
	CreateStreamObject(1295, 1823.2795410156, -1287.3070068359, 108.28594207764, 0.000000, 0.000000, 280.2392578125); //
	CreateStreamObject(14867, 1790.8707275391, -1295.4964599609, 109.7794342041, 0.000000, 0.000000, 180.73254394531); //
	CreateStreamObject(2290, 1831.6298828125, -1317.4188232422, 108.32710266113, 0.000000, 0.000000, 191.36645507813); //
	CreateStreamObject(2290, 1828.333984375, -1317.8251953125, 108.32674407959, 0.000000, 0.000000, 179.45617675781); //
	CreateStreamObject(2290, 1825.0100097656, -1317.8106689453, 108.32640075684, 0.000000, 0.000000, 179.45617675781); //
	CreateStreamObject(2290, 1821.4481201172, -1317.8188476563, 108.32643890381, 0.000000, 0.000000, 179.45617675781); //
	CreateStreamObject(2290, 1817.8234863281, -1317.869140625, 108.31346893311, 0.000000, 0.000000, 157.62133789063); //
	CreateStreamObject(1998, 1818.5113525391, -1276.8107910156, 108.27376556396, 0.000000, 0.000000, 270.04943847656); //
	CreateStreamObject(1998, 1820.5944824219, -1279.7720947266, 108.26828765869, 0.000000, 0.000000, 89.509155273438); //
	CreateStreamObject(1998, 1822.5023193359, -1278.7590332031, 108.26784515381, 0.000000, 0.000000, 180.31591796875); //
	CreateStreamObject(1998, 1822.6232910156, -1278.9754638672, 108.2552947998, 0.000000, 0.000000, 0.85333251953125); //
	CreateStreamObject(1806, 1821.705078125, -1278.4384765625, 108.31755065918, 0.000000, 0.000000, 180.53448486328); //
	CreateStreamObject(1806, 1820.7373046875, -1278.5690917969, 108.26460266113, 0.000000, 0.000000, 80.832885742188); //
	CreateStreamObject(1806, 1818.294921875, -1277.6647949219, 108.27282714844, 0.000000, 0.000000, 270.26220703125); //
	CreateStreamObject(1806, 1823.412109375, -1279.4196777344, 108.31811523438, 0.000000, 0.000000, 340.04797363281); //
	CreateStreamObject(1253, 1834.5859375, -1273.6467285156, 109.68168640137, 0.000000, 0.000000, 310.15014648438); //
	CreateStreamObject(14867, 1788.673828125, -1312.2421875, 109.87732696533, 0.000000, 0.000000, 358.20373535156); //
	CreateStreamObject(626, 1784.0765380859, -1312.2421875, 110.39812469482, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1771.1489257813, -1298.8978271484, 110.30042266846, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(626, 1771.0830078125, -1306.1574707031, 110.39697265625, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(16775, 1775.3745117188, -1303.2487792969, 108.15030670166, 270.01098632813, 0.000000, 269.80786132813); //
	CreateStreamObject(2484, 1832.5264892578, -1271.4943847656, 111.04307556152, 0.000000, 0.000000, 132.11004638672); //
	CreateStreamObject(1210, 1830.2049560547, -1270.5642089844, 109.25048065186, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(333, 1770.712890625, -1295.11328125, 109.95291137695, 0.000000, 0.000000, 230.38879394531); //
	CreateStreamObject(16779, 1833.1007080078, -1274.8698730469, 113.37551879883, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(16779, 1800.8830566406, -1305.060546875, 113.32749176025, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(3077, 1783.47265625, -1303.7685546875, 108.00370788574, 0.000000, 0.000000, 269.5166015625); //
	CreateStreamObject(2611, 1783.455078125, -1302.9765625, 110.45310974121, 0.000000, 0.000000, 269.76928710938); //
	CreateStreamObject(2612, 1783.4267578125, -1304.8160400391, 110.46527099609, 0.000000, 0.000000, 269.77026367188); //
	CreateStreamObject(1622, 1777.3486328125, -1296.6689453125, 112.93789672852, 350.0299987793, 310.14999389648, 79.760009765625); //
	CreateStreamObject(14559, 1790.5986328125, -1303.91796875, 134.3274230957, 0.999755859375, 359.24743652344, 0.000000); //
	CreateStreamObject(1806, 1823.9636230469, -1276.021484375, 108.31830596924, 0.000000, 0.000000, 271.34191894531); //
	CreateStreamObject(1806, 1827.8179931641, -1276.8458251953, 108.31959533691, 0.000000, 0.000000, 141.73040771484); //
	CreateStreamObject(1806, 1826.6505126953, -1277.2274169922, 108.31920623779, 0.000000, 0.000000, 71.939147949219); //
	CreateStreamObject(1806, 1829.5126953125, -1276.6032714844, 108.32019805908, 0.000000, 0.000000, 352.17846679688); //
	CreateStreamObject(14559, 1824.1937255859, -1302.7399902344, 134.24127197266, 359.49975585938, 359.24743652344, 0.000000); //
	CreateStreamObject(10250, 1787.2492675781, -1312.0874023438, 164.51635742188, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(10250, 1788.5510253906, -1297.5087890625, 164.51635742188, 0.000000, 0.000000, 179.4599609375); //
	CreateStreamObject(1329, 1812.3358154297, -1280.4057617188, 108.69774627686, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(1329, 1783.2725830078, -1301.6724853516, 108.80360412598, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(14867, 1829.3190917969, -1299.6320800781, 109.84586334229, 0.000000, 0.000000, 89.725341796875); //
	CreateStreamObject(14867, 1830.1872558594, -1299.6096191406, 109.85025787354, 0.000000, 0.000000, 270.26550292969); //
	CreateStreamObject(14867, 1829.2862548828, -1307.4948730469, 109.84643554688, 0.000000, 0.000000, 89.725341796875); //
	CreateStreamObject(14867, 1830.1478271484, -1307.4798583984, 109.85250091553, 0.000000, 0.000000, 269.18518066406); //
	CreateStreamObject(14867, 1824.3802490234, -1295.9045410156, 109.8204498291, 0.000000, 0.000000, 270.26550292969); //
	CreateStreamObject(14867, 1824.4598388672, -1302.2188720703, 109.83835601807, 0.000000, 0.000000, 270.263671875); //
	CreateStreamObject(14867, 1824.4245605469, -1307.8193359375, 109.8581161499, 0.000000, 0.000000, 270.263671875); //
	CreateStreamObject(14867, 1835.1293945313, -1291.8541259766, 109.85739898682, 0.000000, 0.000000, 269.75048828125); //
	CreateStreamObject(14867, 1835.0782470703, -1299.6475830078, 109.82306671143, 0.000000, 0.000000, 269.74731445313); //
	CreateStreamObject(14867, 1835.0970458984, -1307.3715820313, 109.85849761963, 0.000000, 0.000000, 269.74731445313); //
	CreateStreamObject(14867, 1788.5983886719, -1312.2233886719, 109.8791809082, 0.000000, 0.000000, 176.75921630859); //
	CreateStreamObject(14867, 1790.8560791016, -1295.4543457031, 109.82639312744, 0.000000, 0.000000, 0.1925048828125); //
	CreateStreamObject(2290, 1780.3692626953, -1295.8747558594, 108.2523727417, 0.000000, 0.000000, 3.9609375); //
	CreateStreamObject(2290, 1783.3980712891, -1295.6907958984, 108.24983215332, 0.000000, 0.000000, 3.9605712890625); //
	CreateStreamObject(16775, 1831.6353759766, -1293.4937744141, 113.44908905029, 270.01647949219, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1827.6337890625, -1291.4034423828, 113.49663543701, 270.01647949219, 0.000000, 270.26916503906); //
	CreateStreamObject(16775, 1831.7036132813, -1303.9020996094, 113.41106414795, 270.01647949219, 0.000000, 270.26916503906); //
	CreateStreamObject(2200, 1812.4462890625, -1279.4565429688, 110.15272521973, 180.53997802734, 0.000000, 88.818969726563); //
	CreateStreamObject(2200, 1812.4764404297, -1277.2501220703, 110.16450500488, 180.53833007813, 0.000000, 88.8134765625); //
	CreateStreamObject(2200, 1835.1849365234, -1275.5916748047, 108.26461029053, 1.0783081054688, 0.000000, 88.8134765625); //
	CreateStreamObject(16779, 1825.6729736328, -1315.7103271484, 113.37209320068, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(16779, 1774.2003173828, -1303.0173339844, 113.36086273193, 0.000000, 0.000000, 0.000000); //
	CreateStreamObject(1893, 1823.5124511719, -1275.0375976563, 112.83686828613, 0.000000, 180.53997802734, 89.72998046875); //
	CreateStreamObject(1893, 1832.7545166016, -1306.025390625, 112.8265914917, 0.000000, 180.53833007813, 89.725341796875); //
	CreateStreamObject(1893, 1821.1450195313, -1314.8754882813, 112.93193054199, 180.53997802734, 0.000000, 0.000000); //
	CreateStreamObject(1893, 1798.3685302734, -1304.3140869141, 112.87136077881, 180.53833007813, 0.000000, 89.730041503906); //
	CreateStreamObject(1893, 1776.3518066406, -1304.3277587891, 112.82328033447, 180.53283691406, 0.000000, 89.725341796875); //
	CreateStreamObject(1893, 1809.451171875, -1296.5412597656, 112.84867858887, 180.53283691406, 0.000000, 89.725341796875);*/ //
	
	//Mapping QG Russes
	
   /* CreateStreamObject(3749, 1284.9958496094, -2056.5515136719, 63.764671325684, 0, 0, 90, 500)
    CreateStreamObject(8657, 1267.4287109375, -2065.1989746094, 58.98165512085, 0, 0, 268, 500)
    CreateStreamObject(8657, 1253.369140625, -2064.7546386719, 58.98165512085, 0, 0, 268.24499511719, 500)
    CreateStreamObject(8657, 1283.5537109375, -2031.2818603516, 58.999588012695, 0, 0, 0, 500)
    CreateStreamObject(8657, 1283.5666503906, -2018.6779785156, 58.994430541992, 0, 0, 0, 500)
    CreateStreamObject(8657, 1268.4979248047, -2003.2421875, 58.796264648438, 0.75, 0, 268, 500)
    CreateStreamObject(8657, 1252.7698974609, -2002.6826171875, 59.071281433105, 359, 0, 267.9949, 500)
    CreateStreamObject(3934, 1116.3331298828, -2019.1229248047, 73.426979064941, 0, 0, 0, 500) */
    
    CreateStreamObject(3749, 1284.9951171875, -2056.55078125, 63.764671325684, 0, 0, 90, 500);
    CreateStreamObject(8657, 1246.494140625, -2002.4658203125, 58.999588012695, 0, 0, 267.99499511719, 500);
    CreateStreamObject(8657, 1268.4979248047, -2003.2421875, 58.999588012695, 0, 0, 268, 500);
    CreateStreamObject(8657, 1283.5666503906, -2018.7779541016, 58.999588012695, 0, 0, 0, 500);
    CreateStreamObject(8657, 1283.5666503906, -2031.2818603516, 58.999588012695, 0, 0, 0, 500);
    CreateStreamObject(8657, 1253.369140625, -2064.7045898438, 58.98165512085, 0, 0, 268, 500);
    CreateStreamObject(8657, 1267.4287109375, -2065.1989746094, 58.98165512085, 0, 0, 268, 500);
    CreateStreamObject(987, 1270.9228515625, -2065.603515625, 60.169696807861, 0, 0, 358, 500);
    CreateStreamObject(987, 1258.9791259766, -2065.1877441406, 60.169696807861, 0, 0, 357.99499511719, 500);
    CreateStreamObject(987, 1246.9912109375, -2064.7734375, 60.169696807861, 0, 0, 357.99499511719, 500);
    CreateStreamObject(987, 1238.0141601563, -2064.4514160156, 60.169696807861, 0, 0, 358, 500);
    CreateStreamObject(988, 1238.09765625, -2067.1479492188, 62.242450714111, 0, 0, 90, 500);
    CreateStreamObject(988, 1238.09765625, -2067.1479492188, 58.8515625, 0, 0, 90, 500);
    CreateStreamObject(987, 1217.1282958984, -2069.8908691406, 64.222328186035, 0, 0, 0, 500);
    CreateStreamObject(987, 1226.0694580078, -2069.8908691406, 60.059509277344, 0, 0, 0, 500);
    CreateStreamObject(987, 1211.1490478516, -2069.8908691406, 67.9453125, 0, 0, 0, 500);
    CreateStreamObject(987, 1199.1868896484, -2069.8908691406, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1187.2388916016, -2069.8908691406, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1175.3172607422, -2069.8908691406, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1163.3463134766, -2069.8908691406, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1151.3883056641, -2069.8908691406, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1139.3912353516, -2069.8908691406, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1139.2651367188, -2081.8247070313, 68.0078125, 0, 0, 90, 500);
    CreateStreamObject(3749, 1133.1754150391, -2080.4938964844, 73.866226196289, 0, 0, 0, 500);
    CreateStreamObject(987, 1112.1350097656, -2080.1247558594, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1103.7275390625, -2080.1247558594, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1103.8275146484, -2068.1918945313, 68.0078125, 0, 0, 270, 500);
    CreateStreamObject(987, 1103.8275146484, -2056.3427734375, 68.0078125, 0, 0, 270, 500);
    CreateStreamObject(987, 1103.8275146484, -2049.7126464844, 68.0078125, 0, 0, 270, 500);
    CreateStreamObject(987, 1091.7906494141, -2049.6394042969, 68.0078125, 0, 0, 0, 500);
    CreateStreamObject(987, 1283.6488037109, -2046.392578125, 60.187629699707, 0, 0, 90, 500);
    CreateStreamObject(987, 1283.6488037109, -2034.5086669922, 60.187629699707, 0, 0, 90, 500);
    CreateStreamObject(987, 1283.6488037109, -2022.5139160156, 60.187629699707, 0, 0, 90, 500);
    CreateStreamObject(987, 1283.6488037109, -2015.5245361328, 60.187629699707, 0, 0, 90, 500);
    CreateStreamObject(987, 1283.6293945313, -2003.6452636719, 60.187629699707, 0, 0, 178, 500);
    CreateStreamObject(987, 1271.7215576172, -2003.1452636719, 60.143321990967, 0, 0, 178, 500);
    CreateStreamObject(987, 1247.90234375, -2002.2944335938, 60.187629699707, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1224.0247802734, -2002.2944335938, 67.054336547852, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1236.0003662109, -2002.2944335938, 60.953125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1230.0025634766, -2002.2944335938, 64.02806854248, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1259.7945556641, -2002.7064208984, 60.187629699707, 0, 0, 178, 500);
    CreateStreamObject(987, 1212.078125, -2002.2944335938, 68.000610351563, 0, 0, 180, 500);
    CreateStreamObject(987, 1200.1715087891, -2002.2944335938, 68.0078125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1188.2082519531, -2002.2944335938, 68.0078125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1176.2939453125, -2002.2944335938, 68.0078125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1164.3551025391, -2002.2944335938, 68.0078125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1152.4088134766, -2002.2944335938, 68.0078125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1140.4868164063, -2002.3522949219, 68.0078125, 0, 0, 135, 500);
    CreateStreamObject(987, 1132.0427246094, -1993.9095458984, 68.0078125, 0, 0, 180, 500);
    CreateStreamObject(987, 1120.0932617188, -1993.9095458984, 68.0078125, 0, 0, 179.99450683594, 500);
    CreateStreamObject(987, 1115.5650634766, -1993.9095458984, 68.0078125, 0, 0, 180, 500);
    CreateStreamObject(987, 1103.7219238281, -1993.806640625, 68.0078125, 0, 0, 270, 500);
    CreateStreamObject(987, 1103.7219238281, -2005.6025390625, 68.0078125, 0, 0, 270, 500);
    CreateStreamObject(987, 1103.7219238281, -2012.6287841797, 68.0078125, 0, 0, 270, 500);
    CreateStreamObject(987, 1103.6622314453, -2024.6812744141, 68.0078125, 0, 0, 180, 500);
    CreateStreamObject(980, 1133.1146240234, -2079.9057617188, 70.781204223633, 0, 0, 0, 500);
    CreateStreamObject(1215, 1240.9841308594, -1918.2095947266, 30.87230682373, 0, 0, 0, 500);
    CreateStreamObject(1215, 1240.5203857422, -1926.1251220703, 30.945859909058, 0, 0, 0, 500);
    CreateStreamObject(1215, 1223.4906005859, -1925.18359375, 31.131286621094, 0, 0, 0, 500);
    CreateStreamObject(1215, 1225.6239013672, -1932.5777587891, 30.324871063232, 0, 0, 0, 500);
    CreateStreamObject(1215, 1184.4484863281, -1932.2075195313, 36.752685546875, 0, 0, 0, 500);
    CreateStreamObject(1215, 1185.5240478516, -1940.9759521484, 35.803653717041, 0, 0, 0, 500);
    CreateStreamObject(1215, 1142.6690673828, -1933.3743896484, 43.818920135498, 0, 0, 0, 500);
    CreateStreamObject(1215, 1142.1389160156, -1942.1003417969, 42.039131164551, 0, 0, 0, 500);
    CreateStreamObject(1215, 1115.4656982422, -1945.9301757813, 42.397327423096, 0, 0, 0, 500);
    CreateStreamObject(1215, 1112.6461181641, -1937.5854492188, 43.184661865234, 0, 0, 0, 500);
    CreateStreamObject(1215, 1101.4655761719, -1963.5454101563, 44.747062683105, 0, 0, 0, 500);
    CreateStreamObject(1215, 1094.3541259766, -1962.5870361328, 44.888919830322, 0, 0, 0, 500);
    CreateStreamObject(1215, 1098.6447753906, -1984.1320800781, 46.721111297607, 0, 0, 0, 500);
    CreateStreamObject(1215, 1090.2670898438, -1982.1107177734, 46.729480743408, 0, 0, 0, 500);
    CreateStreamObject(1215, 1087.6011962891, -2009.0728759766, 49.786396026611, 0, 0, 0, 500);
    CreateStreamObject(1215, 1079.9541015625, -2005.2890625, 49.564205169678, 0, 0, 0, 500);
    CreateStreamObject(1215, 1072.2867431641, -2025.8087158203, 52.026298522949, 0, 0, 0, 500);
    CreateStreamObject(1215, 1079.6459960938, -2028.3502197266, 52.018859863281, 0, 0, 0, 500);
    CreateStreamObject(1215, 1071.7126464844, -2049.3195800781, 53.540344238281, 0, 0, 0, 500);
    CreateStreamObject(1215, 1080.6553955078, -2047.791015625, 53.243232727051, 0, 0, 0, 500);
    CreateStreamObject(1215, 1079.7786865234, -2069.0068359375, 58.402214050293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1086.9116210938, -2065.8088378906, 57.03157043457, 0, 0, 0, 500);
    CreateStreamObject(1215, 1083.513671875, -2088.1052246094, 62.44917678833, 0, 0, 0, 500);
    CreateStreamObject(1215, 1090.6171875, -2084.0773925781, 60.651996612549, 0, 0, 0, 500);
    CreateStreamObject(1215, 1087.5642089844, -2108.8811035156, 65.446342468262, 0, 0, 0, 500);
    CreateStreamObject(1215, 1095.4359130859, -2108.3957519531, 65.03833770752, 0, 0, 0, 500);
    CreateStreamObject(1215, 1100.1795654297, -2138.7824707031, 68.167686462402, 0, 0, 0, 500);
    CreateStreamObject(1215, 1105.9611816406, -2132.8005371094, 67.179206848145, 0, 0, 0, 500);
    CreateStreamObject(1215, 1123.3724365234, -2142.2221679688, 70.285034179688, 0, 0, 0, 500);
    CreateStreamObject(1215, 1123.9729003906, -2147.5744628906, 70.349906921387, 0, 0, 0, 500);
    CreateStreamObject(1215, 1144.89453125, -2145.8083496094, 67.945709228516, 0, 0, 0, 500);
    CreateStreamObject(1215, 1143.3084716797, -2136.5178222656, 68.29744720459, 0, 0, 0, 500);
    CreateStreamObject(1215, 1162.0861816406, -2142.8022460938, 68.348686218262, 0, 0, 0, 500);
    CreateStreamObject(1215, 1160.501953125, -2133.3728027344, 69.203140258789, 0, 0, 0, 500);
    CreateStreamObject(1215, 1152.2009277344, -2134.6252441406, 68.98299407959, 0, 0, 0, 500);
    CreateStreamObject(1215, 1145.9798583984, -2122.4213867188, 69.949081420898, 0, 0, 0, 500);
    CreateStreamObject(1215, 1153.3079833984, -2118.3149414063, 70.50464630127, 0, 0, 0, 500);
    CreateStreamObject(1215, 1138.8426513672, -2104.6911621094, 71.327766418457, 0, 0, 0, 500);
    CreateStreamObject(1215, 1146.5865478516, -2101.6574707031, 71.449172973633, 0, 0, 0, 500);
    CreateStreamObject(1215, 1128.6307373047, -2084.7980957031, 68.891395568848, 0, 0, 0, 500);
    CreateStreamObject(1215, 1138.0668945313, -2084.5078125, 69.101829528809, 0, 0, 0, 500);
    CreateStreamObject(1215, 1153.3095703125, -2144.7749023438, 68.079406738281, 0, 0, 0, 500);

	//mapping distributeur
	
	CreateStreamObject(2942, 1548.9439697266, -1650.5167236328, 13.200437545776, 0, 0, 0, 500)
	CreateStreamObject(2942, 1927.4865722656, -1786.763671875, 13.189774513245, 0, 0, 0, 500)
	CreateStreamObject(2942, 1751.6315917969, -1890.1667480469, 13.200592041016, 0, 0, 92, 500)
	CreateStreamObject(2942, 1186.1846923828, -1370.40625, 13.214707374573, 0, 0, 90, 500)
	CreateStreamObject(2942, 827.17974853516, -1346.8184814453, 13.179926872253, 0, 0, 270, 500)
	CreateStreamObject(2942, 395.90420532227, -1806.2131347656, 7.4729585647583, 0, 0, 180, 500)
	CreateStreamObject(2942, 1317.6494140625, -897.80871582031, 39.22102355957, 0, 0, 0, 500)
	CreateStreamObject(2942, 1349.2100830078, -1759.2178955078, 13.158480644226, 0, 0, 180, 500)
	CreateStreamObject(2942, 2228.41015625, -1716.6079101563, 13.165567398071, 0, 0, 272, 500)
	CreateStreamObject(2942, 2153.8881835938, -1020.3176269531, 62.357345581055, 0, 0, 90, 500)
	
	//mapping prison admin
	
	CreateStreamObject(8673, 1814.7713623047, -1532.802734375, 18.100471496582, 0, 0, 357, 500)
    CreateStreamObject(8673, 1796.2568359375, -1531.6412353516, 18.100471496582, 0, 0, 355.75, 500)
    CreateStreamObject(8673, 1775.9143066406, -1530.3521728516, 18.100471496582, 0, 0, 357.2482, 500)
    CreateStreamObject(983, 1816.7329101563, -1540.4431152344, 15.822617530823, 0, 0, 265, 500)
    CreateStreamObject(983, 1756.8005371094, -1588.8743896484, 16.78307723999, 0, 0, 2, 500)
    CreateStreamObject(947, 1754.1383056641, -1537.1497802734, 10.66520690918, 0, 0, 274, 500)
    CreateStreamObject(2114, 1756.2630615234, -1536.4071044922, 8.5154066085815, 0, 0, 0, 500)
    CreateStreamObject(2923, 1760.8430175781, -1530.7847900391, 8.5480461120605, 0, 0, 0, 500)
    CreateStreamObject(3072, 1762.7795410156, -1530.7692871094, 8.7819633483887, 90, 0, 0, 500)
    CreateStreamObject(2913, 1768.9776611328, -1531.1258544922, 8.8153610229492, 0, 90, 0, 500)
    CreateStreamObject(983, 1819.2673339844, -1540.68359375, 15.797617912292,0, 0, 264.99572753906, 500)
    
    // Mapping travaux (( Cryp'z ))

    CreateStreamObject(1365,2136.773,-1627.329,13.533,0.0,0.0,-21.486);
    CreateStreamObject(1424,2126.277,-1623.777,12.896,0.0,0.0,-137.510);
    CreateStreamObject(1424,2128.585,-1622.946,12.904,0.0,0.0,-180.482);
    CreateStreamObject(1424,2133.719,-1624.156,12.896,0.0,0.0,-201.968);
    CreateStreamObject(1427,2127.329,-1623.194,12.938,0.0,0.0,20.627);
    CreateStreamObject(1427,2129.842,-1623.179,12.930,0.0,0.0,-4.297);
    CreateStreamObject(1424,2131.111,-1623.310,12.896,0.0,0.0,-190.795);
    CreateStreamObject(1427,2125.250,-1624.745,13.067,0.0,0.0,-116.024);
    CreateStreamObject(1427,2132.455,-1623.622,12.930,0.0,0.0,169.309);
    CreateStreamObject(1282,2125.033,-1622.700,13.079,0.0,0.0,-30.080);
    CreateStreamObject(1427,2135.013,-1624.774,12.930,0.0,0.0,149.542);
    CreateStreamObject(1238,2140.692,-1627.277,12.709,0.0,0.0,0.0);
    CreateStreamObject(1238,2141.556,-1628.166,12.709,0.0,0.0,0.0);
    CreateStreamObject(1238,2144.390,-1631.251,12.709,0.0,0.0,0.0);
    CreateStreamObject(1238,2143.412,-1630.492,12.709,0.0,0.0,0.0);
    CreateStreamObject(1238,2142.429,-1629.456,12.709,0.0,0.0,0.0);
    CreateStreamObject(1238,2139.651,-1626.494,12.701,0.0,0.0,0.0);
    CreateStreamObject(1238,2145.434,-1631.963,12.709,0.0,0.0,0.0);
    CreateStreamObject(1424,2136.302,-1625.251,12.896,0.0,0.0,-201.968);
    CreateStreamObject(1424,2138.289,-1625.970,12.896,0.0,0.0,-201.968);
    CreateStreamObject(924,2137.951,-1629.948,13.350,0.0,0.0,-8.594);
    CreateStreamObject(926,2135.892,-1629.629,12.807,0.0,0.0,0.0);
    CreateStreamObject(928,2136.099,-1628.928,12.816,0.0,0.0,-45.550);
    CreateStreamObject(1221,2135.244,-1628.829,13.020,0.0,0.0,-22.500);
    CreateStreamObject(1220,2134.299,-1628.414,12.910,0.0,0.0,0.0);
    CreateStreamObject(926,2134.568,-1628.428,13.498,0.0,0.0,0.0);
    CreateStreamObject(1264,2136.853,-1629.568,13.030,0.0,0.0,-135.000);
    CreateStreamObject(1338,2137.971,-1629.949,12.743,0.0,0.0,-33.750);
    CreateStreamObject(2674,2136.618,-1629.845,12.580,0.0,0.0,-45.000);

    //mapping ile plage ((phare ))
   /*
    CreateStreamObject( 16258, 713.127807 , -2830.472167 , -49.000000 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 16258, 786.879211 , -2788.695068 , -49.051086 , 0.000000 , 0.000000 , 616.000000);
    CreateStreamObject( 14393, 775.366760 , -2852.287597 , 1000 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 11490, 775.366760 , -2852.287597 , 3.101735 , 0.000000 , 0.000000 , 180.000000);
    CreateStreamObject( 11491, 775.361760 , -2841.227597 , 4.581735 , 0.000000 , 0.000000 , 180.000000);
    CreateStreamObject( 1736, 775.343994 , -2845.351074 , 7.986301 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 1828, 773.874267 , -2849.023193 , 4.712166 , 0.000000 , 0.000000 , 972.000000);
    CreateStreamObject( 11665, 778.163024 , -2848.560791 , 5.262573 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 11631, 778.724426 , -2855.769042 , 5.832248 , 0.000000 , 0.000000 , 2700.000000);
    CreateStreamObject( 1723, 773.437622 , -2851.886474 , 4.543708 , 0.000000 , 0.000000 , 500.000000);
    CreateStreamObject( 1723, 771.825256 , -2847.923095 , 4.659612 , 0.000000 , 0.000000 , 62.000000);
    CreateStreamObject( 1646, 752.722167 , -2828.767333 , 2.899070 , 14.000000 , 4.000000 , 134.000000);
    CreateStreamObject( 1637, 797.763366 , -2739.296386 , 3.537348 , 0.000000 , 0.000000 , 562.000000);
    CreateStreamObject( 1645, 755.381652 , -2829.870117 , 2.989241 , 6.000000 , 4.000000 , 162.000000);
    CreateStreamObject( 3461, 753.242614 , -2830.517822 , 4.409924 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3461, 781.970947 , -2839.107910 , 4.633762 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3461, 770.198242 , -2838.895019 , 4.482945 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3461, 793.469116 , -2849.874511 , 4.444637 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3461, 754.584960 , -2849.569335 , 4.983467 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3524, 775.391357 , -2844.545410 , 2.848451 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 11495, 739.596008 , -2809.593994 , 0.552734 , 0.000000 , 0.000000 , 22.000000);
    CreateStreamObject( 628, 771.829040 , -2849.189697 , 6.439230 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 711, 758.597900 , -2831.965087 , 7.285028 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 711, 749.412597 , -2825.102294 , 6.212321 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 711, 753.797424 , -2834.210205 , 7.373906 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 711, 749.493286 , -2830.800781 , 6.950206 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 746, 752.793151 , -2831.859375 , 3.196425 , 0.000000 , 0.000000 , 710.000000);
    CreateStreamObject( 747, 749.715209 , -2827.758789 , 2.571616 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 745, 758.796447 , -2833.511962 , 2.694536 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 745, 803.764343 , -2745.086669 , 1.771249 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 758, 788.502441 , -2746.630126 , 0.270166 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3461, 795.436279 , -2739.261718 , 3.969913 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 745, 797.694213 , -2751.673339 , 0.992662 , -4.000000 , -374.000000 , -252.000000);
    CreateStreamObject( 747, 809.927429 , -2740.485839 , 0.770636 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 880, 808.694396 , -2757.377197 , 0.602614 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 1461, 797.715332 , -2743.173583 , 3.084697 , 0.000000 , 0.000000 , 292.000000);
    CreateStreamObject( 620, 803.803283 , -2743.131591 , 2.027884 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 746, 799.412963 , -2735.666503 , 2.232966 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3507, 798.960815 , -2732.974365 , 1.892477 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 1642, 790.478576 , -2740.722412 , 1.562498 , 1272.000000 , 168.000000 , 272.000000);
    CreateStreamObject( 3626, 743.321960 , -2850.708740 , 2.471598 , 0.000000 , 0.000000 , 90.000000);
    CreateStreamObject( 3626, 747.092834 , -2850.708740 , 2.471598 , 0.000000 , 0.000000 , 90.000000);
    CreateStreamObject( 6295, 664.527465 , -2828.540039 , 25.431104 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 3525, 664.734375 , -2830.136474 , 46.465351 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 14392, 775.500732 , -2852.239501 , 998.987304 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 14391, 776.419372 , -2853.211914 , 998.772949 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 16501, 784.189941 , -2853.812011 , 998.315429 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 14402, 771.519458 , -2841.296386 , 3.760829 , 0.000000 , 0.000000 , 90.000000);
    CreateStreamObject( 14402, 778.750732 , -2839.212939 , 3.855211 , 0.000000 , 0.000000 , -85.000000);
    CreateStreamObject( 14402, 775.750732 , -2839.212939 , 3.855211 , 0.000000 , 0.000000 , -85.000000);
    CreateStreamObject( 18368, 788.338073 , -2837.393310 , -1.214880 , 0.000000 , 0.000000 , 81.000000);
    CreateStreamObject( 1481, 781.346557 , -2842.115966 , 5.282270 , 0.000000 , 0.000000 , 270.000000);
    CreateStreamObject( 1209, 773.206604 , -2856.266845 , 4.587175 , 0.000000 , 0.000000 , 180.000000);
    CreateStreamObject( 749, 799.586425 , -2844.199951 , 2.616182 , 0.000000 , -88.000000 , 149.000000);
    CreateStreamObject( 751, 805.584594 , -2847.051269 , 0.917457 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 751, 796.158386 , -2840.441162 , 2.724733 , 0.000000 , -88.000000 , 497.000000);
    CreateStreamObject( 751, 792.195983 , -2838.640625 , 2.797317 , 0.000000 , 271.000000 , 153.000000);
    CreateStreamObject( 751, 787.706054 , -2838.414306 , 2.694507 , 0.000000 , -88.000000 , 179.000000);
    CreateStreamObject( 751, 787.416503 , -2838.270996 , 3.043086 , -41.000000 , -94.000000 , 361.000000);
    CreateStreamObject( 747, 787.390197 , -2838.923339 , 2.906169 , 0.000000 , 0.000000 , 202.000000);
    CreateStreamObject( 14402, 782.427185 , -2841.299804 , 3.831256 , 0.000000 , 0.000000 , 30.000000);
    CreateStreamObject( 820, 795.641662 , -2835.278076 , -0.281279 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 820, 799.628112 , -2835.732666 , -0.329932 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 820, 802.533081 , -2839.652099 , -0.184889 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 820, 804.181457 , -2843.673828 , -0.279970 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 820, 792.411010 , -2836.382324 , -0.260778 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 856, 788.636108 , -2842.894775 , 3.274733 , 0.000000 , 0.000000 , 7.000000);
    CreateStreamObject( 822, 802.613098 , -2848.104003 , 3.682669 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 813, 795.377807 , -2842.323242 , 5.201782 , 0.000000 , 0.000000 , 54.000000);
    CreateStreamObject( 814, 798.977783 , -2854.163818 , 3.136753 , 0.000000 , 0.000000 , 143.000000);
    CreateStreamObject( 728, 795.915893 , -2845.093017 , 3.136753 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 762, 799.099548 , -2850.169921 , 3.136753 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 800, 742.493469 , -2837.144287 , 3.835455 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 803, 751.945800 , -2839.794189 , 5.828198 , 0.000000 , 0.000000 , 11.000000);
    CreateStreamObject( 805, 760.978088 , -2837.949218 , 4.345748 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 762, 745.792114 , -2835.337158 , 6.292323 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 762, 736.394042 , -2842.148681 , 6.230221 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 762, 733.836242 , -2852.465820 , 5.068370 , 0.000000 , 0.000000 , 33.000000);
    CreateStreamObject( 762, 737.218811 , -2861.736572 , 6.685624 , 0.000000 , 0.000000 , 99.000000);
    CreateStreamObject( 762, 747.773010 , -2867.318847 , 7.064486 , 0.000000 , 0.000000 , 231.000000);
    CreateStreamObject( 800, 754.087341 , -2844.785644 , 4.800476 , 0.000000 , 0.000000 , 68.000000);
    CreateStreamObject( 800, 759.247436 , -2841.550781 , 4.151706 , 0.000000 , 0.000000 , 215.000000);
    CreateStreamObject( 762, 806.219909 , -2748.782714 , 4.119337 , 0.000000 , 0.000000 , 30.000000);
    CreateStreamObject( 762, 805.732055 , -2736.918701 , 4.549339 , 0.000000 , 0.000000 , 0.000000);
    CreateStreamObject( 1432,779.653137,-2840.894042,4.674414,0.000000,0.000000,52.500000);
    CreateStreamObject( 1280,784.811584,-2837.284912,3.654738,0.000000,0.000000,-90.000000);   */
    
    // Mapping QG Ruff Ryders
    
    CreateStreamObject(5152, 681.43481445313, -448.87677001953, -26.76259803772, 359.7692, 23.4997, 88.5278, 500);
    
    // Mapping QG Ruff Ryders by Massimo
    
    CreateStreamObject(946, 2649.1843261719, -2016.0397949219, 14.754342079163, 0, 0, 89.994506835938, 500);
    CreateStreamObject(2114, 2648.8225097656, -2017.1083984375, 12.6931848526, 0, 0, 0, 500);
    CreateStreamObject(1481, 2650.0043945313, -2018.5826416016, 13.255146026611, 0, 0, 270, 500);
    CreateStreamObject(14821, 2655.6953125, -2024.728515625, 7.4673442840576, 0, 0, 90, 500);
    CreateStreamObject(14820, 2658.5419921875, -2027.7021484375, 6.6048889160156, 0, 0, 90, 500);
    CreateStreamObject(1828, 2655.150390625, -2022.119140625, 5.720160484314, 0, 0, 0, 500);
    CreateStreamObject(1827, 2654.859375, -2022.0205078125, 5.720160484314, 0, 0, 0, 500);
    CreateStreamObject(1829, 2656.32421875, -2020.1630859375, 6.1846895217896, 0, 0, 317.99926757813, 500);
    CreateStreamObject(18451, 2635.4938964844, -2001.833984375, 13.066747665405, 0, 0, 80, 500);
    CreateStreamObject(16151, 2651.0263671875, -2029.3759765625, 6.0951581001282, 0, 0, 271.99951171875, 500);
    CreateStreamObject(1535, 2648.8481445313, -2026.0531005859, 5.720160484314, 0, 0, 270.25, 500);
    CreateStreamObject(1670, 2654.876953125, -2021.9599609375, 6.1701622009277, 0, 0, 90, 500);
    CreateStreamObject(2725, 2649.3520507813, -2019.82421875, 6.1533479690552, 0, 0, 0, 500);
    CreateStreamObject(2712, 2636.2275390625, -2074.7749023438, -65.548095703125, 0, 0, 0, 500);
    CreateStreamObject(2726, 2649.31640625, -2019.83984375, 6.9333162307739, 0, 0, 0, 500);
    CreateStreamObject(1753, 2653.1743164063, -2020.0390625, 5.720160484314, 0, 0, 5.75, 500);
    CreateStreamObject(1753, 2657.02734375, -2020.8232421875, 5.720160484314, 0, 0, 270, 500);
    CreateStreamObject(1337, 2622.2802734375, -2022.9853515625, 11.522751808167, 0, 0, 0, 500);
    CreateStreamObject(1347, 2633.9033203125, -2006.1990966797, 13.12419128418, 0, 0, 0, 500);
    CreateStreamObject(1344, 2701.8447265625, -1998.2447509766, 13.362905502319, 0, 0, 0, 500);
    CreateStreamObject(12957, 2664.3112792969, -1996.0057373047, 13.432904243469, 0, 0, 265.99755859375, 500);
    CreateStreamObject(3594, 2684.6442871094, -2033.8802490234, 13.087064743042, 0, 0, 0, 500);
    CreateStreamObject(1245, 2685.8225097656, -1975.4294433594, 14.041617393494, 0, 0, 270, 500);
    CreateStreamObject(1660, 2648.296875, -1969.28515625, 12.546875, 0, 0, 90, 500);
    CreateStreamObject(11392, 2644.4677734375, -2027.7607421875, 12.546875, 0, 0, 19.989624023438, 500);
    CreateStreamObject(1756, 2677.8662109375, -2013.2478027344, 12.5546875, 0, 0, 176.24267578125, 500);
    CreateStreamObject(935, 2678.9140625, -2013.0593261719, 13.117879867554, 0, 0, 0, 500);
    CreateStreamObject(1512, 2679.0979003906, -2012.9191894531, 13.832319259644, 0, 0, 0, 500);
    CreateStreamObject(1668, 2678.8913574219, -2012.9140625, 13.836080551147, 0, 0, 0, 500);
    CreateStreamObject(2292, 2649.5207519531, -2020.8591308594, 5.720160484314, 0, 0, 0, 500);
    CreateStreamObject(2291, 2649.5356445313, -2022.2845458984, 5.720160484314, 0, 0, 90, 500);
    CreateStreamObject(2292, 2649.5385742188, -2023.7116699219, 5.720160484314, 0, 0, 90, 500);
    CreateStreamObject(2291, 2649.5302734375, -2023.234375, 5.720160484314, 0, 0, 90, 500);
    CreateStreamObject(2418, 2649.576171875, -2025.591796875, 5.720160484314, 0, 0, 89.747314453125, 500);
    CreateStreamObject(2291, 2650.9814453125, -2023.7116699219, 5.720160484314, 0, 0, 180, 500);
    CreateStreamObject(2293, 2651.4409179688, -2023.71875, 5.720160484314, 0, 0, 0, 500);
    CreateStreamObject(2315, 2651.0561523438, -2022.2355957031, 5.720160484314, 0, 0, 90, 500);
    CreateStreamObject(2725, 2652.3952636719, -2020.0499267578, 6.1533479690552, 0, 0, 337, 500);
    CreateStreamObject(2726, 2652.3979492188, -2020.0555419922, 6.9333162307739, 0, 0, 0, 500);
    CreateStreamObject(2967, 2649.7419433594, -2024.5443115234, 6.6515307426453, 0, 0, 70, 500);
    CreateStreamObject(2055, 2648.9289550781, -2025.1160888672, 7.7025718688965, 0, 0, 90, 500);
    CreateStreamObject(1616, 2650.71484375, -2024.4920654297, 16.296274185181, 0, 0, 324.5, 500);
    CreateStreamObject(2852, 2651.025390625, -2020.9350585938, 6.215793132782, 0, 0, 0, 500);
    CreateStreamObject(1668, 2650.8984375, -2021.6513671875, 6.3824968338013, 0, 0, 0, 500);
    CreateStreamObject(2838, 2650.9599609375, -2022.2939453125, 6.215793132782, 0, 0, 339.99938964844, 500);
    CreateStreamObject(1487, 2651.1174316406, -2021.5888671875, 6.4132475852966, 0, 0, 0, 500);
    CreateStreamObject(1575, 2655.0493164063, -2022.578125, 6.1225838661194, 0, 0, 40, 500);
    CreateStreamObject(1575, 2654.5190429688, -2022.4906005859, 6.1225838661194, 0, 0, 350, 500);
    CreateStreamObject(1210, 2654.4250488281, -2021.9112548828, 6.3435997962952, 90, 0, 230, 500);
    CreateStreamObject(1575, 2654.7653808594, -2022.5454101563, 6.2815833091736, 0, 0, 0, 500);
    CreateStreamObject(1550, 2655.8666992188, -2019.6802978516, 6.1135025024414, 0, 0, 0, 500);
    CreateStreamObject(1212, 2686.599609375, -1933.7984619141, -26.110446929932, 0, 0, 0, 500);
    CreateStreamObject(2710, 2654.6098632813, -2022.1262207031, 6.2455644607544, 0, 0, 160.25, 500);
    CreateStreamObject(1668, 2655.0461425781, -2022.1821289063, 6.3118658065796, 0, 0, 0, 500);
    CreateStreamObject(2035, 2649.5397949219, -2024.9530029297, 6.6828374862671, 0, 0, 150, 500);
    CreateStreamObject(2037, 2649.1303710938, -2025.8160400391, 6.7213554382324, 0, 0, 120, 500);
    CreateStreamObject(2044, 2649.6479492188, -2025.5517578125, 6.6804008483887, 0, 0, 0, 500);
    CreateStreamObject(1242, 2649.6896972656, -2025.7326660156, 6.0977396965027, 0, 0, 280, 500);
    CreateStreamObject(2036, 2649.6669921875, -2024.9681396484, 5.9464936256409, 0, 0, 100, 500);
    CreateStreamObject(2045, 2649.7478027344, -2025.2559814453, 6.3358769416809, 0, 0, 0, 500);
    CreateStreamObject(1274, 2657.9565429688, -2027.6864013672, 6.1146297454834, 0, 0, 270, 500);
    CreateStreamObject(2044, 2649.3840332031, -2025.3358154297, 6.7034845352173, 0, 0, 60, 500);
    CreateStreamObject(2037, 2649.1030273438, -2025.521484375, 6.74831199646, 0, 0, 90, 500);
    CreateStreamObject(2042, 2649.3278808594, -2024.4315185547, 6.7809314727783, 0, 0, 0, 500);
    CreateStreamObject(2964, 2654.2766113281, -2024.8310546875, 5.720160484314, 0, 0, 0, 500);
    CreateStreamObject(2997, 2654.7321777344, -2024.7075195313, 6.6501107215881, 0, 0, 0, 500);
    CreateStreamObject(3001, 2653.8549804688, -2025.0701904297, 6.6501107215881, 0, 0, 0, 500);
    CreateStreamObject(2998, 2654.03515625, -2024.5609130859, 6.6501107215881, 0, 0, 0, 500);
    CreateStreamObject(3003, 2653.740234375, -2024.8826904297, 6.6505074501038, 0, 0, 0, 500);
    CreateStreamObject(3106, 2654.8317871094, -2025.0859375, 6.6501111984253, 0, 0, 0, 500);
    CreateStreamObject(3102, 2655.0588378906, -2024.865234375, 6.6501111984253, 0, 0, 0, 500);
    CreateStreamObject(3100, 2653.4382324219, -2024.3703613281, 6.6501111984253, 0, 0, 0, 500);
    CreateStreamObject(3103, 2654.337890625, -2025.1544189453, 6.6501111984253, 0, 0, 0, 500);
    CreateStreamObject(3004, 2654.4895019531, -2024.9725341797, 6.6121096611023, 0, 0, 310, 500);
    CreateStreamObject(3004, 2653.5478515625, -2025.2504882813, 6.6371097564697, 0, 0, 0, 500);
    CreateStreamObject(910, 2690.4064941406, -2010.0300292969, 13.823843002319, 0, 0, 180, 500);
    CreateStreamObject(853, 2691.9770507813, -2010.8193359375, 12.955361366272, 0, 0, 0, 500);
    CreateStreamObject(928, 2703.1870117188, -1998.4008789063, 12.813324928284, 0, 0, 40, 500);
    CreateStreamObject(1440, 2667.3308105469, -1996.0070800781, 13.073803901672, 0, 0, 80, 500);
    CreateStreamObject(1415, 2651.4562988281, -2009.9261474609, 12.5546875, 0, 0, 180, 500);
    CreateStreamObject(1450, 2650.0046386719, -2010.013671875, 13.154953956604, 0, 0, 278, 500);
    CreateStreamObject(3007, 2651.5659179688, -2009.7613525391, 12.591756820679, 0, 0, 308.75, 500);
    CreateStreamObject(3008, 2651.7902832031, -2009.2927246094, 12.5546875, 0, 0, 340, 500);
    CreateStreamObject(3010, 2651.6215820313, -2010.0660400391, 13.272585868835, 0, 0, 289.25, 500);
    CreateStreamObject(1462, 2688.9890136719, -2009.5216064453, 12.5546875, 0, 0, 260, 500);
    CreateStreamObject(1438, 2672.3603515625, -2010.26953125, 12.5546875, 0, 0, 0, 500);
    CreateStreamObject(1439, 2670.9165039063, -2010.6895751953, 12.5546875, 0, 0, 180, 500);
    CreateStreamObject(1226, 2699.8376464844, -1999.8957519531, 16.329109191895, 0, 0, 90, 500);
    CreateStreamObject(1226, 2679.3793945313, -2008.2437744141, 16.328639984131, 0, 0, 269.75, 500);
    CreateStreamObject(1226, 2670.0720214844, -1999.9249267578, 16.229110717773, 0, 0, 89.75, 500);
    CreateStreamObject(1226, 2642.9091796875, -2008.2696533203, 16.329109191895, 0, 0, 268.5, 500);
    CreateStreamObject(911, 2650.9445800781, -1998.1940917969, 13.121286392212, 0, 0, 30, 500);
    CreateStreamObject(1372, 2649.2548828125, -1998.2421875, 12.5546875, 0, 0, 0, 500);
    CreateStreamObject(1369, 2647.8395996094, -1998.1577148438, 13.176561355591, 0, 0, 0, 500);
    CreateStreamObject(3594, 2708.0549316406, -2018.2449951172, 13.009057998657, 0, 0, 0, 500);
    CreateStreamObject(918, 2700.6555175781, -1998.4290771484, 12.918727874756, 0, 0, 0, 500);
    CreateStreamObject(851, 2678.6354980469, -1997.4990234375, 12.842558860779, 0, 0, 0, 500);
    CreateStreamObject(1430, 2680.2175292969, -1998.0842285156, 12.870245933533, 0, 0, 0, 500);
    CreateStreamObject(1409, 2681.0603027344, -1997.8308105469, 12.5546875, 0, 0, 20, 500);
    CreateStreamObject(14798, 2645.1506347656, -2044.5985107422, 7.2283601760864, 0, 0, 270.5, 500);
    CreateStreamObject(14797, 2645.1701660156, -2046.1711425781, 7.3509202003479, 0, 0, 270.75, 500);
    CreateStreamObject(14826, 2646.6281738281, -2043.4393310547, 6.5896129608154, 0, 0, 271.5, 500);
    CreateStreamObject(922, 2645.5646972656, -2049.3293457031, 7.7545251846313, 0, 0, 0, 500);
    CreateStreamObject(3014, 2650.7475585938, -2039.0738525391, 6.2689352035522, 0, 0, 0, 500);
    CreateStreamObject(3013, 2650.7927246094, -2039.4935302734, 6.1800317764282, 0, 0, 0, 500);
    CreateStreamObject(3013, 2650.8200683594, -2039.4913330078, 6.4424901008606, 0, 0, 0, 500);
    CreateStreamObject(3014, 2650.4387207031, -2038.5909423828, 6.2689352035522, 0, 0, 40, 500);
    CreateStreamObject(3015, 2650.8039550781, -2039.0596923828, 6.5370678901672, 0, 0, 0, 500);
    CreateStreamObject(1348, 2642.2045898438, -2043.3083496094, 6.7277617454529, 0, 0, 90, 500);
    CreateStreamObject(2619, 2651.0832519531, -2039.7521972656, 8.0556011199951, 0, 0, 0, 500);
    CreateStreamObject(2051, 2651.1765136719, -2040.685546875, 8.129732131958, 0, 0, 270, 500);
    CreateStreamObject(2049, 2651.0993652344, -2041.5832519531, 8.1409015655518, 0, 0, 280, 500);
    CreateStreamObject(1686, 2643.5375976563, -2044.0327148438, 6.0252351760864, 0, 0, 0, 500);
    
    // Mapping Auto ecole et pub
    
    CreateStreamObject(983, 1139.1390380859, -1685.8265380859, 13.596020698547, 0, 0, 0, 500);
    CreateStreamObject(983, 1139.1462402344, -1692.1690673828, 13.596020698547, 0, 0, 0, 500);
    CreateStreamObject(983, 1139.1533203125, -1698.4053955078, 13.596020698547, 0, 0, 0, 500);
    CreateStreamObject(982, 1126.3065185547, -1701.5965576172, 13.371243476868, 359.25, 0, 90, 500); //
    CreateStreamObject(3861, 1760.6771240234, -1277.2008056641, 13.805658340454, 0, 0, 358.9987, 500);
    CreateStreamObject(2853, 1759.6514892578, -1277.8149414063, 13.45125579834, 0, 0, 116, 500);
    CreateStreamObject(2894, 1760.7548828125, -1277.5795898438, 13.45125579834, 0, 0, 180, 500);
    CreateStreamObject(2855, 1761.6420898438, -1277.8594970703, 13.45125579834, 0, 0, 0, 500);
    CreateStreamObject(2773, 1763.9035644531, -1276.857421875, 13.168395042419, 0, 0, 0, 500);
    CreateStreamObject(2773, 1763.8934326172, -1278.7686767578, 13.168395042419, 0, 0, 0, 500);
    CreateStreamObject(2773, 1762.9642333984, -1279.7399902344, 13.168395042419, 0, 0, 90, 500);
	CreateStreamObject(2773, 1761.9968261719, -1280.7110595703, 13.168395042419, 0, 0, 0, 500);
	CreateStreamObject(2773, 1760.1374511719, -1280.6898193359, 13.168395042419, 0, 0, 0, 500);
	CreateStreamObject(2773, 1759.1811523438, -1279.7229003906, 13.168395042419, 0, 0, 90, 500);
	CreateStreamObject(2773, 1757.2622070313, -1279.7410888672, 13.168395042419, 0, 0, 90, 500);
	CreateStreamObject(2773, 1756.2620849609, -1278.7176513672, 13.168395042419, 0, 0, 0, 500);
	CreateStreamObject(2773, 1756.2739257813, -1276.8822021484, 13.168395042419, 0, 0, 0, 500);
    
    // mapping QG Racer
    
    CreateObject(11388, 1602.0782470703, -2163.3166503906, 19.31418800354, 0, 0, 191.75);
    CreateObject(11389, 1602.0687255859, -2163.3337402344, 15.69345664978, 0, 0, 191.75);
    CreateObject(11390, 1602.1510009766, -2163.3107910156, 16.962202072144, 0, 0, 192);
    CreateObject(11391, 1608.2998046875, -2153.7990722656, 13.822174072266, 0, 0, 191.75);
    CreateObject(11387, 1589.6656494141, -2149.57421875, 15.912225723267, 0, 0, 191.75);
    CreateObject(13027, 1566.4268798828, -2179.8725585938, 15.786876678467, 0, 0, 268);
    CreateObject(12978, 1566.4259033203, -2179.8735351563, 12.956407546997, 0, 0, 88);
    CreateObject(1098, 1592.7960205078, -2161.8288574219, 17.644956588745, 0, 0, 11);
    CreateObject(1097, 1593.0267333984, -2162.9133300781, 17.65828704834, 0, 0, 11);
    CreateObject(1096, 1593.3421630859, -2164.0007324219, 17.654634475708, 0, 0, 11);
    CreateObject(1085, 1593.3793945313, -2164.6701660156, 16.567638397217, 0, 5.5, 10);
    CreateObject(1084, 1593.1287841797, -2163.5551757813, 16.580083847046, 0, 0, 8.5);
    CreateObject(1083, 1592.8825683594, -2162.3876953125, 16.58345413208, 0, 0, 10.5);
    CreateObject(1082, 1593.5250244141, -2165.1362304688, 15.433645248413, 0, 0, 10.75);
    CreateObject(1081, 1593.2545166016, -2164.0681152344, 15.410779953003, 0, 0, 9);
    CreateObject(1080, 1592.9700927734, -2162.9453125, 15.448977470398, 0, 0, 12.25);
    CreateObject(1079, 1592.7789306641, -2161.7817382813, 15.426139831543, 0, 0, 11.5);
    CreateObject(1078, 1592.5233154297, -2160.5549316406, 15.428507804871, 0, 0, 6.5);
    CreateObject(1077, 1593.1375732422, -2163.5078125, 14.354619979858, 0, 0, 11);
    CreateObject(1076, 1592.896484375, -2162.3491210938, 14.360606193542, 0, 0, 8.25);
    CreateObject(1075, 1592.5955810547, -2161.1477050781, 14.35876750946, 0, 0, 11.25);
    CreateObject(1074, 1592.4888916016, -2160.2668457031, 16.548318862915, 0, 0, 10.75);
    CreateObject(1073, 1592.32421875, -2159.59765625, 17.539054870605, 0, 0, 10.25);
    CreateObject(8673, 1573.4609375, -2145.3706054688, 14.091584205627, 0, 0, 22.5);
    CreateObject(8673, 1560.73828125, -2164.8295898438, 14.091584205627, 0, 0, 78.5);
    CreateObject(8674, 1562.9506835938, -2154.5151367188, 14.01379108429, 0, 0, 78);
    CreateObject(8674, 1579.2961425781, -2184.6577148438, 14.01379108429, 0, 0, 0);
    CreateObject(8674, 1594.0751953125, -2182.8732910156, 14.01379108429, 0, 0, 24);
    CreateObject(8957, 1593.7081298828, -2168.8208007813, 15.218393325806, 0, 0, 191.50004577637);
    CreateObject(8957, 1603.5284423828, -2146.5324707031, 14.968393325806, 0, 0, 101.24713134766);
    CreateObject(1523, 1599.0583496094, -2155.4333496094, 12.575332641602, 0, 0, 282);
    CreateObject(3036, 1584.4675292969, -2184.7145996094, 14.31706237793, 0, 0, 141);
    CreateObject(2533, 1591.2579345703, -2150.5124511719, 12.5546875, 0, 0, 12);
    CreateObject(2009, 1595.025390625, -2152.7458496094, 12.5546875, 0, 0, 191.50006103516);
    CreateObject(1714, 1593.9267578125, -2152.544921875, 12.5546875, 0, 0, 32);
    CreateObject(1671, 1596.5614013672, -2153.5751953125, 13.014902114868, 0, 0, 250.5);
    CreateObject(5153, 1605.294921875, -2174.8662109375, 13.027878761292, 1.746826171875, 1.4996337890625, 11.200561523438);
    CreateObject(18553, 1609.1923828125, -2174.1982421875, 13.946632385254, 0, 270.99975585938, 281.49719238281);
    CreateObject(18553, 1611.2421875, -2173.8017578125, 13.896633148193, 0, 270, 280.49194335938);


    
    // Mapping  BAR Business
    /*
    CreateObject(1432, 1385.6219482422, -1019.8616333008, 25.295007705688, 0, 0, 336.18017578125);//Mappage d'un bar a coter de la banque par CISTAWAD
	CreateObject(1432, 1380.9329833984, -1020.3711547852, 25.657150268555, 0, 0, 219.06604003906);
	CreateObject(1432, 1385.50390625, -1012.623046875, 25.896081924438, 0, 0, 3.96484375);
	CreateObject(1432, 1380.7021484375, -1012.3232421875, 26.082536697388, 0, 0, 258.90930175781);
	CreateObject(1418, 1385.9455566406, -1018.021484375, 26.196643829346, 0, 0, 359.75);
	CreateObject(1418, 1380.2596435547, -1018.0569458008, 26.571069717407, 0, 0, 359.23498535156);
	CreateObject(1418, 1378.4722900391, -1019.811706543, 26.652870178223, 0, 0, 269.20568847656);
	CreateObject(1418, 1380.111328125, -1022.7319335938, 26.414627075195, 0, 0, 0);
	CreateObject(1418, 1383.5870361328, -1022.75, 26.131931304932, 0, 0, 0);
	CreateObject(1418, 1386.6524658203, -1021.567199707, 25.91205406189, 0, 0, 41.684783935547);
	CreateObject(1418, 1385.9963378906, -1013.9456176758, 26.61096572876, 0, 0, 0);
	CreateObject(1418, 1380.1887207031, -1013.909362793, 26.734748840332, 0, 0, 0);
	CreateObject(1418, 1378.4794921875, -1012.1025390625, 26.942306518555, 0, 0, 267.26501464844);
	CreateObject(1418, 1378.9172363281, -1008.6770629883, 27.06022644043, 0, 0, 259.32507324219);
	CreateObject(1418, 1380.9053955078, -1007.0131225586, 27.288185119629, 0, 0, 0);
	CreateObject(1418, 1384.3721923828, -1007.0061035156, 27.289144515991, 0, 0, 0);
	CreateObject(1418, 1387.43359375, -1006.9989624023, 27.290121078491, 0, 0, 0);
	CreateObject(1418, 1378.4173583984, -1020.9442138672, 26.666513442993, 0, 0, 268.69067382813);
	CreateObject(1432, 1384.0721435547, -1008.3470458984, 26.329864501953, 0, 0, 344.11462402344);
	CreateObject(3802, 1387.765625, -1011.18359375, 31.0032081604, 0, 0, 183.33630371094);
	CreateObject(3532, 1377.7795410156, -1011.6735229492, 26.861640930176, 0, 0, 0);
	CreateObject(3532, 1378.0308837891, -1008.6551513672, 26.971645355225, 0, 0, 350.07507324219);
	CreateObject(3532, 1377.7618408203, -1020.3616943359, 26.521095275879, 0, 0, 0);
	CreateObject(3532, 1379.3637695313, -1023.4117431641, 26.357002258301, 0, 0, 272.66064453125);
	CreateObject(3532, 1383.1680908203, -1023.4688720703, 26.037700653076, 0, 0, 272.66064453125);
	CreateObject(3532, 1386.5064697266, -1022.3505859375, 25.787357330322, 0, 0, 312.3603515625);
	CreateObject(3532, 1380.1368408203, -1006.1228637695, 27.31615447998, 0, 0, 274.64562988281);
	CreateObject(3532, 1385.0070800781, -1005.9976196289, 27.333282470703, 0, 0, 270.67565917969);
	CreateObject(1359, 1389.8282470703, -1024.8857421875, 25.346830368042, 0, 0, 0);
	CreateObject(1359, 1380.0529785156, -1001.7298583984, 27.933435440063, 0, 0, 0);
	CreateObject(1568, 1378.7163085938, -1018.3050537109, 25.911483764648, 0, 0, 0);
	CreateObject(1568, 1378.5926513672, -1022.4437255859, 25.772373199463, 0, 0, 0);
	CreateObject(1568, 1385.3708496094, -1022.4841308594, 25.20449256897, 0, 0, 0);
	CreateObject(1568, 1387.6120605469, -1018.3240966797, 25.324493408203, 0, 0, 0);
	CreateObject(1568, 1387.6469726563, -1007.1419067383, 26.494691848755, 0, 0, 0);
	CreateObject(1568, 1379.4306640625, -1007.1896362305, 26.488159179688, 0, 0, 0);
	CreateObject(1568, 1378.6632080078, -1013.6998291016, 26.102523803711, 0, 0, 0);
	CreateObject(1568, 1387.5681152344, -1013.6779785156, 25.792348861694, 0, 0, 0);
	CreateObject(1215, 1387.5909423828, -1014.1780395508, 26.317831039429, 0, 0, 0);
	CreateObject(1215, 1386.7810058594, -1014.1458129883, 26.364242553711, 0, 0, 0);
	CreateObject(1215, 1385.4788818359, -1014.1482543945, 26.409996032715, 0, 0, 0);
	CreateObject(1215, 1384.3505859375, -1014.1376953125, 26.450092315674, 0, 0, 0);
	CreateObject(1215, 1381.7476806641, -1014.1246337891, 26.542253494263, 0, 0, 0);
	CreateObject(1215, 1380.7800292969, -1014.1073608398, 26.576972961426, 0, 0, 0);
	CreateObject(1215, 1379.5543212891, -1014.1029663086, 26.620292663574, 0, 0, 0);
	CreateObject(1215, 1378.4584960938, -1014.0751342773, 26.659923553467, 0, 0, 0);
	CreateObject(1215, 1387.7260742188, -1017.8922729492, 25.927642822266, 0, 0, 0);
	CreateObject(1215, 1386.9506835938, -1017.8776855469, 25.968212127686, 0, 0, 0);
	CreateObject(1215, 1385.5257568359, -1017.8692016602, 26.040878295898, 0, 0, 0);
	CreateObject(1215, 1384.4992675781, -1017.8235473633, 26.097305297852, 0, 0, 0);
	CreateObject(1215, 1381.7132568359, -1017.9165649414, 26.246612548828, 0, 0, 0);
	CreateObject(1215, 1380.8391113281, -1017.9299926758, 26.317064285278, 0, 0, 0);
	CreateObject(1215, 1379.5234375, -1017.8388671875, 26.427110671997, 0, 0, 0);
	CreateObject(1215, 1378.6431884766, -1017.8623046875, 26.497695922852, 0, 0, 0);
	CreateObject(1775, 1387.2501220703, -1011.6919555664, 27.084772109985, 0, 0, 268.69067382813);
	CreateObject(1432, 1383.2517089844, -1010.7578735352, 26.07963180542, 0, 0, 334.19519042969);
	CreateObject(2829, 1385.6436767578, -1012.6443481445, 26.511419296265, 0, 0, 0);
	CreateObject(2222, 1380.8361816406, -1020.3898925781, 26.340847015381, 0, 0, 0);
	CreateObject(2221, 1385.6846923828, -1019.9515991211, 25.979692459106, 0, 0, 0);
	CreateObject(2222, 1380.7548828125, -1012.2628173828, 26.766233444214, 0, 0, 310.37536621094);
	CreateObject(2342, 1383.2724609375, -1010.7959594727, 26.803819656372, 0, 0, 0);
	CreateObject(2222, 1384.1060791016, -1008.4149780273, 27.013561248779, 0, 0, 0);
	CreateObject(1340, 1386.9855957031, -1009.0355224609, 27.376663208008, 0, 0, 180.63439941406);
	CreateObject(3432, 1387.7729492188, -1014.8096923828, 35.94100189209, 0, 0, 270.67565917969);
	CreateObject(3432, 1395.3758544922, -1020.4453125, 35.911094665527, 0, 0, 0);
	CreateObject(11437, 1371.7496337891, -1017.6796264648, 25.58215713501, 0, 0, 0);
	CreateObject(17578, 1387.765625, -1012.1910400391, 32.297496795654, 0, 0, 272.66064453125);  */
	    // mapping noel
 /*
    CreateObject(656, 1480.724609, -1640.016846, 13.224276, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1515.547607, -1606.052612, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1483.641602, -1606.147827, 13.408459, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1443.381348, -1605.817261, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1442.993896, -1638.009277, 13.408458, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1441.800659, -1681.535156, 13.167306, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1443.093140, -1718.311401, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1479.166260, -1718.913452, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1515.969849, -1718.592773, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1515.919312, -1695.353394, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1515.801270, -1669.406982, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3472, 1515.851196, -1637.071899, 13.416035, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1486.998169, -1639.987549, 23.877220, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1481.498169, -1635.145386, 24.711897, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1484.748169, -1638.552368, 25.377216, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1481.482178, -1645.136353, 26.503117, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1477.085938, -1641.086548, 22.709345, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1474.488037, -1641.084839, 28.569717, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1480.487061, -1645.336548, 31.023212, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1477.264404, -1644.336548, 27.704044, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1478.763062, -1643.496094, 31.326160, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1474.488037, -1637.897095, 26.615385, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1477.738037, -1637.231689, 31.439232, 0.0000, 0.0000, 0.0000);
    CreateObject(3534, 1478.988037, -1635.562134, 28.216755, 0.0000, 0.0000, 0.0000);
    CreateObject(1262, 1485.498169, -1640.303223, 28.099182, 0.0000, 0.0000, 292.5000);
    CreateObject(1262, 1480.922363, -1637.360107, 28.366013, 0.0000, 0.0000, 0.0000);
    CreateObject(1262, 1475.988037, -1640.216675, 24.637512, 0.0000, 0.0000, 67.5000);
    CreateObject(1262, 1478.313110, -1645.043091, 28.688749, 0.0000, 0.0000, 135.0000);
    CreateObject(1262, 1475.988037, -1642.313721, 30.785419, 0.0000, 0.0000, 117.3473);
    CreateObject(1262, 1481.163696, -1641.086548, 21.484270, 0.0000, 0.0000, 184.8473);
    CreateObject(1262, 1485.473389, -1640.037598, 32.144180, 0.0000, 0.0000, 306.8785);
    CreateObject(1262, 1482.817139, -1643.410889, 27.549271, 0.0000, 0.0000, 228.2058);
    CreateObject(1262, 1481.213745, -1641.086548, 34.668411, 0.0000, 0.0000, 228.2058);
    CreateObject(7666, 1480.821899, -1639.950806, 38.364799, 0.0000, 0.0000, 0.0000);
    CreateObject(7666, 1480.787842, -1639.973877, 38.364799, 0.0000, 0.0000, 264.7660);
    CreateObject(7666, 1480.866333, -1640.060669, 38.364799, 0.0000, 0.0000, 231.0161);
    CreateObject(7666, 1480.808105, -1639.992798, 38.364799, 0.0000, 0.0000, 326.2500);
    CreateObject(1262, 1481.748169, -1640.779663, 24.064188, 0.0000, 0.0000, 191.2501);
    CreateObject(1262, 1481.413940, -1639.610107, 31.889105, 0.0000, 0.0000, 326.2500);
    CreateObject(1262, 1478.868164, -1634.610107, 24.014900, 0.0000, 0.0000, 33.7500);
    CreateObject(1262, 1477.768311, -1637.360107, 27.707594, 0.0000, 0.0000, 48.3604); */
	// Mapping Grille Transfender
	
	CreateStreamObject(980, -1935.9364013672, 238.85531616211, 36.085891723633, 0, 0, 0);
	CreateStreamObject(980, -2715.994140625, 217.77973937988, 6.0158662796021, 0, 0, 270);
	CreateStreamObject(980, 2387.0795898438, 1043.4392089844, 12.593704223633, 0, 0, 0);
	// Mapping pour le terrain de la LSPD
	CreateStreamObject(14791, 1269.3255615234, 1353.0650634766, 11.858039855957, 0, 0, 0, 500);
    CreateStreamObject(14791, 1269.5991210938, 1370.4490966797, 11.86537361145, 0, 0, 0, 500);
    CreateStreamObject(14791, 1281.6237792969, 1352.5963134766, 11.86537361145, 0, 0, 0, 500);
    CreateStreamObject(14791, 1281.5263671875, 1370.9892578125, 11.86537361145, 0, 0, 0, 500);
    CreateStreamObject(5005, 1496.8743896484, 1759.8426513672, 13.364016532898, 0, 0, 90, 500);
    CreateStreamObject(5005, 1496.6856689453, 1597.2795410156, 13.364016532898, 0, 0, 90, 500);
    CreateStreamObject(5005, 1496.7580566406, 1434.58984375, 13.379639625549, 0, 0, 90, 500);
    CreateStreamObject(5005, 1496.5889892578, 1273.1287841797, 13.385067939758, 0, 0, 90, 500);
    CreateStreamObject(5005, 1458.046875, 1758.5164794922, 13.364016532898, 0, 0, 90, 500);
    CreateStreamObject(5005, 1458.0178222656, 1596.0705566406, 13.364016532898, 0, 0, 90, 500);
    CreateStreamObject(5005, 1457.8782958984, 1433.3615722656, 13.371829032898, 0, 0, 90, 500);
    CreateStreamObject(5005, 1457.9291992188, 1271.1685791016, 13.371829032898, 0, 0, 90, 500);
    CreateStreamObject(12917, 1464.4575195313, 1192.6939697266, 9.8281211853027, 0, 0, 0, 500);
    CreateStreamObject(12917, 1476.6020507813, 1192.8806152344, 9.8203105926514, 0, 0, 0, 500);
    CreateStreamObject(12917, 1489.2030029297, 1195.1877441406, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(8185, 1477.7602539063, 1745.8348388672, 11.912189483643, 0, 0, 0, 500);
    CreateStreamObject(8185, 1477.8048095703, 1568.2336425781, 11.912189483643, 0, 0, 0, 500);
    CreateStreamObject(8185, 1477.79296875, 1389.3548583984, 11.920001983643, 0, 0, 0, 500);
    CreateStreamObject(5005, 1349.6975097656, 1286.3553466797, 13.371829032898, 0, 0, 270, 500);
    CreateStreamObject(3932, 1435.3583984375, 1425.642578125, 11.584988594055, 0, 0, 227.99926757813, 500);
    CreateStreamObject(3749, 1447.0932617188, 1497.8421630859, 15.678727149963, 0, 0, 354, 500);
    CreateStreamObject(5005, 1395.3862304688, 1433.9776611328, 13.721017837524, 0, 0, 235.99951171875, 500);
    CreateStreamObject(3279, 1361.2506103516, 1361.8990478516, 9.8129806518555, 0, 0, 0, 500);
    CreateStreamObject(3279, 1450.6739501953, 1216.1448974609, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(3932, 1442.2197265625, 1419.8173828125, 11.584988594055, 0, 0, 227.99926757813, 500);
    CreateStreamObject(3932, 1429.3115234375, 1430.7763671875, 11.584988594055, 0, 0, 227.99926757813, 500);
    CreateStreamObject(3092, 1405.2799072266, 1220.0816650391, 12.997829437256, 0, 0, 314, 500);
    CreateStreamObject(1410, 1446.3648681641, 1249.783203125, 10.589664459229, 0, 0, 0, 500);
    CreateStreamObject(1410, 1441.6829833984, 1249.8897705078, 10.589664459229, 0, 0, 0, 500);
    CreateStreamObject(1410, 1427.3206787109, 1251.5511474609, 10.589664459229, 0, 0, 0, 500);
    CreateStreamObject(1410, 1422.8314208984, 1251.6469726563, 10.589664459229, 0, 0, 0, 500);
    CreateStreamObject(1410, 1418.2186279297, 1251.7493896484, 10.589664459229, 0, 0, 0, 500);
    CreateStreamObject(1410, 1413.8935546875, 1250.7086181641, 10.589664459229, 0, 0, 28, 500);
    CreateStreamObject(1410, 1403.1654052734, 1247.8635253906, 10.589664459229, 0, 0, 17.998657226563, 500);
    CreateStreamObject(1410, 1398.724609375, 1247.248046875, 10.589664459229, 0, 0, 1.9940185546875, 500);
    CreateStreamObject(11088, 1399.4287109375, 1340.3076171875, 16.226139068604, 0, 0, 0, 500);
    CreateStreamObject(12839, 1393.1435546875, 1372.7724609375, 13.539616584778, 0, 0, 270, 500);
    CreateStreamObject(13648, 1432.2369384766, 1399.2552490234, 9.8129787445068, 0, 0, 65.995849609375, 500);
    CreateStreamObject(18267, 1413.9323730469, 1224.6306152344, 11.955399513245, 0, 0, 143.99996948242, 500);
    CreateStreamObject(12957, 1388.1108398438, 1310.1075439453, 11.767115592957, 0, 0, 58, 500);
    CreateStreamObject(3594, 1389.0015869141, 1342.8494873047, 11.520075798035, 0, 0, 0, 500);
    CreateStreamObject(3594, 1406.6982421875, 1329.7807617188, 11.520075798035, 0, 0, 34, 500);
    CreateStreamObject(1449, 1406.6787109375, 1232.119140625, 10.341966629028, 0, 0, 141.99829101563, 500);
    CreateStreamObject(1499, 1409.3804931641, 1226.7585449219, 12.034017562866, 0, 0, 54, 500);
    CreateStreamObject(1499, 1414.0675048828, 1216.5480957031, 12.033524513245, 0, 0, 53.997802734375, 500);
    CreateStreamObject(16327, 1443.4985351563, 1308.2581787109, 9.8203125, 0, 0, 272, 500);
    CreateStreamObject(1410, 1389.4974365234, 1234.3358154297, 10.589664459229, 0, 0, 1.9940185546875, 500);
    CreateStreamObject(1410, 1378.9246826172, 1252.0263671875, 10.589664459229, 0, 0, 321.99401855469, 500);
    CreateStreamObject(1410, 1374.9501953125, 1254.0430908203, 10.589664459229, 0, 0, 347.99279785156, 500);
    CreateStreamObject(1410, 1384.7895507813, 1234.240234375, 10.582311630249, 0, 0, 1.9940185546875, 500);
    CreateStreamObject(1410, 1365.8062744141, 1254.2080078125, 10.589664459229, 0, 0, 1.9940185546875, 500);
    CreateStreamObject(1410, 1361.3143310547, 1254.1068115234, 10.582311630249, 0, 0, 1.9940185546875, 500);
    CreateStreamObject(1410, 1356.9152832031, 1252.9916992188, 10.589664459229, 0, 0, 25.994018554688, 500);
    CreateStreamObject(16502, 1420.7243652344, 1304.8228759766, 13.339918136597, 0, 0, 358, 500);
    CreateStreamObject(17068, 1407.4915771484, 1351.6700439453, 16.450685501099, 0, 0, 90, 500);
    CreateStreamObject(18566, 1452.5334472656, 1341.5059814453, 10.694429397583, 0, 0, 0, 500);
    CreateStreamObject(1457, 1362.4610595703, 1323.4614257813, 11.479736328125, 0, 0, 113.99996948242, 500);
    CreateStreamObject(12839, 1445.6832275391, 1305.2257080078, 17.15604019165, 0, 0, 182, 500);
    CreateStreamObject(1434, 1443.1600341797, 1309.1439208984, 22.168260574341, 0, 0, 2, 500);
    CreateStreamObject(1434, 1442.2462158203, 1308.6517333984, 22.168260574341, 0, 0, 92, 500);
    CreateStreamObject(1434, 1442.6977539063, 1306.9993896484, 22.168260574341, 0, 0, 2, 500);
    CreateStreamObject(1434, 1444.0327148438, 1307.0645751953, 22.168260574341, 0, 0, 2, 500);
    CreateStreamObject(17011, 1443.2673339844, 1301.7940673828, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(1454, 1438.7895507813, 1299.1051025391, 10.618515014648, 0, 0, 0, 500);
    CreateStreamObject(1454, 1442.1640625, 1298.9353027344, 10.618515014648, 0, 0, 94, 500);
    CreateStreamObject(1454, 1445.4376220703, 1299.396484375, 10.618515014648, 0, 0, 93.9990234375, 500);
    CreateStreamObject(18259, 1372.2531738281, 1233.5633544922, 12.169157981873, 0, 0, 338, 500);
    CreateStreamObject(1491, 1367.3118896484, 1234.2088623047, 12.255095481873, 0, 0, 70, 500);
    CreateStreamObject(1449, 1363.4523925781, 1238.658203125, 10.334613800049, 0, 0, 155.99829101563, 500);
    CreateStreamObject(3092, 1373.4738769531, 1223.5694580078, 13.219400405884, 0, 0, 343.99475097656, 500);
    CreateStreamObject(655, 1423.3688964844, 1240.009765625, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(655, 1383.7125244141, 1246.1358642578, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(660, 1354.1593017578, 1226.8724365234, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(660, 1369.5765380859, 1255.9388427734, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(660, 1393.1529541016, 1222.1995849609, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(669, 1441.8814697266, 1255.7062988281, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(672, 1403.8747558594, 1242.6813964844, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(655, 1361.736328125, 1213.375, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(683, 1380.8743896484, 1217.6345214844, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(3932, 1441.9117431641, 1409.0180664063, 11.584988594055, 0, 0, 141.99926757813, 500);
    CreateStreamObject(2977, 1430.9724121094, 1410.3555908203, 9.8129787445068, 0, 0, 0, 500);
    CreateStreamObject(2977, 1438.2465820313, 1415.6447753906, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(2977, 1436.7049560547, 1415.6364746094, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(1466, 1428.0407714844, 1402.2921142578, 10.977563858032, 0, 0, 336, 500);
    CreateStreamObject(1370, 1431.1511230469, 1429.8975830078, 10.363918304443, 0, 0, 0, 500);
    CreateStreamObject(1370, 1430.4754638672, 1428.9779052734, 10.363918304443, 0, 0, 0, 500);
    CreateStreamObject(1370, 1429.8302001953, 1428.1209716797, 10.363918304443, 0, 0, 0, 500);
    CreateStreamObject(1299, 1428.7280273438, 1431.4565429688, 10.276172637939, 0, 0, 0, 500);
    CreateStreamObject(2062, 1435.2622070313, 1428.9088134766, 10.388945579529, 0, 0, 0, 500);
    CreateStreamObject(933, 1434.8740234375, 1425.1712646484, 9.8203125, 0, 0, 4, 500);
    CreateStreamObject(3425, 1435.4066162109, 1235.0994873047, 21.263256072998, 0, 0, 24, 500);
    CreateStreamObject(655, 1437.0721435547, 1220.6607666016, 9.8203125, 0, 0, 0, 500);
    CreateStreamObject(3052, 1426.8082275391, 1431.3110351563, 9.9466133117676, 0, 0, 0, 500);
    CreateStreamObject(3052, 1427.6604003906, 1432.0341796875, 9.9466133117676, 0, 0, 0, 500);
    CreateStreamObject(3111, 1434.9100341797, 1425.0727539063, 10.834002494812, 0, 0, 0, 500);
    CreateStreamObject(3017, 1434.7110595703, 1424.5446777344, 10.930825233459, 0, 0, 0, 500);
    CreateStreamObject(2110, 1444.1063232422, 1409.9865722656, 9.8203125, 0, 0, 328, 500);
    CreateStreamObject(2110, 1441.9526367188, 1411.5908203125, 9.8203125, 0, 0, 327.99682617188, 500);
    CreateStreamObject(2110, 1439.1208496094, 1408.4255371094, 9.8203125, 0, 0, 327.99682617188, 500);
    CreateStreamObject(2110, 1442.9244384766, 1407.0357666016, 9.8203125, 0, 0, 53.996826171875, 500);
    CreateStreamObject(1429, 1443.1623535156, 1407.8302001953, 10.871683120728, 0, 0, 252, 500);
    CreateStreamObject(1421, 1441.7811279297, 1421.8792724609, 10.582878112793, 0, 0, 0, 500);
    CreateStreamObject(1647, 1444.3891601563, 1418.8491210938, 10.061968803406, 0, 0, 320, 500);
    CreateStreamObject(1647, 1439.9251708984, 1420.2332763672, 10.061968803406, 0, 0, 319.99877929688, 500);
    CreateStreamObject(2066, 1443.0766601563, 1421.1363525391, 9.8203125, 0, 0, 322, 500);
    CreateStreamObject(1647, 1443.4315185547, 1419.6960449219, 10.061968803406, 0, 0, 319.99877929688, 500);
    CreateStreamObject(1647, 1440.9577636719, 1419.5046386719, 10.061968803406, 0, 0, 319.99877929688, 500);
    CreateStreamObject(1472, 1266.3546142578, 1321.8944091797, 10.235478401184, 0, 0, 0, 500);
    CreateStreamObject(1472, 1267.8552246094, 1321.8969726563, 10.235478401184, 0, 0, 0, 500);
    CreateStreamObject(1476, 1269.4716796875, 1322.3629150391, 10.235478401184, 0, 0, 90, 500);
    CreateStreamObject(1476, 1269.5666503906, 1323.9849853516, 10.228144645691, 0, 0, 180, 500);
    CreateStreamObject(1471, 1268.0548095703, 1323.982421875, 10.228144645691, 0, 0, 180, 500);
    CreateStreamObject(1471, 1266.5502929688, 1323.9860839844, 10.228144645691, 0, 0, 179.99450683594, 500);
    CreateStreamObject(1368, 1278.0128173828, 1321.2957763672, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(1368, 1278.173828125, 1325.1077880859, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(1368, 1280.7358398438, 1321.3505859375, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(1368, 1280.7061767578, 1325.1134033203, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(1368, 1282.9831542969, 1321.3918457031, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(1368, 1283.1070556641, 1325.0061035156, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(2008, 1273.7670898438, 1335.7915039063, 9.8129787445068, 0, 0, 0, 500);
    CreateStreamObject(2008, 1276.1258544922, 1335.8101806641, 9.8129787445068, 0, 0, 0, 500);
    CreateStreamObject(2356, 1276.9143066406, 1334.8592529297, 9.8129787445068, 0, 0, 0, 500);
    CreateStreamObject(2356, 1274.6395263672, 1334.8958740234, 9.8129787445068, 0, 0, 0, 500);
    CreateStreamObject(1368, 1275.8023681641, 1325.0601806641, 10.502715110779, 0, 0, 270, 500);
    CreateStreamObject(1368, 1275.8115234375, 1321.4318847656, 10.510048866272, 0, 0, 270, 500);
    CreateStreamObject(9825, 1314.5732421875, 1283.3857421875, 9.681357383728, 0, 0, 0, 500);
    CreateStreamObject(9697, 1326.0595703125, 1304.1240234375, 9.6869802474976, 0, 0, 0, 500);
    CreateStreamObject(9697, 1340.2546386719, 1327.6037597656, 9.8346900939941, 0, 0, 270, 500);
    CreateStreamObject(1457, 1364.9213867188, 1331.0383300781, 11.479736328125, 0, 0, 113.99963378906, 500);
    CreateStreamObject(1457, 1357.5109863281, 1330.8522949219, 11.472402572632, 0, 0, 113.99963378906, 500);
    CreateStreamObject(655, 1360.9890136719, 1329.4016113281, 9.8129796981812, 0, 0, 0, 500);
    CreateStreamObject(9241, 1277.3133544922, 1393.6619873047, 11.879211425781, 0, 0, 88, 500);

	// Mapping Spawn
	
	CreateStreamObject(3005, 1365.5251464844, -1649.1735839844, 12.3828125, 0, 0, 0);
	CreateStreamObject(850, 1363.5614013672, -1646.6629638672, 12.494305610657, 0, 0, 0);
	CreateStreamObject(850, 1361.4267578125, -1652.3624267578, 12.494305610657, 0, 0, 0);
	CreateStreamObject(1442, 1364.0971679688, -1648.5341796875, 12.981295585632, 0, 0, 0);
	CreateStreamObject(3461, 1364.1040039063, -1648.5584716797, 11.661702156067, 0, 0, 0);
	CreateStreamObject(910, 1358.9421386719, -1654.9184570313, 13.651968002319, 0, 0, 90);
	CreateStreamObject(849, 1359.2039794922, -1651.5433349609, 12.778147697449, 0, 0, 0);
	CreateStreamObject(933, 1359.4571533203, -1648.982421875, 12.433191299438, 7, 0, 0);
	CreateStreamObject(960, 1359.7001953125, -1646.8302001953, 12.771574020386, 0, 0, 0);
	CreateStreamObject(1450, 1358.9337158203, -1639.5821533203, 12.983078956604, 0, 0, 90);
	CreateStreamObject(3461, 1359.9809570313, -1644.5107421875, 11.661702156067, 0, 0, 0);
	CreateStreamObject(1442, 1360.0074462891, -1644.5623779297, 12.981295585632, 0, 0, 0);
	
	// Mapping Gare

    CreateStreamObject(1215, 1534.9970703125, -1662.3872070313, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(3439, 1731.943359375, -1861.8414306641, 16.690372467041, 0, 0, 0, 500);
    CreateStreamObject(3439, 1753.0014648438, -1861.7600097656, 16.69047164917, 0, 0, 0, 500);
    CreateStreamObject(996, 1739.5432128906, -1850.0716552734, 13.162817955017, 0, 0, 0, 500);
    CreateStreamObject(996, 1699.3243408203, -1841.6262207031, 13.287056922913, 0, 0, 90, 500);
    CreateStreamObject(1215, 1740.3510742188, -1854.9506835938, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1726.4808349609, -1855.0272216797, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1810.0437011719, -1855.0313720703, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1798.7697753906, -1855.0037841797, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1796.3187255859, -1854.9877929688, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1784.2001953125, -1855.0627441406, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1781.7177734375, -1855.0396728516, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1769.6585693359, -1854.9830322266, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1766.8266601563, -1855.001953125, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1754.8835449219, -1854.9760742188, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1752.0893554688, -1855.0098876953, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1737.6678466797, -1854.9945068359, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1360, 1807.9294433594, -1855.0338134766, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1801.0260009766, -1855.0126953125, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1793.3034667969, -1854.9534912109, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1787.0427246094, -1854.9724121094, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1778.1008300781, -1854.9603271484, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1763.9351806641, -1855.0504150391, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1772.2091064453, -1854.9752197266, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1757.9069824219, -1855.0264892578, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1749.373046875, -1855.0433349609, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1743.5727539063, -1855.0511474609, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1735.1890869141, -1854.8737792969, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1360, 1729.7171630859, -1854.9298095703, 13.18608379364, 0, 0, 90, 500);
    CreateStreamObject(1215, 1732.4155273438, -1855.0040283203, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1746.3354492188, -1855.0234375, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1760.9375, -1855.0406494141, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1775.1921386719, -1855.0161132813, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1790.0700683594, -1855.0172119141, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1804.5479736328, -1854.9543457031, 12.978385925293, 0, 0, 0, 500);
    CreateStreamObject(1346, 1773.6982421875, -1862.0883789063, 13.927207946777, 0, 0, 180, 500);
    CreateStreamObject(984, 1731.3170166016, -1859.7224121094, 13.050742149353, 0, 0, 90, 500);
    CreateStreamObject(984, 1753.6120605469, -1859.9315185547, 13.050742149353, 0, 0, 90, 500);
    CreateStreamObject(984, 1766.4934082031, -1859.9066162109, 13.050742149353, 0, 0, 90, 500);
    CreateStreamObject(984, 1779.3598632813, -1859.91015625, 13.050742149353, 0, 0, 90, 500);
    CreateStreamObject(984, 1792.2255859375, -1859.9321289063, 13.050742149353, 0, 0, 90, 500);
    CreateStreamObject(984, 1805.0556640625, -1859.9245605469, 13.050742149353, 0, 0, 90, 500);
    CreateStreamObject(1215, 1746.3386230469, -1861.0017089844, 13.142372131348, 0, 0, 0, 500);
    CreateStreamObject(1215, 1738.3771972656, -1861.0583496094, 13.142302513123, 0, 0, 0, 500);
    
    // Mapping Blood'z+Gleen Park
    
    CreateStreamObject(3657, 2002.0345458984, -1181.6296386719, 19.643075942993, 0, 0, 330, 500);
    CreateStreamObject(3657, 1989.9592285156, -1177.2182617188, 19.643075942993, 0, 0, 339, 500);
    CreateStreamObject(3657, 1925.4260253906, -1197.7064208984, 19.643075942993, 0, 0, 80, 500);
    CreateStreamObject(1368, 1901.9520263672, -1175.9273681641, 23.648656845093, 0, 0, 78, 500);
    CreateStreamObject(1368, 1902.3968505859, -1173.9151611328, 23.648656845093, 0, 0, 77, 500);
    CreateStreamObject(1368, 2336.3439941406, -1225.1727294922, 27.666299819946, 0, 0, 310, 500);
    CreateStreamObject(1368, 2335.6918945313, -1228.8651123047, 27.666299819946, 0, 0, 209, 500);
    CreateStreamObject(2670, 2334.66015625, -1225.4382324219, 27.068614959717, 0, 0, 0, 500);
    CreateStreamObject(2670, 2333.8693847656, -1226.6623535156, 27.068614959717, 0, 0, 272, 500);
    CreateStreamObject(1329, 2337.2041015625, -1227.2401123047, 27.42919921875, 0, 0, 0, 500);
    CreateStreamObject(12954, 2349.3256835938, -1219.1121826172, 27.562126159668, 0, 0, 270, 500);
    
    // Mapping de la marie
 /*
    CreateStreamObject(2773, 1477.3083496094, -1770.8610839844, 18.312984466553, 0, 0, 0, 500);
    CreateStreamObject(2773, 1477.3306884766, -1768.1697998047, 18.312984466553, 0, 0, 0, 500);
    CreateStreamObject(2773, 1477.3781738281, -1765.5711669922, 18.312984466553, 0, 0, 0, 500);
    CreateStreamObject(2773, 1484.7534179688, -1770.9244384766, 18.312984466553, 0, 0, 0, 500);
    CreateStreamObject(2773, 1484.7725830078, -1768.1846923828, 18.312984466553, 0, 0, 0, 500);
    CreateStreamObject(2773, 1484.7991943359, -1765.4468994141, 18.312984466553, 0, 0, 180, 500);
    CreateStreamObject(984, 1492.0983886719, -1737.2685546875, 13.019492149353, 0, 0, 90, 500);
    CreateStreamObject(984, 1467.1166992188, -1737.23046875, 13.019492149353, 0, 0, 90, 500);
    CreateStreamObject(4724, 1479.1926269531, -1741.9907226563, 14.573851585388, 0, 0, 50, 500);
    CreateStreamObject(1364, 1492.2113037109, -1741.6683349609, 13.330996513367, 0, 0, 180, 500);
    CreateStreamObject(1364, 1463.0189208984, -1741.7550048828, 13.330996513367, 0, 0, 179.99450683594, 500);
    CreateStreamObject(2245, 1482.2186279297, -1737.4613037109, 16.851594924927, 0, 0, 0, 500);
    CreateStreamObject(2245, 1481.6931152344, -1738.0639648438, 16.855571746826, 0, 0, 0, 500);
    CreateStreamObject(2245, 1481.0369873047, -1738.7106933594, 16.867704391479, 0, 0, 0, 500);
    CreateStreamObject(2245, 1480.5447998047, -1739.3231201172, 16.871646881104, 0, 0, 0, 500);
    CreateStreamObject(2245, 1479.9567871094, -1740.0264892578, 16.876340866089, 0, 0, 0, 500);
    CreateStreamObject(2245, 1479.3708496094, -1740.7996826172, 16.881061553955, 0, 0, 0, 500);
    CreateStreamObject(2245, 1482.8875732422, -1737.9818115234, 16.859178543091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1483.5942382813, -1738.5029296875, 16.859178543091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1484.2193603516, -1739.0650634766, 16.859178543091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1478.72265625, -1740.4224853516, 16.88596534729, 0, 0, 0, 500);
    CreateStreamObject(2245, 1478.0903320313, -1739.8868408203, 16.891000747681, 0, 0, 0, 500);
    CreateStreamObject(2245, 1477.4660644531, -1739.337890625, 16.895956039429, 0, 0, 0, 500);
    CreateStreamObject(2245, 1476.7796630859, -1738.7368164063, 16.90186882019, 0, 0, 0, 500);
    CreateStreamObject(2245, 1476.1221923828, -1738.2000732422, 16.907114028931, 0, 0, 0, 500);
    CreateStreamObject(2245, 1475.4302978516, -1737.6519775391, 16.91263961792, 0, 0, 0, 500);
    CreateStreamObject(2245, 1474.8883056641, -1738.2243652344, 16.913866043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1474.3581542969, -1738.8243408203, 16.913866043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1473.8778076172, -1739.3642578125, 16.913866043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1473.1682128906, -1740.3210449219, 16.148241043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1472.6214599609, -1740.9742431641, 16.148241043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1472.0026855469, -1741.7126464844, 14.538866043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1471.400390625, -1742.4312744141, 14.538866043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1484.7532958984, -1739.5554199219, 16.085741043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1485.4345703125, -1740.1137695313, 16.085741043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1486.3146972656, -1740.8923339844, 14.476366043091, 0, 0, 0, 500);
    CreateStreamObject(2245, 1486.9428710938, -1741.3572998047, 14.476366043091, 0, 0, 0, 500);
    CreateStreamObject(15038, 1484.7913818359, -1737.767578125, 13.1640625, 0, 0, 0, 500);
    CreateStreamObject(15038, 1473.8201904297, -1737.7536621094, 13.1640625, 0, 0, 0, 500);
    CreateStreamObject(1215, 1489.5649414063, -1741.7017822266, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1495.1649169922, -1741.6501464844, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1465.6899414063, -1741.7590332031, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1460.4256591797, -1741.9073486328, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1503.60546875, -1750.2578125, 20.203546524048, 0, 0, 0, 500);
    CreateStreamObject(1215, 1483.9053955078, -1750.3798828125, 15.009635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1489.3668212891, -1750.310546875, 15.009635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1493.9470214844, -1750.3002929688, 15.009635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1478.4807128906, -1750.3804931641, 15.009635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1473.3026123047, -1750.3902587891, 15.009635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1467.8521728516, -1750.4390869141, 15.009635925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1482.8370361328, -1737.0557861328, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1474.3919677734, -1737.0296630859, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1483.3723144531, -1737.0531005859, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1483.9249267578, -1737.0485839844, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1484.4317626953, -1737.0477294922, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1475.1275634766, -1737.0336914063, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1475.8167724609, -1737.0584716797, 12.947135925293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1473.6459960938, -1737.0339355469, 12.947135925293, 0, 0, 0, 500);  */
    
    // Mapping Fourriere
    
    CreateStreamObject(972, 1660.5482177734, -1689.0539550781, 19.295269012451, 0, 0, 270, 500);
    CreateStreamObject(972, 1671.7452392578, -1707.1307373047, 19.484375, 0, 0, 0, 500);
    CreateStreamObject(972, 1665.072265625, -1726.0634765625, 19.589176177979, 0, 0, 90, 500);
    CreateStreamObject(972, 1658.0203857422, -1726.0825195313, 19.886161804199, 0, 0, 90, 500);
    CreateStreamObject(972, 1671.8854980469, -1712.5671386719, 19.484375, 0, 0, 0, 500);
    CreateStreamObject(972, 1653.0053710938, -1689.08984375, 19.342096328735, 0, 0, 270, 500);
    CreateStreamObject(987, 1643.0390625, -1704.2541503906, 20.6875, 0, 0, 90, 500);
    
	// Mapping Parking Racer'z
	
	CreateStreamObject(8040, 1457.361328125, -2166.1220703125, 13.434913635254, 0, 0, 0, 500);
    CreateStreamObject(1232, 1437.9826660156, -2166.0190429688, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1439.5977783203, -2165.9833984375, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1441.0223388672, -2166.0739746094, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1442.2691650391, -2166.099609375, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1443.6530761719, -2166.0947265625, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1447.5704345703, -2165.9821777344, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1215, 1444.9444580078, -2166.0224609375, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1446.44921875, -2166.0341796875, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1232, 1449.0279541016, -2166.0053710938, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1450.2736816406, -2165.9680175781, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1451.7022705078, -2165.9904785156, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1463.5684814453, -2166.0341796875, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1215, 1455.6220703125, -2166.0034179688, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1215, 1452.923828125, -2166.0205078125, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1454.31640625, -2165.9140625, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1232, 1462.1231689453, -2166.046875, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1460.8977050781, -2165.8771972656, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1286, 1459.7900390625, -2165.4147949219, 13.420234680176, 0, 0, 0, 500);
    CreateStreamObject(1287, 1459.8465576172, -2166.5673828125, 13.420234680176, 0, 0, 180, 500);
    CreateStreamObject(1232, 1457.02734375, -2166.0732421875, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1458.2452392578, -2166.0434570313, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1464.9349365234, -2165.9411621094, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1466.2535400391, -2165.9050292969, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1215, 1468.8985595703, -2166.0268554688, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1215, 1471.6326904297, -2166.0324707031, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1467.5133056641, -2166.0305175781, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1476.9962158203, -2165.8828125, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1470.3454589844, -2165.9958496094, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1232, 1472.9396972656, -2166.0439453125, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(1215, 1474.1903076172, -2165.8720703125, 13.405487060547, 0, 0, 0, 500);
    CreateStreamObject(1232, 1475.7416992188, -2165.9799804688, 15.477806091309, 0, 0, 0, 500);
    CreateStreamObject(3749, 1495.4853515625, -2166.7373046875, 18.535331726074, 0, 0, 90, 500);
    CreateStreamObject(3881, 1493.8869628906, -2152.3337402344, 14.565801620483, 0, 0, 0, 500);
    CreateStreamObject(4100, 1424.4702148438, -2184.6511230469, 15.921350479126, 0, 0, 320, 500);
    CreateStreamObject(4100, 1438.1971435547, -2184.6735839844, 15.921350479126, 0, 0, 319.99877929688, 500);
    CreateStreamObject(4100, 1452.0010986328, -2184.6975097656, 15.921350479126, 0, 0, 319.99877929688, 500);
    CreateStreamObject(8674, 1497.2846679688, -2179.5241699219, 15.686595916748, 0, 0, 90, 500);
    CreateStreamObject(4100, 1465.7286376953, -2184.7023925781, 15.921350479126, 0, 0, 319.99877929688, 500);
    CreateStreamObject(4100, 1479.4718017578, -2184.7001953125, 15.921350479126, 0, 0, 319.99877929688, 500);
    CreateStreamObject(4100, 1490.6866455078, -2184.6945800781, 15.921350479126, 0, 0, 319.99877929688, 500);
    CreateStreamObject(1215, 1498.2557373047, -2173.3234863281, 13.111198425293, 0, 0, 0, 500);
    CreateStreamObject(1215, 1498.7456054688, -2160.0612792969, 13.111198425293, 0, 0, 0, 500);


    
    //-------------------------------[Fin Mapping]----------------------------------------------//

	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
	    CreatedCars[i] = 0;
	}


	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			AddStaticPickup(1273, 2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			AddStaticPickup(1239, 2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			format(string1, sizeof(string), "[EN VENTE]\n$ %d",BizzInfo[h][bBuyPrice]);
			bizsale = Create3DTextLabel(string1,0x8361FFFF,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+1,15,0,1);
			AddStaticPickup(1272, 2, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[h][bOwned] == 1)
		{
			/*format(string1, sizeof(string), "[OWNED BY]\n%s",BizzInfo[h][bOwner]);
			Create3DTextLabel(string1,0x8361FFFF,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+1,15,0,1);*/
			AddStaticPickup(1239, 2, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		if(SBizzInfo[h][sbOwned] == 0)
		{
			format(string1, sizeof(string), "[EN VENTE]\n$ %d",SBizzInfo[h][sbBuyPrice]);
			sbizsale = Create3DTextLabel(string1,0x8361FFFF,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]+1,15,0,1);
			AddStaticPickup(1272, 2, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
			/*format(string1, sizeof(string), "[OWNED BY]\n%s",SBizzInfo[h][sbOwner]);
			Create3DTextLabel(string1,0x8361FFFF,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]+1,15,0,1);*/
			AddStaticPickup(1239, 2, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
	}
	for(new i = 0; i < sizeof(BurgerDriveIn); i++)
	{
	    BurgerPickUp[i] = CreatePickup(1239, 23, BurgerDriveIn[i][0], BurgerDriveIn[i][1], BurgerDriveIn[i][2]);
		pickups++;
	}
 	for(new i = 0; i < sizeof(ChickenDriveIn); i++)
	{
	    ChickenPickUp[i] = CreatePickup(1239, 23, ChickenDriveIn[i][0], ChickenDriveIn[i][1], ChickenDriveIn[i][2]);
		pickups++;
	} // Les icones 3D
	AddStaticPickup(1239, 2, 1411.9231,-1699.5934,13.5395); //Hotel ipo
	Create3DTextLabel("Hotel",0xB40100FF, 1411.9231,-1699.5934,13.5395,20,0);
	
	AddStaticPickup(1239, 2, 1480.3517,-1771.5747,18.7958); // Mairie ipo
	Create3DTextLabel("La Mairie",0xB40100FF, 1480.3517,-1771.5747,18.7958,20,0);
	
	AddStaticPickup(1239, 2, 1720.3347,-1741.1656,13.5469); // Egliseipo
	Create3DTextLabel("L'Eglise",0xB40100FF, 1720.3347,-1741.1656,13.5469,20,0);
	
	AddStaticPickup(1274, 2, 1465.0997,-1010.7565,26.6132); // Banque
	Create3DTextLabel("Banque",0xB40100FF, 1465.0997,-1010.7565,26.6132,20,0);
	
	/*AddStaticPickup(1239, 2, 2895.9500,-2006.1652,4.1227); // Yakuza ipo
	Create3DTextLabel("QG Yakuza",0xB40100FF, 2895.9500,-2006.1652,4.1227,20,0);*/
	
	AddStaticPickup(1239, 2, 1172.0818,-1325.3009,15.4073); // Hopital ipo
	Create3DTextLabel("L'Hospital",0xB40100FF, 1172.0818,-1325.3009,15.4073,20,0);
	
	AddStaticPickup(1239, 2, 1310.1296,-1366.7975,13.5065); // ANPE
	Create3DTextLabel("L'ANPE",0xB40100FF, 1310.1296,-1366.7975,13.5065,20,0);
	
	AddStaticPickup(1239, 2, 1138.7348,-1328.9739,1019.5487); // Toit hosto
	Create3DTextLabel("Sortie Hospital",0xB40100FF, 1138.7348,-1328.9739,1019.5487,20,0);
	
	AddStaticPickup(1318, 2, 1081.0946,-1697.3175,13.6453); // Auto Ecole
	Create3DTextLabel("L'auto-ecole",0xB40100FF, 1081.0946,-1697.3175,13.6453,20,0);
	
	AddStaticPickup(1239, 2, 2229.6391,-1721.5467,13.2855); // Boxe
	Create3DTextLabel("Salle de Boxe",0xB40100FF, 2229.6391,-1721.5467,13.2855,20,0);
	
	/*AddStaticPickup(1239, 2,-2765.5920,375.6480,6.3359); //Mairie - San Fierro
	Create3DTextLabel("Mairie",0xB40100FF,-2765.5920,375.6480,7.3359,20,0);
	
	AddStaticPickup(1239, 2, -2026.9156,-101.1990,35.1641); //Auto-Ecole - San Fierro
	Create3DTextLabel("Auto-Ecole",0xB40100FF, -2026.9156,-101.1990,36.1641,20,0);
	
	AddStaticPickup(1274, 2, -1492.9871,920.4584,7.1875); // Banque - San Fierro
	Create3DTextLabel("Banque",0xB40100FF, -1492.9871,920.4584,8.1875,20,0);*/
	
	AddStaticPickup(1247, 2, 1555.3501,-1675.7167,16.1953);//LSPD
	Create3DTextLabel("LSPD",0xB40100FF, 1555.3501,-1675.7167,16.1953,20,0);
	
	AddStaticPickup(1314, 2, 362.6089,173.7891,1008.3828);//Guide
	Create3DTextLabel("/guide",0xB40100FF, 362.6089,173.7891,1008.3828,20,0);
	
 	AddStaticPickup(1247, 2, 246.8096,126.7141,1003.2188);//Toit
	Create3DTextLabel("/garage ou /toit",0xB40100FF, 246.8096,126.7141,1003.2188,20,0);
	
	AddStaticPickup(1247, 2, 238.9701,112.7509,1003.2188);//service
	Create3DTextLabel("/service",0xB40100FF, 238.9701,112.7509,1003.2188,20,0);
	
	AddStaticPickup(1247, 2, 251.6416,192.3702,1008.1719);//service FBI
	Create3DTextLabel("/service",0xB40100FF, 251.6416,192.3702,1008.1719,20,0);
	
	AddStaticPickup(1247, 2, 238.9685,114.0949,1003.2188);//equiper
	Create3DTextLabel("/equiper",0xB40100FF, 238.9685,114.0949,1003.2188,20,0);
	
	AddStaticPickup(1247, 2, 249.0410,192.9111,1008.1719);// equiper FBI
	Create3DTextLabel("/equipemoi",0xB40100FF, 249.0410,192.9111,1008.1719,20,0);
	
	AddStaticPickup(1247, 2, 367,159,1009);// equiper FBI
	Create3DTextLabel("/equipergouv",0xB40100FF, 367,159,1009,20,0);
	
	AddStaticPickup(1247, 2, 1778.8132,-1662.7515,14.4375); //FBI ipo
	Create3DTextLabel("FBI",0xB40100FF, 1778.8132,-1662.7515,14.4375,20,0);
	
	AddStaticPickup(1247, 2, 1773.0424,-1655.2365,14.4281); //FBI2 ipo
	Create3DTextLabel("FBI",0xB40100FF, 1773.0424,-1655.2365,14.4281,20,0);
	
	AddStaticPickup(1254, 2, 1122.7083,-2036.6382,69.8942); // Qg Russe
	Create3DTextLabel("QG Russe",0xB40100FF, 1122.7083,-2036.6382,69.8942,20,0);
	
	AddStaticPickup(1314, 2, 561.7921,-1506.7679,14.5128);// Disco
	Create3DTextLabel("Jizzy",0xB40100FF, 561.7921,-1506.7679,14.5128,20,0);
	
	/*AddStaticPickup(1314, 2, 1784.6088,-1297.5316,13.3989);// Disco
	Create3DTextLabel("San News",0xB40100FF, 1784.6088,-1297.5316,13.3989 ,20,0);*/
	
	/*AddStaticPickup(1314, 2, 1409.1796,-1646.7925,13.3817);// Disco
	Create3DTextLabel("Jizzy",0xB40100FF, 1409.1796,-1646.7925,13.3817,20,0);*/
	
	/*AddStaticPickup(1239, 2,597.1426,-1884.3462,3.9734);// /boire
	Create3DTextLabel("/boire",0xB40100FF, 597.1426,-1884.3462,3.9734,20,0);*/
	
	/*AddStaticPickup(1247, 2,2259.6165,-2166.0012,6.0793);// / service mili
	Create3DTextLabel("/armeeservice",0xB40100FF, 2259.6165,-2166.0012,6.0793,20,0);*/
	
	/*AddStaticPickup(1242, 2,2257.0901,-2165.5571,6.7771);// / equiepement
	Create3DTextLabel("/equipement",0xB40100FF, 2257.0901,-2165.5571,6.7771,20,0);*/
	
	AddStaticPickup(1254, 2,2075.6333,-2006.5724,13.5469);// / usine
	Create3DTextLabel("Usine d'armes",0xB40100FF, 2075.6333,-2006.5724,13.5469,20,0);
	
	AddStaticPickup(1314, 2,1836.4948,-1682.4879,13.1993);// / Alhambra
	Create3DTextLabel("Alhambra",0xB40100FF, 1836.4948,-1682.4879,13.1993,20,0);

	AddStaticPickup(1275, 2,1419.4519,-1623.9142,13.5469);// / ZIP
	Create3DTextLabel("ZIP",0xB40100FF, 1419.4519,-1623.9142,13.5469,20,0);
	
	AddStaticPickup(1239, 2,1760.7572,-1276.5766,13.2365);// / Pub
	Create3DTextLabel("/pub",0xB40100FF, 1760.7572,-1276.5766,13.2365,20,0);
	
	/*AddStaticPickup(1239, 2,2142.5330,1625.7997,993.6882);// /decoder
	Create3DTextLabel("/decoder",0xB40100FF, 2142.5330,1625.7997,993.6882,20,0);*/
	
	AddStaticPickup(1239, 2, 2144.0420,1638.5311,993.5761);
    Create3DTextLabel("/braquer",0xB40100FF, 2144.0420,1638.5311,993.5761,20,0);
	
	AddStaticPickup(1275, 2,181.6248,-88.0052,1002.0234);// / /vetement
	Create3DTextLabel("/vetements",0xB40100FF, 181.6248,-88.0052,1002.0234,20,0);
	
	AddStaticPickup(1254, 2,2334.6984,-1234.6534,27.6288);// / ballas
	Create3DTextLabel("QG Blood'z",0xB40100FF, 2334.6984,-1234.6534,27.6288,20,0);
	
	AddStaticPickup(1254, 1, 1828.1594,-1980.4380,13.5469,0); //Surenos HQ
	Create3DTextLabel("QG Mara Salvatrucha",0xB40100FF, 1828.1594,-1980.4380,13.5469,20,0);
	
	AddStaticPickup(1254, 1, 681.5774,-473.8731,16.3136,0); //Surenos HQ
	Create3DTextLabel("QG Ruff Ryders",0xB40100FF, 681.5774,-473.8731,16.3136,20,0);
	
	AddStaticPickup(1239, 1, 2249.9611,-1238.6336,25.5678); //Surenos HQ
	Create3DTextLabel("Maison des Racer'z",0xB40100FF, 2249.9611,-1238.6336,25.5678,20,0);
	
	AddStaticPickup(1254, 1, 691.3549,-1275.9528,13.3622,0); //Cosa HQ
	Create3DTextLabel("QG Cosa Nostra",0xB40100FF, 691.3549,-1275.9528,13.3622,20,0);
	
	AddStaticPickup(1254, 1, 2522.6496,-1679.3818,15.4993,0); //Cryp'z HQ
	Create3DTextLabel("QG Crip's",0xB40100FF, 2522.6496,-1679.3818,15.4993,20,0);
	
	/*AddStaticPickup(1275, 2,636.2297,-1894.1191,4.7507);// / homme
	Create3DTextLabel("/hommeplage",0xB40100FF, 636.2297,-1894.1191,4.7507,20,0);
	
	AddStaticPickup(1275, 2,637.2259,-1900.9946,4.5247);// / femme
	Create3DTextLabel("/femmeplage",0xB40100FF, 637.2259,-1900.9946,4.5247,20,0);*/
	
	/*AddStaticPickup(1314, 2,1836.6171,-1682.0674,13.3405);// / EN constrcutiioo,
	Create3DTextLabel("The Xava [En construction]",0xB40100FF, 1836.6171,-1682.0674,13.3405,20,0);*/
	
	/*AddStaticPickup(1318, 2,629.9409,-1858.7820,5.6675);// / /entrer
	Create3DTextLabel("Centre de toursime",0xB40100FF, 629.9409,-1858.7820,5.6675,20,0)*/
	
	/*AddStaticPickup(1318, 2,387.3407,174.0424,1008.3828);// / /sortir
	Create3DTextLabel("/sortir",0xB40100FF, 387.3407,174.0424,1008.3828,20,0);*/
	
	AddStaticPickup(1318, 2,1352.2112,-1757.4226,13.5078);// / Auchan
	Create3DTextLabel("Auchan",0xB40100FF, 1352.2112,-1757.4226,13.5078,20,0);
	
	/*AddStaticPickup(1318, 2,674.1339,-1869.3616,5.4609);// / gym1
	Create3DTextLabel("Salle de Boxe",0xB40100FF, 674.1339,-1869.3616,5.4609,20,0);
	
	AddStaticPickup(1318, 2,674.3832,-1864.5908,5.4609);// / EN constrcutiioo,
	Create3DTextLabel("Salle de Boxe",0xB40100FF, 674.3832,-1864.5908,5.4609,20,0);*/
	
	AddStaticPickup(1247, 2,1526.9929,-1677.8241,5.8906);// / arreter
	Create3DTextLabel("/arreter",0xB40100FF, 1526.9929,-1677.8241,5.8906,20,0);
	
	AddStaticPickup(1247, 2,1800.9429,-1656.6567,14.4996);// / msparreter
	Create3DTextLabel("/msparreter",0xB40100FF, 1800.9429,-1656.6567,14.4996,20,0);
	
	AddStaticPickup(1239, 2,1524.4833,-1678.0082,6.2188); // Salle d entrainement
	Create3DTextLabel("LSPD",0xB40100FF, 1524.4833,-1678.0082,6.2188,20,0);
	
	AddStaticPickup(1239, 2,1568.5869,-1690.4216,5.9350); // Salle d entrainement
	Create3DTextLabel("Salle d'entrainement",0xB40100FF, 1568.5869,-1690.4216,5.9350,20,0);
	
    AddStaticPickup(1239, 2,1945.2781,-2042.6590,13.5003); // Bar MS-13
	Create3DTextLabel("Bar MS-13",0xB40100FF, 1945.2781,-2042.6590,13.5003,20,0);
	
	/*AddStaticPickup(1239, 2,1708.7024,-1648.9265,23.6953); // aovocat
	Create3DTextLabel("Avocat",0xB40100FF, 1708.7024,-1648.9265,23.6953,20,0);
	
	AddStaticPickup(1239, 2,1708.7019,-1654.2805,23.7018); // detective
	Create3DTextLabel("Detective",0xB40100FF, 1708.7019,-1654.2805,23.7018,20,0);*/
	
	AddStaticPickup(1239, 2,1708.7209,-1659.6443,23.7030); // chauffeur de bus
	Create3DTextLabel("Chauffeur de Bus",0xB40100FF, 1708.7209,-1659.6443,23.7030,20,0);
	
	/*AddStaticPickup(1239, 2,1708.7054,-1664.8760,23.7044); // journaliste
	Create3DTextLabel("Journaliste",0xB40100FF,1708.7054,-1664.8760,23.7044,20,0);*/
	
	AddStaticPickup(1239, 2,1650.0201,-1829.1901,13.2151); // meca
	Create3DTextLabel("Mecanicien",0xB40100FF,1650.0201,-1829.1901,13.2151,20,0);
	
	AddStaticPickup(1239, 2,1609.7626,-2173.9514,14.4792); // meca
	Create3DTextLabel("/tunning",0xB40100FF,1609.7626,-2173.9514,14.4792,20,0);
	
	AddStaticPickup(1239, 2,1567.9176,-2179.8393,13.7413); // meca
	Create3DTextLabel("/peinture",0xB40100FF,1567.9176,-2179.8393,13.7413,20,0);
	
	AddStaticPickup(1239, 2,516.8057,-1298.4241,17.0866); // Voleur de voiture
	Create3DTextLabel("Carjacker",0xB40100FF,516.8057,-1298.4241,17.0866,20,0);
	
	AddStaticPickup(1239, 2,1498.3889,-1581.1712,13.4692); // Resto
	Create3DTextLabel("Chez Luigi",0xB40100FF,1498.3889,-1581.1712,13.4692,20,0);
	
	AddStaticPickup(1239, 2,1735.0490,-1642.6157,23.7570); // garde du corps
	Create3DTextLabel("Garde du Corps",0xB40100FF,1735.0490,-1642.6157,23.7570,20,0);
	
	/*AddStaticPickup(1239, 2,1735.0580,-1648.1445,23.7449); // ambulancier
	Create3DTextLabel("Ambulancier",0xB40100FF,1735.0580,-1648.1445,23.7449,20,0);*/
	
	AddStaticPickup(1239, 2,1735.0833,-1654.2095,23.7316); // booxeur
	Create3DTextLabel("Boxeur",0xB40100FF,1735.0833,-1654.2095,23.7316,20,0);
	
	AddStaticPickup(1239, 2,1735.1013,-1660.1799,23.7185); // taxi
	Create3DTextLabel("Taximan",0xB40100FF,1735.1013,-1660.1799,23.7185,20,0);
	
	AddStaticPickup(1239, 2,-77.4017,-1136.6041,0.6975); // camionneur
	Create3DTextLabel("Camionneur",0xB40100FF,-77.4017,-1136.6041,0.6975,20,0);
	
	AddStaticPickup(1239, 2,2100.7536,-1811.9603,13.0991); // livreur
	Create3DTextLabel("Livreur de Pizza",0xB40100FF,2100.7536,-1811.9603,13.0991,20,0);
	
	AddStaticPickup(1239, 2,1666.6013,-1902.7270,13.1663); // nettoyeur
	Create3DTextLabel("Nettoyeur",0xB40100FF,1666.6013,-1902.7270,13.1663,20,0);
	
	AddStaticPickup(1239, 2,1857.4820,-1870.9549,13.0809); // pute
	Create3DTextLabel("Putes",0xB40100FF,1857.4820,-1870.9549,13.0809,20,0);
	
	AddStaticPickup(1239, 2,1343.9377,-1771.5101,13.0883); // dealer de dorogue
	Create3DTextLabel("Dealer de drogue",0xB40100FF,1343.9377,-1771.5101,13.0883,20,0);
	
	AddStaticPickup(1239, 2,2445.4218,-1759.4573,13.2351); // dealer d'arme
	Create3DTextLabel("Dealer d'arme",0xB40100FF,2445.4218,-1759.4573,13.2351,20,0);
	
	AddStaticPickup(1239, 2,2315.4758,0.3543,26.7422); // dealer d'arme
	Create3DTextLabel("Privé",0xB40100FF,2315.4758,0.3543,26.7422,20,0);
	
    AddStaticPickup(1239, 2,-381.7037,-1426.4058,25.7590); // fermier
	Create3DTextLabel("Fermier",0xB40100FF,-381.7037,-1426.4058,25.7590,20,0);
	
	AddStaticPickup(1239, 2,-90.6181,-1577.0593,2.2116); // /achetermateriaux
	Create3DTextLabel("/achetermatos",0xB40100FF,-90.6191,-1577.0593,2.2116,20,0);
	
	AddStaticPickup(1239, 2,-70.8583,-1574.4824,2.2116); // /acheterdrogue
	Create3DTextLabel("/acheterdrogue",0xB40100FF,-70.8583,-1574.4824,2.2116,20,0);
	
	AddStaticPickup(1239, 2,1833.6816,-1842.5489,13.1225); // 24/7 station
	Create3DTextLabel("24/7",0xB40100FF,1833.6816,-1842.5489,13.1225,20,0);
	
	AddStaticPickup(1239, 2,1315.4681,-897.8530,39.1476); // 24/7 Burger nord
	Create3DTextLabel("24/7",0xB40100FF,1315.4681,-897.8530,39.1476,20,0);
	
	AddStaticPickup(1239, 2,1200.3056,-918.6448,42.7568); //Burger nord
	Create3DTextLabel("Mcdonald's",0xB40100FF,1200.3056,-918.6448,42.7568,20,0);
	
	AddStaticPickup(1239, 2,810.8272,-1616.2800,13.0913); //Burger Sud
	Create3DTextLabel("Quick",0xB40100FF,810.8272,-1616.2800,13.0913,20,0);
	
	AddStaticPickup(1239, 2,2105.2712,-1806.5080,13.2741); //Pizzeria
	Create3DTextLabel("Borsalino",0xB40100FF,2105.2712,-1806.5080,13.2741,20,0);
	
	AddStaticPickup(1239, 2,2309.8613,-1643.6754,14.4215); //Bar Cryp'z
	Create3DTextLabel("Green Bottle",0xB40100FF,2309.8613,-1643.6754,14.4215,20,0);
	
	AddStaticPickup(1239, 2,1038.1346,-1340.4548,13.3361); //Donut's
	Create3DTextLabel("Donut's",0xB40100FF,1038.1346,-1340.4548,13.3361,20,0);
	
	AddStaticPickup(1239, 2,295.6943,-80.5098,1001.1354); // /acheterarmes
	Create3DTextLabel("/acheterarmes",0xB40100FF,295.6943,-80.5098,1001.1354,20,0);
	
	AddStaticPickup(1239, 2,1368.3857,-1279.7045,13.3663); //Ammu Nation
	Create3DTextLabel("Ammu-Nation",0xB40100FF,1368.3857,-1279.7045,13.3663,20,0);
	
	pickups=pickups+71;
	gunamm = CreatePickup(1239,23,2544.7388,-1295.3354,1031.4219);
	Aide = CreateMenu("~b~LVV ~w~RP ~r~ aide",1,125,150,300);
    if(IsValidMenu(Aide)) {
    	SetMenuColumnHeader(Aide , 0, "Choisissez une aide:");
        AddMenuItem(Aide ,0,"Commandes Generales");
     	AddMenuItem(Aide ,0,"Commandes Biz");
    	AddMenuItem(Aide ,0,"Commandes Maison");
    	AddMenuItem(Aide ,0,"Commandes Telephone");
        AddMenuItem(Aide ,0,"Commandes Job");
        AddMenuItem(Aide ,0,"Commandes Faction");
        AddMenuItem(Aide ,0,"Commandes Leader");
		AddMenuItem(Aide1 ,0,"Commandes Admins");
        AddMenuItem(Aide ,0,"- Sortir -");
    }
	Aide1 = CreateMenu("~b~La ~w~Vie ~b~Virtuelle ~w~RP",1,125,150,300);
    if(IsValidMenu(Aide1)) {
    	SetMenuColumnHeader(Aide1 , 0, "Choisissez une aide:");
        AddMenuItem(Aide1 ,0,"Commandes Generales");
     	AddMenuItem(Aide1 ,0,"Commandes Biz");
    	AddMenuItem(Aide1 ,0,"Commandes Maison");
    	AddMenuItem(Aide1 ,0,"Commandes Telephone");
        AddMenuItem(Aide1 ,0,"Commandes Job");
        AddMenuItem(Aide1 ,0,"Commandes Faction");
        AddMenuItem(Aide1 ,0,"Commandes Leader");

        AddMenuItem(Aide1 ,0,"- Sortir -");
   	}
	printf("Loading %d pickups... Loaded successfuly !",pickups);
	new randa = random(sizeof(RandCars));
	randa = random(sizeof(RandCars));carselect[0] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[1] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[2] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[3] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[4] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[5] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[6] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[7] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[8] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[9] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[10] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[11] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[12] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[13] = RandCars[randa][0];
	randa = random(sizeof(RandLCars));carselect[14] = RandLCars[randa][0];
	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	synctimer = SetTimer("SyncUp", 60000, 1);
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	cartimer = SetTimer("CarCheck", 30000, 1);
	pickuptimer = SetTimer("CustomPickups", 1000, 1);
	spectatetimer = SetTimer("Spectator", 2000, 1);
	idletimer = SetTimer("IdleKick", idletime, 1);
	productiontimer = SetTimer("Production", 300000, 1); //5 mins (300000)
	accountstimer = SetTimer("SaveAccounts", 900000, 1); //15 mins every account saved
    stoppedvehtimer = SetTimer("StoppedVehicle", RunOutTime, 1);
    burgertimer = SetTimer("UpdateBurgerPositions", 1000, 1);
	chickentimer = SetTimer("UpdateChickenPositions", 1000, 1);
	tracetimer = SetTimer("TraceLastCall", 300000, 1);
	SetTimer("RobTimer", 1000, 1);
	timer = SetTimer("PingKicker",1000,1);
	SetTimer("Statistiques", 1000, 1)
	ChangeTemps();
	ConnectNPC("Andre_Utino","train_sf");
	ConnectNPC("Max_Dinorito","train_ls");
	ConnectNPC("Robert_Louvero","train_lv");
	ConnectNPC("Lorenzo_McCoy","at400_lv");
	ConnectNPC("Angelina_Rounot","at400_sf");
	ConnectNPC("Matthieu_Hubert","at400_ls");
	Train1 = AddStaticVehicle(538,-1944.3750,112.0698,27.0006,200.0,1,1); 
	Train2 = AddStaticVehicle(538,1700.7551,-1953.6531,14.8756,200.0,-1,-1); 
	Train3 = AddStaticVehicle(538,1462.0745,2630.8787,10.8203,200.0,-1,-1); 
	Avion1 = AddStaticVehicle(577,1477.4631,1647.4589,10.7281,180.2741,8,7);
    Avion2 = AddStaticVehicle(577,-1513.0963,-21.4589,14.0641,314.4915,8,7); 
    Avion3 = AddStaticVehicle(577,2014.6605,-2493.9668,13.4887,89.6533,8,7); 
	return 1;
}
public OnGameModeExit()
{
	for( new i = 0; i < MAX_STREAM_OBJECT; i++)
	{
	    DestroyStreamObject( i );
	}
	KillTimer(timer);
	Script_OnGameModeExit();
	return 1;
}
stock IsPlayerInInvalidNosVehicle(playerid,vehicleid)
{
	new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
	{
		581,509,481,462,521,463,510,522,461,448,
		471,468,586,592,577,511,512,593,520,553,
		476,519,460,513,548,425,417,487,488,497,
		563,447,469,472,473,493,595,484,430,453,
		452,446,454,523
	};
	vehicleid = GetPlayerVehicleID(playerid);

	if(IsPlayerInVehicle(playerid,vehicleid))
	{
		for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
		{
			if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i])
			{
				return true;
			}
		}
		return false;
	}
	return 0;
}
public SyncUp()
{
	SyncTime();
	DollahScoreUpdate();
}

public SyncTime()
{
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		ghour = tmphour;
		PayDay();
		if (realtime)
		{
			SetWorldTime(tmphour);
		}
	}
}

public SaveAccounts()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SaveAccount(i);
			if(PlayerInfo[i][pJob] > 0)
	    	{
	    	    if(PlayerInfo[i][pContractTime] < 25)
	    	    {
					PlayerInfo[i][pContractTime] ++;
				}
	    	}
		}
	}
}

public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public Production()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5) { if(FishCount[i] >= 3) { PlayerInfo[i][pFishes] = 0; } else { FishCount[i] += 1; } }
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; GameTextForPlayer(i, "~p~Les effets sont~n~~w~partis", 3500, 1); }
		    if(PlayerInfo[i][pPayDay] < 6) { PlayerInfo[i][pPayDay] += 1; } //+ 5 min to PayDay anti-abuse
		    for(new k = 0; k < MAX_PLAYERS; k++)
			{
				if(IsPlayerConnected(k))
				{
				    if(gTeam[k] == 2 && CrimInRange(80.0, i,k))
				    {
					}
					else
					{
					    WantedPoints[i] -= 3;
					    if(WantedPoints[i] < 0) { WantedPoints[i] = 0; }
					    new points = WantedPoints[i];
					    new wlevel;
					    if(points > 0)
						{
						    new yesno;
							if(points == 3) { if(WantedLevel[i] != 1) { WantedLevel[i] = 1; wlevel = 1; yesno = 1; } }
							else if(points >= 4 && points <= 5) { if(WantedLevel[i] != 2) { WantedLevel[i] = 2; wlevel = 2; yesno = 1; } }
							else if(points >= 6 && points <= 7) { if(WantedLevel[i] != 3) { WantedLevel[i] = 3; wlevel = 3; yesno = 1; } }
							else if(points >= 8 && points <= 9) { if(WantedLevel[i] != 4) { WantedLevel[i] = 4; wlevel = 4; yesno = 1; } }
							else if(points >= 10 && points <= 11) { if(WantedLevel[i] != 5) { WantedLevel[i] = 5; wlevel = 5; yesno = 1; } }
							else if(points >= 12 && points <= 13) { if(WantedLevel[i] != 6) { WantedLevel[i] = 6; wlevel = 6; yesno = 1; } }
							else if(points >= 14) { if(WantedLevel[i] != 10) { WantedLevel[i] = 10; wlevel = 10; yesno = 1; } }
							else if(points <= 0) { if(WantedLevel[i] != 0) { ClearCrime(i); WantedLevel[i] = 0; wlevel = 0; yesno = 1;} }
							if(yesno)
							{
								format(string, sizeof(string), "Niveau de recherche actuelle: %d", wlevel);
								SendClientMessage(i, COLOR_YELLOW, string);
							}
						}
					}
				}
			}
		}
	}
}

public DateProp(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (strcmp(playername, HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			OnPropUpdate();
		}
	}
	return 1;
}

/*public Checkprop()
{
	new olddate;
	new string[256];
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 5)
			{
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hHealthx] = 0;
				HouseInfo[h][hHealthy] = 0;
				HouseInfo[h][hHealthz] = 0;
				HouseInfo[h][hArmourx] = 0;
				HouseInfo[h][hArmoury] = 0;
				HouseInfo[h][hArmourz] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 418;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "Le Gouvernement", 0, strlen("Le Gouvernement"), 255);
				format(string, sizeof(string), "IMMOBILIER: Une maison est disponible pour une valeur de $%d",HouseInfo[h][hValue]);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				OnPropUpdate();
			}
		}
	}
	return 1;
}*/

public PayDay()
{
	new string[128];
	new account,interest;
	new rent = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLevel] > 0)
		    {
			    if(MoneyMessage[i]==1)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Vous n'avez pas payer votre dette, vous avez gagnez le droit d'aller en prison.");
				    GameTextForPlayer(i, "~r~Arreter!", 2000, 1);
				    SetPlayerInterior(i, 6);
				    PlayerInfo[i][pInt] = 6;
			   		SetPlayerPos(i, 264.6288,77.5742,1001.0391);
		            PlayerInfo[i][pJailed] = 1;
		            SafeResetPlayerWeapons(i);
		            SafeResetPlayerMoney(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(string, sizeof(string), "Vous avez été emprisonner pour %d secondes.   Caution: Imposible", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_WHITE, string);
				}
				new playername2[MAX_PLAYER_NAME];
				GetPlayerName(i, playername2, sizeof(playername2));
				account = PlayerInfo[i][pAccount];
				new key = PlayerInfo[i][pPhousekey];
				if(key != 255)
				{
					rent = HouseInfo[key][hRent];
					if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
					{
						rent = 0;
					}
					else if(rent > GetPlayerMoney(i))
					{
						PlayerInfo[i][pPhousekey] = 255;
						SendClientMessage(i, COLOR_WHITE, "Vous avez été ejecter.");
						rent = 0;
					}
					HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
				}
				new tmpintrate;
				if (key != 255 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
				{
				    if(PlayerInfo[i][pDonateRank] > 0) { tmpintrate = 3; }
					else { tmpintrate = 1; }
				}
				else
				{
				    if(PlayerInfo[i][pDonateRank] > 0) { tmpintrate = 3; }
					else { tmpintrate = 1; }
				}
				if(PlayerInfo[i][pPayDay] >= 5)
				{
				    Tax += TaxValue;
				    PlayerInfo[i][pAccount] -= TaxValue;
					new checks = PlayerInfo[i][pPayCheck] / 5;
					if(PlayerInfo[i][pDonateRank] > 0)
					{
					    new bonus = PlayerInfo[i][pPayCheck] / 10;
					    checks += bonus;
					}
				    new ebill = (PlayerInfo[i][pAccount]/10000)*(PlayerInfo[i][pLevel]);
				    account += checks;
				    if(PlayerInfo[i][pAccount] > 0)
				    {
				    	PlayerInfo[i][pAccount] -= ebill;
				    	SBizzInfo[4][sbTill] += ebill;
					}
					else
					{
					    ebill = 0;
					}
					interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
					PlayerInfo[i][pExp]++;
					PlayerPlayMusic(i);
					PlayerInfo[i][pAccount] = account+interest;
					SendClientMessage(i, COLOR_GREEN, "|___ Salaire ___|");
					format(string, sizeof(string), "  Salaire HTC : $%d Taxe: -$%d", checks, TaxValue);
					SendClientMessage(i, COLOR_WHITE, string);
					if(PlayerInfo[i][pPhousekey] != 255 || PlayerInfo[i][pPbiskey] != 255)
					{
					    format(string, sizeof(string), "Facture d'électricitée: -$%d", ebill);
						SendClientMessage(i, COLOR_GRAD1, string);
					}
					format(string, sizeof(string), "  Montant sur votre compte: $%d", account - checks);
					SendClientMessage(i, COLOR_WHITE, string);
					format(string, sizeof(string), "  Taux d'interets: 0.%d pourcent",tmpintrate);
					SendClientMessage(i, COLOR_GRAD2, string);
					format(string, sizeof(string), "  Interets perçu $%d", interest);
					SendClientMessage(i, COLOR_GRAD3, string);
					SendClientMessage(i, COLOR_GREEN, "|--------------------------------------|");
					format(string, sizeof(string), "  Nouvelle Balance: $%d", PlayerInfo[i][pAccount]);
					SendClientMessage(i, COLOR_GRAD5, string);
					format(string, sizeof(string), "  Location: -$%d", rent);
					SendClientMessage(i, COLOR_GRAD5, string);
					format(string, sizeof(string), "~y~La Paye");
					GameTextForPlayer(i, string, 5000, 1);
					rent = 0;
					PlayerInfo[i][pPayDay] = 0;
					ArgentGouv += interest;
					SaveStat();
					PlayerInfo[i][pPayCheck] = 0;
					PlayerInfo[i][pConnectTime] += 1;
					if(FarmerVar[i] == 0)
					{
						FarmerPickup[i][0] = 0;
					}
					if(DrugFarmerVar[i] == 0)
					{
						DrugFarmerPickup[i][0] = 0;
					}
					if(SmugglerWork[i] == 0)
					{
						PayDaySecure[i] = 0;
					}
					if(PlayerInfo[i][pDonateRank] > 0)
					{
					    PlayerInfo[i][pPayDayHad] += 1;
					    if(PlayerInfo[i][pPayDayHad] >= 5)
					    {
					        PlayerInfo[i][pExp]++;
					        PlayerInfo[i][pPayDayHad] = 0;
					    }
					}
				}
				else
				{
				    SendClientMessage(i, COLOR_WHITE, "* Vous n'avez pas travaillez assez longtemps pour obtenir la paye.");
				}
			}
		}
	}
	SaveAccounts();
	return 1;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerNPC(playerid)){ return 1; }
	if(IsPlayerConnected(playerid))
	{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "users/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
			    strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			    new var[64];
				format(var, 64, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				format(var, 64, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 64, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 64, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 64, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 64, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 64, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 64, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 64, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 64, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 64, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 64, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 64, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 64, "Money=%d\n",750);fwrite(hFile, var);
				format(var, 64, "Bank=%d\n",10000);fwrite(hFile, var);
				format(var, 64, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 64, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 64, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 64, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 64, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 64, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 64, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 64, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 64, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 64, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 64, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 64, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 64, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 64, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 64, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 64, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
				format(var, 64, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 64, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 64, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 64, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 64, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 64, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 64, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 64, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 64, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 64, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 64, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 64, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 64, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 64, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 64, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 64, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 64, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 64, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 64, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 64, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 64, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 64, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 64, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 64, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 64, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
				    PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 64, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 64, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 64, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 64, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 64, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 64, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 64, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 64, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 64, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 64, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 64, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 64, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 64, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 64, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 64, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 64, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 64, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 64, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 64, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 64, "Watch=%d\n",PlayerInfo[playerid][pWatch]);fwrite(hFile, var);
				format(var, 64, "Crashed=%d\n",PlayerInfo[playerid][pCrashed]);fwrite(hFile, var);
				format(var, 64, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 64, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 64, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 64, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 64, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 64, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 64, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 64, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 64, "Mission=%d\n",PlayerInfo[playerid][pMissionNr]);fwrite(hFile, var);
				format(var, 64, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 64, "VirWorld=%d\n",PlayerInfo[playerid][pVirWorld]);fwrite(hFile, var);
				if(PlayerInfo[playerid][pDonateRank] < 1) { PlayerInfo[playerid][pFuel] = 0; }
				format(var, 64, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 64, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 64, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 64, "FishTool=%d\n",PlayerInfo[playerid][pFishTool]);fwrite(hFile, var);
    			format(var, 64, "Note1=%s\n",PlayerInfo[playerid][pNote1]);fwrite(hFile, var);
				format(var, 64, "Note1s=%d\n",PlayerInfo[playerid][pNote1s]);fwrite(hFile, var);
				format(var, 64, "Note2=%s\n",PlayerInfo[playerid][pNote2]);fwrite(hFile, var);
				format(var, 64, "Note2s=%d\n",PlayerInfo[playerid][pNote2s]);fwrite(hFile, var);
				format(var, 64, "Note3=%s\n",PlayerInfo[playerid][pNote3]);fwrite(hFile, var);
				format(var, 64, "Note3s=%d\n",PlayerInfo[playerid][pNote3s]);fwrite(hFile, var);
				format(var, 64, "Note4=%s\n",PlayerInfo[playerid][pNote4]);fwrite(hFile, var);
				format(var, 64, "Note4s=%d\n",PlayerInfo[playerid][pNote4s]);fwrite(hFile, var);
				format(var, 64, "Note5=%s\n",PlayerInfo[playerid][pNote5]);fwrite(hFile, var);
				format(var, 64, "Note5s=%d\n",PlayerInfo[playerid][pNote5s]);fwrite(hFile, var);
				format(var, 64, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 64, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 64, "Lighter=%d\n",PlayerInfo[playerid][pLighter]);fwrite(hFile, var);
				format(var, 64, "Cigarettes=%d\n",PlayerInfo[playerid][pCigarettes]);fwrite(hFile, var);
				format(var, 64, "Biere=%d\n",PlayerInfo[playerid][pBiere]);fwrite(hFile, var);
				format(var, 64, "Locked=%d\n",PlayerInfo[playerid][pLocked]);fwrite(hFile, var);
                format(var, 64, "Robbank=%d\n",PlayerInfo[playerid][probbank]);fwrite(hFile, var);
                format(var, 64, "Decoder=%d\n",PlayerInfo[playerid][Decoder]);fwrite(hFile, var);
				format(var, 64, "Mask=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
   				format(var, 64, "Radio=%d\n",PlayerInfo[playerid][Radio]);fwrite(hFile, var);
				format(var, 64, "Frequence=%d\n",PlayerInfo[playerid][Frequence]);fwrite(hFile, var);
				format(var, 64 ,"Avertissement=0\n");fwrite(hFile,var);
				fclose(hFile);
				SendClientMessage(playerid, COLOR_YELLOW, "Compte crée , merci à vous, vous pouvez désormais vous logué (/login [password]).");
			}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid)){ return 1; }
	return 1;
}


public OnPlayerLogin(playerid,password[])
{
	if(IsPlayerNPC(playerid)){ return 1; }
	new tmp2[256];
    new string2[64];
	new playername2[MAX_PLAYER_NAME];
	new playernamesplit[3][MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername2, sizeof(playername2));
	split(playername2, playernamesplit, '_');
	format(string2, sizeof(string2), "users/%s.ini", playername2);
	new File: UserFile = fopen(string2, io_read);
	if ( UserFile )
	{
	    new PassData[256];
	    new keytmp[256], valtmp[256];
	    fread( UserFile , PassData , sizeof( PassData ) );
	    keytmp = ini_GetKey( PassData );
	    if( strcmp( keytmp , "Key" , true ) == 0 )
		{
			valtmp = ini_GetValue( PassData );
			strmid(PlayerInfo[playerid][pKey], valtmp, 0, strlen(valtmp)-1, 255);
		}
		if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0 )
		{
			    new key[ 256 ] , val[ 256 ];
			    new Data[ 256 ];
			    while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLevel] = strval( val ); }
			    	if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
			        if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDonateRank] = strval( val ); }
			        if( strcmp( key , "UpgradePoints" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][gPupgrade] = strval( val ); }
			        if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
			        if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
			        if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSex] = strval( val ); }
			        if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAge] = strval( val ); }
			        if( strcmp( key , "Origin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pOrigin] = strval( val ); }
			        if( strcmp( key , "CK" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCK] = strval( val ); }
			        if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMuted] = strval( val ); }
			        if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pExp] = strval( val ); }
			        if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCash] = strval( val ); }
			        if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAccount] = strval( val ); }
			        if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrimes] = strval( val ); }
			        if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKills] = strval( val ); }
			        if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDeaths] = strval( val ); }
			        if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArrested] = strval( val ); }
			        if( strcmp( key , "WantedDeaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWantedDeaths] = strval( val ); }
			        if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhoneBook] = strval( val ); }
			        if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLottoNr] = strval( val ); }
			        if( strcmp( key , "Fishes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishes] = strval( val ); }
			        if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBiggestFish] = strval( val ); }
			        if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJob] = strval( val ); }
			        if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayCheck] = strval( val ); }
			        if( strcmp( key , "HeadValue" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHeadValue] = strval( val ); }
			        if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailed] = strval( val ); }
			        if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailTime] = strval( val ); }
			        if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMats] = strval( val ); }
			        if( strcmp( key , "Drugs" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugs] = strval( val ); }
			        if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLeader] = strval( val ); }
			        if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMember] = strval( val ); }
			        if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFMember] = strval( val ); }
			        if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRank] = strval( val ); }
			        if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pChar] = strval( val ); }
			        if( strcmp( key , "ContractTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pContractTime] = strval( val ); }
			        if( strcmp( key , "DetSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDetSkill] = strval( val ); }
			        if( strcmp( key , "SexSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSexSkill] = strval( val ); }
			        if( strcmp( key , "BoxSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxSkill] = strval( val ); }
			        if( strcmp( key , "LawSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLawSkill] = strval( val ); }
			        if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechSkill] = strval( val ); }
			        if( strcmp( key , "JackSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJackSkill] = strval( val ); }
			        if( strcmp( key , "CarSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarSkill] = strval( val ); }
			        if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugsSkill] = strval( val ); }
			        if( strcmp( key , "CookSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCookSkill] = strval( val ); }
			        if( strcmp( key , "FishSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishSkill] = strval( val ); }
			        if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSHealth] = floatstr( val ); }
			        if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHealth] = floatstr( val ); }
			        if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInt] = strval( val ); }
			        if( strcmp( key , "Local" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocal] = strval( val ); }
			        if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTeam] = strval( val ); }
			        if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pModel] = strval( val ); }
			        if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPnumber] = strval( val ); }
			        if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhousekey] = strval( val ); }
			        if( strcmp( key , "Bizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPbiskey] = strval( val ); }
			        if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_x] = floatstr( val ); }
			        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_y] = floatstr( val ); }
			        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_z] = floatstr( val ); }
			        if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLic] = strval( val ); }
                    if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLic] = strval( val ); }
					if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLic] = strval( val ); }
			        if( strcmp( key , "FishLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLic] = strval( val ); }
			        if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic] = strval( val ); }
			        if( strcmp( key , "Gun1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun1] = strval( val ); }
			        if( strcmp( key , "Gun2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun2] = strval( val ); }
			        if( strcmp( key , "Gun3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun3] = strval( val ); }
			        if( strcmp( key , "Gun4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun4] = strval( val ); }
			        if( strcmp( key , "Ammo1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo1] = strval( val ); }
			        if( strcmp( key , "Ammo2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo2] = strval( val ); }
			        if( strcmp( key , "Ammo3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo3] = strval( val ); }
			        if( strcmp( key , "Ammo4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo4] = strval( val ); }
			        if( strcmp( key , "CarTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarTime] = strval( val ); }
			        if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDay] = strval( val ); }
			        if( strcmp( key , "PayDayHad" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDayHad] = strval( val ); }
			        if( strcmp( key , "Watch" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWatch] = strval( val ); }
			        if( strcmp( key , "Crashed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrashed] = strval( val ); }
			        if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWins] = strval( val ); }
			        if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLoses] = strval( val ); }
			        if( strcmp( key , "AlcoholPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAlcoholPerk] = strval( val ); }
			        if( strcmp( key , "DrugPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugPerk] = strval( val ); }
			        if( strcmp( key , "MiserPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMiserPerk] = strval( val ); }
			        if( strcmp( key , "PainPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPainPerk] = strval( val ); }
			        if( strcmp( key , "TraderPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTraderPerk] = strval( val ); }
			        if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTut] = strval( val ); }
			        if( strcmp( key , "Mission" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMissionNr] = strval( val ); }
			        if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarns] = strval( val ); }
			        if( strcmp( key , "VirWorld" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVirWorld] = strval( val ); }
			        if( strcmp( key , "Fuel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFuel] = strval( val ); }
			        if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMarried] = strval( val ); }
			        if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "FishTool" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishTool] = strval( val ); }
			        if( strcmp( key , "Note1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote1], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note1s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote1s] = strval( val ); }
			        if( strcmp( key , "Note2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote2], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note2s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote2s] = strval( val ); }
			        if( strcmp( key , "Note3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote3], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note3s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote3s] = strval( val ); }
			        if( strcmp( key , "Note4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote4], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note4s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote4s] = strval( val ); }
			        if( strcmp( key , "Note5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote5], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note5s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote5s] = strval( val ); }
			        if( strcmp( key , "InvWeapon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvWeapon] = strval( val ); }
			        if( strcmp( key , "InvAmmo" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvAmmo] = strval( val ); }
			        if( strcmp( key , "Lighter" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLighter] = strval( val ); }
			        if( strcmp( key , "Cigarettes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCigarettes] = strval( val ); }
			        if( strcmp( key , "Biere" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBiere] = strval( val ); }
			        if( strcmp( key , "Locked" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocked] = strval( val ); }
			        if( strcmp( key , "Robbank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][probbank] = strval( val ); }
			        if( strcmp( key , "Decoder" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][Decoder] = strval( val ); }
			        if( strcmp( key , "Mask" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMask] = strval( val ); }
			        if( strcmp( key , "Radio" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][Radio] = strval( val ); }
 			        if( strcmp( key , "Frequence" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][Frequence] = strval( val );}
 			        for (new i = 0; i < 13; i++)
					{
					    new str[128];
					    format(str,sizeof(str),"Weapon_%d",i);
 			        	if( strcmp( key , str , true ) == 0 ) { val = ini_GetValue( Data ); Asweapon[playerid][i][0] = strval( val );}
						format(str,sizeof(str),"Ammo_%d",i);
					 	if( strcmp( key , str , true ) == 0 ) { val = ini_GetValue( Data ); Asweapon[playerid][i][1] = strval( val );}
					 	ResetPlayerWeapons(playerid);
					 	GivePlayerWeapon(playerid,Asweapon[playerid][i][0],Asweapon[playerid][i][1]);
					}
					MedicBill[playerid] = 0
                }
		        if( strcmp( key , "Avertissement" , true ) == 0 ) { val = ini_GetValue( Data );Avertissement[playerid] = strval( val );}
                fclose(UserFile);
				SpawnPlayer(playerid);
				SetCameraBehindPlayer(playerid);
		}
		else
		{
			ShowPlayerDialog(playerid,Login,DIALOG_STYLE_INPUT,"Loguez vous","Veuillez entrez votre mot de passe\nPour vous Loguez","Ok","Annuler");

			SendClientMessage(playerid, COLOR_WHITE, "SERVER: Mot de pass incorect.");
	        fclose(UserFile);
	        gPlayerLogTries[playerid] += 1;
	        if(gPlayerLogTries[playerid] == 4) { Ban(playerid); }
	        return 1;
		}
		SafeResetPlayerMoney(playerid);
		GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pHealth] = 50.0;
			PlayerInfo[playerid][pPos_x] = 1612.3240;
			PlayerInfo[playerid][pPos_y] = -2330.1670;
			PlayerInfo[playerid][pPos_z] = 13.5469;
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pLocal] = 255;
			PlayerInfo[playerid][pTeam] = 3;
			PlayerInfo[playerid][pModel] = 135;
			new randphone = 100000 + random(899999);
			PlayerInfo[playerid][pPnumber] = randphone;
			PlayerInfo[playerid][pPhousekey] = 255;
			PlayerInfo[playerid][pPbiskey] = 255;
			PlayerInfo[playerid][pAccount] = 0;
			PlayerInfo[playerid][pReg] = 1;
			SafeGivePlayerMoney(playerid, 300);
		}
		if(PlayerInfo[playerid][pLocked] == 1) 
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Votre compte est banni , pour être debanni faite une demmande sur le forum (http://la-vie-virtuelle.eu).");
		    Kick(playerid);
		}
		if(PlayerInfo[playerid][pLevel] == -999) 
		{
			Ban(playerid);
		}
		else if(PlayerInfo[playerid][pCK] > 0)
		{
		    Kick(playerid);
		}
		ClearChatbox(playerid, 8);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		format(string2, sizeof(string2), "Bienvenue Sur GaminG Of Life, %s.",playernamesplit[0]);
		SendClientMessage(playerid, COLOR_WHITE,string2);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, "Notre Teamspeak3 : En Attente Port: En Attente");
		format(string2, sizeof(string2), "Site: %s",URL_SERVEUR);
		SendClientMessage(playerid, COLOR_WHITE, string2);
		if (PlayerInfo[playerid][pDonateRank] > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		}
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			format(string2, sizeof(string2), "Salut, content que tu sois là Admin %d ! .",PlayerInfo[playerid][pAdmin]);
			SendClientMessage(playerid, COLOR_WHITE,string2);
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " ");
		printf("%s has logged in.",playername2);

		// Reset the FirstSpawn variable
		SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);

		// Unset Crash
		SetTimerEx("UnsetCrash", 5000, false, "i", playerid);

		SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
		if(gTeam[playerid] == 0)
		{
			gTeam[playerid] = 3;
		}
		else
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		gPlayerLogged[playerid] = 1;
		SpawnPlayer(playerid);
		SetCameraBehindPlayer(playerid);
		if(PlayerInfo[playerid][pCrashed] == 0)
		{
			format(tmp2, sizeof(tmp2), "~w~Bienvenue sur~n~~y~ GaminG Of Life  %s !", playername2);
		}
		else
		{
	    	format(tmp2, sizeof(tmp2), "~p~Crash...~n~~w~(retour a votre votre ancienne position)");
		}
		DateProp(playerid);
		GameTextForPlayer(playerid, tmp2, 5000, 1);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(IsPlayerConnected(i))
	    	{
	        	if(PlayerInfo[i][pMaskuse] == 1)
	        	{
	            	ShowPlayerNameTagForPlayer(playerid, i, 0);
	        	}
	    	}
		}
	}
	return 1;
}


stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}


DropWeapons( playerid )
{
	new Float: px, Float: py, Float: pz;
	new hour,minute,second;
	new year, month,day;
	gettime(hour, minute, second);
	getdate(year, month, day);

	GetPlayerPos( playerid, px, py, pz );

	new weapon_slots[WEAPON_SLOTS + 1][2];
	new used_weapon_slots;

	for( new i = 0; i < WEAPON_SLOTS; i ++ )
	{
		GetPlayerWeaponData( playerid, i, weapon_slots[ i ][ 0 ], weapon_slots[ i ][ 1 ]);
		if( i == 0 && weapon_slots[ i ][ 0 ] == 0 ) weapon_slots[ i ][ 1 ] = 0;

		if( weapon_slots[ i ][ 1 ] > 0 && weapon_slots[ i ][ 0 ] < sizeof( weapons ) && weapons[ weapon_slots[ i ][ 0 ] ] != -1 )
		{
			used_weapon_slots ++;
		}
		else
		{
		    weapon_slots[ i ][ 0 ] = 0;
		    weapon_slots[ i ][ 1 ] = 0;
		}
	}
	new used_weapon_slots2 = used_weapon_slots;
	for( new i = 0; i < WEAPON_SLOTS; i ++ )
	{
	    if( weapon_slots[ i ][ 1 ] > 0 )
	    {
			new Float:angle = 360.0 - float(used_weapon_slots--) * ( 360.0 / float(used_weapon_slots2) );
  			new p = CreatePickup( weapons[ weapon_slots[ i ][ 0 ] ], PICKUP_TYPE, px + floatsin(angle,degrees) * (used_weapon_slots2/2 + 1.0), py + floatcos(angle,degrees) * (used_weapon_slots2/2 + 1.0), pz );
			if( p == INVALID_PICKUP )
			{
				new lowest_time;
				new _id;
				for( new j = 0; j < MAX_PICKUPS; j ++ )
				{
					if( pickupsdeath[ j ][ creation_time ] < lowest_time )
					{
					    lowest_time = pickupsdeath[ j ][ creation_time ];
					    _id = j;
					}
				}

				DestroyPickupEx( _id );
				KillTimer( pickupsdeath[ _id ][ timerpickup ] );

				p = CreatePickup( weapons[ weapon_slots[ i ][ 0 ] ], PICKUP_TYPE, px + floatsin(angle,degrees) * (used_weapon_slots2/2 + 1.0), py + floatcos(angle,degrees) * (used_weapon_slots2/2 + 1.0), pz );
			}
			pickupsdeath[ p ][ creation_time ] = mktime(hour,minute,second,day,month,year);
			pickupsdeath[ p ][ weaponpickup ] = weapon_slots[ i ][ 0 ];
			pickupsdeath[ p ][ ammopickup ] = weapon_slots[ i ][ 1 ];
			#if MAX_DROP_AMOUNT != -1
		    if( pickupsdeath[ p ][ ammopickup ] > MAX_DROP_AMOUNT )
		    {
		        pickupsdeath[ p ][ ammopickup ] = MAX_DROP_AMOUNT;
		    }
		    #endif
			pickupsdeath[ p ][ timerpickup ] = SetTimerEx("DestroyPickupEx", MAX_DROP_LIFETIME * 1000, 0, "i", p);
		}
	}
}
public DestroyPickupEx( p )
{
	DestroyPickup( p );
	pickupsdeath[ p ][ creation_time ] = 0;
	pickupsdeath[ p ][ weaponpickup ] = 0;
	pickupsdeath[ p ][ ammopickup ] = 0;
}
public OnPropUpdate()
{
	new idx;
	new File: file2;
	while (idx < sizeof(HouseInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hHealthx],
		HouseInfo[idx][hHealthy],
		HouseInfo[idx][hHealthz],
		HouseInfo[idx][hArmourx],
		HouseInfo[idx][hArmoury],
		HouseInfo[idx][hArmourz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hHel],
		HouseInfo[idx][hArm],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hLevel],
		HouseInfo[idx][hWorld]);

		HouseInfo[idx][hWorld] = idx;
		if(idx == 0)
		{
			file2 = fopen("property.cfg", io_write);
		}
		else
		{
			file2 = fopen("property.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("bizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("bizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(SBizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		SBizzInfo[idx][sbOwned],
		SBizzInfo[idx][sbOwner],
		SBizzInfo[idx][sbMessage],
		SBizzInfo[idx][sbExtortion],
		SBizzInfo[idx][sbEntranceX],
		SBizzInfo[idx][sbEntranceY],
		SBizzInfo[idx][sbEntranceZ],
		SBizzInfo[idx][sbLevelNeeded],
		SBizzInfo[idx][sbBuyPrice],
		SBizzInfo[idx][sbEntranceCost],
		SBizzInfo[idx][sbTill],
		SBizzInfo[idx][sbLocked],
		SBizzInfo[idx][sbInterior],
		SBizzInfo[idx][sbProducts],
		SBizzInfo[idx][sbMaxProducts],
		SBizzInfo[idx][sbPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("sbizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("sbizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}

public ABroadCast(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= 1000)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

public OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendTeamMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
public SendRadioFrequenceMessage(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
   		{
	        if(PlayerInfo[i][Frequence] == 1338)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
public SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pJob] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendNewFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFMember] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}


public SendTeamBeepMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

public SendEnemyMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] >= 3)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}


public SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}


public SendNouveauMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLevel] < 3 || PlayerInfo[i][pAdmin] > 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

public PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

public PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

//---------------------------[MACMD Commands!!]--------------------------------- [Los Santos STaff]
dcmd_specplayer(playerid, params[])
{
	new Giveplayerid, Name[256], String[256], Name2[256];
	if (PlayerInfo[playerid][pAdmin] >= 999)
	{
	if (sscanf(params, "d", Giveplayerid)) SendClientMessage(playerid,COLOR_WHITE, "MACMD : /specplayer [id]");
	else if (!IsPlayerConnected(Giveplayerid)) SendClientMessage(playerid,COLOR_PURPLE,"Joueur non connecté ?");
	else
	{
	if ( Specing[Giveplayerid] == 1 )
	{
	SendClientMessage(playerid, COLOR_RED, "  Personne dejà observés ?.");
	}
	else
	{
    GetPlayerName(playerid, Name, 256);
	GetPlayerName(Giveplayerid, Name2, 256);
	format(String, 256, "[%i] %s est maintenant observé par [%i] %s",playerid, Name,Giveplayerid, Name2);
	CallLocalFunction("ircRemoteSay", "iss", 1, "#FSE", String);
	Specing[playerid] = 1;
	}
	if ( !IsPlayerInAnyVehicle(Giveplayerid) )
	{
	TogglePlayerSpectating(playerid, 1);
	PlayerSpectatePlayer(playerid, Giveplayerid);
	SetPlayerInterior(playerid,GetPlayerInterior(Giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
	InSpec[playerid] = 1;
	return 1;
	}
	else
	{
	TogglePlayerSpectating(playerid, 1);
	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(Giveplayerid));
	SetPlayerInterior(playerid,GetPlayerInterior(Giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
	InSpec[playerid] = 1;
	return 1;
	}
 	}
	}
	return 1;
}

dcmd_specoff(playerid, params[])
{
	#pragma unused params
	TogglePlayerSpectating(playerid, 0);
	Specing[playerid] = 0;
	InSpec[playerid] = 0;
	return 1;

}

//---------------------------<[ Command Text ]>--------------------------

public OnPlayerCommandText(playerid, cmdtext[])
{
	if(IsPlayerNPC(playerid)){return 1;}
    dcmd(specplayer, 10, cmdtext);
    dcmd(specoff, 7, cmdtext);
	new string[256];
    new string1[256];
	new playermoney;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys, idx;
	new idcar = GetPlayerVehicleID(playerid);
	new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	cmd = strtok(cmdtext, idx);

	if(strcmp( cmd, "/localisation", true ) == 0) // Merci à Sasuke [Los Santos STaff]
	{
		if(!(PlayerInfo[playerid][pAdmin] <= 9999))
		{
		    return 0;
		}
		tmp = strtok(cmdtext, idx);
		if(strlen(tmp) == 0)
		{
		    return SendClientMessage(playerid,COLOR_GREEN,"/localisation <id>");
		}
		new id = strval(tmp);
		if(!IsPlayerConnected(id))
		{
			return SendClientMessage(playerid,COLOR_GREEN,"Pas connecter");
		}
		SetPlayerMarkerForPlayer(playerid, id,COLOR_BLUE);
		SendClientMessage(playerid,COLOR_GREEN,"Localisé, Monsieur L'Admin");
		return 1;
	}
	if(strcmp( cmd, "/fight", true ) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(strlen(tmp) == 0)
		{
		    return SendClientMessage(playerid,COLOR_GREEN,"/fight <id> 4,5,6,15");
		}
		new style = strval(tmp);
		if(!(style >= 4 && style <= 6 || style == 15 || style == 26))
		{
			return SendClientMessage(playerid,COLOR_GREEN,"/fight <id> 4,5,6,15");
		}
		SetPlayerFightingStyle(playerid, style);
		format(tmp, 52, "Style de combat mis a %d", style);
		SendClientMessage(playerid,COLOR_GREEN,tmp);
		return 1;
	}
	if(strcmp("/voirpm",cmdtext) == 0)
	{
	    if((PlayerInfo[playerid][pAdmin] <= 1000))
	    {
	        return SendClientMessage(playerid,COLOR_RED,"Tu n 'es pas admin");
		}
	    if(VoirMp[playerid] == 1)
	    {
	        VoirMp[playerid] = 0;
	        SendClientMessage(playerid,COLOR_RED,"Tu ne voit plus les mp");
	    }
	    else
	    {
	        VoirMp[playerid] = 1;
	        SendClientMessage(playerid,COLOR_RED,"Tu peut voir les mp");
	    }
	    return 1;
    }
   	if(strcmp(cmd, "/bigears", true) == 0 && PlayerInfo[playerid][pAdmin] >= 1000)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_RED, "Tu as maintenant les oreilles de Dumbo");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_RED, "Tu n'as plus les oreilles de Dumbo");
			}
		}
		return 1;
	}

    /*if(strcmp(cmd, "/nitro", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pJob] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas Mécanicien!");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /nitro [ID] [Prix]");
                return 1;
            }
            new playa;
            new money;
            playa = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            money = strval(tmp);
       		if(IsPlayerInInvalidNosVehicle(playa, GetPlayerVehicleID(playa))) return SendClientMessage(playerid, COLOR_RED, "Vous n'avez pas le droit d'installer la nitro à ce vehicule");
            if(money < 100 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, " Le Prix ne peut être inférieur à 100 et supérieur à 99999!"); return 1; }
            if(IsPlayerConnected(playa))
            {
                if(playa != INVALID_PLAYER_ID)
                {
                    if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
                    {
                        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez faire cela!"); return 1; }
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* Vous avez proposé à %s d'instaler la nitro à sa voiture pour %d$ .",giveplayer,money);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Le Mécanicien %s désire installer la nitro à votre votre voiture pour %d$, (Tapez /accepter Nitro) pour accepter.",sendername,money);
                        SendClientMessage(playa, COLOR_WHITE, string);
                        NitroOffer[playa] = playerid;
                        NitroPrice[playa] = money;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, " Le joueur n'est pas près de vous / n'est pas dans une voiture.");
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, " Le joueur est hors ligne.");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/hydrau", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pJob] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas Mécanicien!");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /hydrau [ID] [Prix]");
                return 1;
            }
            new playa;
            new money;
            playa = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            money = strval(tmp);
       		if(IsPlayerInInvalidNosVehicle(playa, GetPlayerVehicleID(playa))) return SendClientMessage(playerid, COLOR_RED, "Vous n'avez pas le droit d'installer la nitro à ce vehicule");
            if(money < 100 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, " Le Prix ne peut être inférieur à 100 et supérieur à 99999!"); return 1; }
            if(IsPlayerConnected(playa))
            {
                if(playa != INVALID_PLAYER_ID)
                {
                    if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
                    {
                        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez faire cela!"); return 1; }
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* Vous avez proposé à %s d'instaler un système hydraulique à sa voiture pour %d$ .",giveplayer,money);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Le Mécanicien %s désire un système de suspention hydraulique à votre votre voiture pour %d$, (Tapez /accepter hydrau) pour accepter.",sendername,money);
                        SendClientMessage(playa, COLOR_WHITE, string);
                        HydrauOffer[playa] = playerid;
                        HydrauPrice[playa] = money;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, " Le joueur n'est pas près de vous / n'est pas dans une voiture.");
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, " Le joueur est hors ligne.");
            }
        }
        return 1;
    }*/

	if(strcmp(cmd, "/rapport", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /rapport [texte]");
				return 1;
			}
			format(string, sizeof(string), "rapport de %s[%d]: %s", sendername, playerid, (result));
			ABroadCast(COLOR_ASKQ,string);
			SendClientMessage(playerid, COLOR_ASKQ, "Votre question a etait envoyée aux admins,merci.");
			format(string, sizeof(string), "Votre rapport: %s", (result));
			SendClientMessage(playerid,COLOR_YELLOW3,string);
	    }
	    return 1;
	}

//---------------------getip------------------
	if(strcmp(cmd, "/ip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3000)
		{
			tmp = strtok(cmdtext,idx);
			new playersip[256];
			if(!strlen(tmp))
			{
  				SendClientMessage(playerid,COLOR_GRAD1,"[CMD]: /ip [ID]");
		        return 1;
			}
 			giveplayerid = ReturnUser(tmp);
 			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerIp( giveplayerid,playersip,sizeof(playersip));
 			format(string, sizeof(string), "Joueur: %s IP: %s",giveplayer,playersip);
			SendClientMessage(playerid,COLOR_GRAD2,string);
		}
		return 1;
	}
//----------------------/unbanip--------------
	if(strcmp(cmd,"/unbanip",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3250)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"CMD: /unbanip [ip]");
		        return 1;
   			}

			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "[ADMIN] %s a  unban l'ip %s", sendername,tmp);
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
//---------------------GIVE MATS-----------------
	if(strcmp(cmd, "/donnermateriaux", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] <= 9999)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /donnermateriaux [ID] [montant]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);

				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /donnermateriaux [ID] [montant]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pMats] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "[ADMIN] %s a donné a %s %d materiaux.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string);
			}
		}
		return 1;
	}

//--------------------------------[Explode]---------------------------------------------------------------------
	if(strcmp(cmd, "/explose", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 4000)
		{
			SendClientMessage(playerid, COLOR_GREY, "/explose [ID]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 4000)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
					format(string, sizeof(string), "[ADMIN] %s a éxploser à cause de Administrateur",giveplayer, sendername);
					SendAdminMessage(COLOR_LIGHTRED,string);
					//SendClientMessageToAll(COLOR_DBLUE, string);
					SetPlayerHealth(giveplayerid, 10);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 10);
					new PlayerName[30];
					GetPlayerName(playerid, PlayerName, 30);
					printf("[CMD] %s a exploser  %s", PlayerName, giveplayer);
				}
				else
				{
				    format(string, sizeof(string), "%d es un joueur inactif.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Vous n'avez pas la permission d'utiliser cette commande!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas loguez!");
		}
		return 1;
	}
//---------------------------------------------------------------------------------------------------------------
	if(strcmp(cmd, "/donnerdrogue", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 9999)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /donnerdrogue [ID] [montant]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /donnerdrogue [ID] [montant]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pDrugs] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "[ADMIN] %s a donné à %s %d sachets de drogue.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string);
			}
		}
		return 1;
	}
//-------------------------guide mairie-----------------------------------------

	if(strcmp(cmdtext, "/guide", true) == 0)
	{
	    if (PlayerToPoint(4, playerid,362.6089,173.7891,1008.3828))
	    {
	    	TogglePlayerControllable(playerid, 0);
  			ShowMenuForPlayer(Guide, playerid);
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"vous n'êtes pas au bon endroit."); }
	}

//--------------------------respawncar------------------------------------------

	if(strcmp(cmd, "/respawncar", true) == 0 || strcmp(cmd, "/rc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2000 )
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisez a utilisé cette commande!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, 256, "[ADMIN] Administrateur a respawn le vehicule id %d.",GetPlayerVehicleID(playerid));
				ABroadCast(COLOR_YELLOW,string);
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
   				RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Vehicule Respawn!");
   			}
		}
		return 1;
	}

	if(strcmp(cmd, "/respawnallcars", true) == 0 || strcmp(cmd, "/rac", true) == 0)
	{

        if(PlayerInfo[playerid][pAdmin] <= 3000)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisez a utilisé cette commande!");
		    return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "[Info] Tous les véhicules inutilisé ont etaient respawn par Administrateur.", sendername);
		SendAdminMessage(COLOR_WHITE,string);
		new bool:unwanted[CAR_AMOUNT];
		for(new player=0; player<MAX_PLAYERS; player++)
    	{
           	if(IsPlayerInAnyVehicle(player))
			{ unwanted[GetPlayerVehicleID(player)]=true; }
    	}
		for(new car = 1; car <= MAX_VEHICULES; car++)
		{
	    	if(!unwanted[car]){SetVehicleToRespawn(car);}
		}
		return 1;
	}

	if(strcmp(cmd, "/racclocation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisez a utilisé cette commande!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new v = 135; v <= 154; v++)
			{
				if(!unwanted[v]) SetVehicleToRespawn(v);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[SERVEUR] Toutes les voitures de location inutilisée ont étée respawn par Administrateur.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}

	if(strcmp(cmd, "/racblocation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisez a utilisé cette commande!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new v = 112; v <= 130; v++)
			{
				if(!unwanted[v]) SetVehicleToRespawn(v);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[SERVEUR] Toutes les moto inutilisé ont étée respawn par Administrateur.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}

	if(strcmp(cmd, "/forcer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas un policier");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /forcer [idDuJoueur/PartieDuNom]");
				return 1;
			}
			new newcar = GetPlayerVehicleID(playerid);
			new playa;
			playa = ReturnUser(tmp);
			if(IsACopCar(newcar) || IsNgCar(newcar) || IsAnFbiCar(newcar))
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            new Float:x, Float:y, Float:z;
			            GetPlayerPos(playa,x,y,z);
			            if(PlayerToPoint(5, playerid, x, y, z))
			            {
			            	PutPlayerInVehicle(playa,newcar,3);
			            	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s embarque %s dans son véhicule.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'es pas pret de vous.");
						}
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas dans un vehicule de la police, fbi ou de l'armée!");
			}
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/mvg", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        /*if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 ||
               PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 ||
               PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 ||
               PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 ||
               PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14 ||
               PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15 ||
               PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas dans une faction");
			    return 1;
			}*/
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mvg [idDuJoueur/PartieDuNom]");
				return 1;
			}
			new newcar = GetPlayerVehicleID(playerid);
			new playa;
			playa = ReturnUser(tmp);
			if(IsPlayerInAnyVehicle(playerid))
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            new Float:x, Float:y, Float:z;
			            GetPlayerPos(playa,x,y,z);
			            if(PlayerToPoint(5, playerid, x, y, z))
			            {
			            	PutPlayerInVehicle(playa,newcar,3);
			            	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s embarque %s dans son véhicule.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'es pas pret de vous.");
						}
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas dans un vehicule!");
			}
	    }
	    return 1;
	}

//------------------------------[Vehicle Slap]---------------------------------------------------
	if(strcmp(cmd, "/vehslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /vehslap [ID]");
				return 1;
			}
			new playa;
			new Float:shealth;
			giveplayerid = ReturnUser(tmp);
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=4000)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-0);
						GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
						SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+550);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("[Info]Le vehicule de %s a etait slapé par Administrateur",sendername,  giveplayer);
						format(string, sizeof(string), "[Info] Le vehicule de %s a été slapper par  Administrateur",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "**Vous n'êtes pas autoriser a faire ça .");
			}
		}
		return 1;
	}
//------------------------------[super vehslap]--------------------------------------------------
	if(strcmp(cmd, "/sslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /supervehslap [ID]");
				return 1;
			}
			new playa;
			new Float:shealth;
			giveplayerid = ReturnUser(tmp);
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-0);
						GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
						SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+1000);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("[Info] Le vehicule de %s est slapper par Administrateur",sendername,  giveplayer);
						format(string, sizeof(string), "[Info] Le vehicule de %s a été slapper par Administrateur",giveplayer ,sendername);
						ABroadCast(COLOR_LIGHTRED,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "** Vous n'êtes pas autorister a utiliser cette commande !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/masque", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMaskuse] == 0)
	        {
	    		if(PlayerInfo[playerid][pMask] == 0)
	   	 		{
	   			     SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de masque");
	   			     return 1;
	   			}
	   			if(PlayerInfo[playerid][pLevel] < 5)
	    		{
	       			SendClientMessage(playerid, COLOR_GRAD1, "Vous ne pouvez pas mettre de masque.");
	      		  	return 1;
	    		}
				for(new i = 0; i < MAX_PLAYERS; i++)
   				{
   		  		  	if(IsPlayerConnected(i))
   		  	 	 	{
		 	  			ShowPlayerNameTagForPlayer(i, playerid, 0);
					}
				}
				PlayerInfo[playerid][pMaskuse] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Vous avez mis votre masque [/masque pour l'enlever].");
				GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s a mis son masque.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		}
	        else
	        {
	    		if(PlayerInfo[playerid][pMask] == 0)
	    		{
	    	   		SendClientMessage(playerid, COLOR_GRAD1, "Vous n'avez pas de masque");
	    	    	return 1;
	  		  	}
	    		if(PlayerInfo[playerid][pLevel] < 5)
	    		{
		        	SendClientMessage(playerid, COLOR_GRAD1, "Vous ne pouvez pas enlever de masque.");
		        	return 1;
	   		 	}
		   	 	for(new i = 0; i < MAX_PLAYERS; i++)
   				{
   			    	if(IsPlayerConnected(i))
   			    	{
					   ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
				}
				PlayerInfo[playerid][pMaskuse] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "Vous avez enlever votre masque [/masque pour le mettre].");
				GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s enleve son masque.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        }
		}
		return 1;
	}

    if(!strcmp(cmdtext, "/ceinture", true)) 
	{
        new carid = GetPlayerVehicleID(playerid);
	    new mdv = GetVehicleModel(carid);
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || mdv == 509 || mdv == 481 || mdv == 510 || mdv == 462)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ce véhicule n'a pas de ceinture.");
				    return 1;
				}
	            if(ceinture[playerid] == 0)
	            {
	            	ceinture[playerid] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s mets sa ceinture de securité", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(ceinture[playerid] == 1)
				{
				    ceinture[playerid] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s enleve sa ceinture de securité.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans un véhicule pour pouvoir utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
	}

        if(!strcmp(cmdtext, "/casque", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être connecté! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new carid = GetPlayerVehicleID(playerid);
				new vehmod = GetVehicleModel(carid);
				if(!IsABike(carid) && !IsAOBike(carid) && vehmod != 509 && vehmod != 481 && vehmod != 510 && vehmod != 462 && !IsAPizzabike(carid))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Tu peut pas mettre de casque dans ce véhicule");
				    return 1;
				}
	            if(casque[playerid] == 0)
	            {
	            	casque[playerid] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s met son casque.", sendername);
      				SetPlayerAttachedObject(playerid, 1, 18645, 2, 0.07, 0, 0, 88, 75, 0);
      				SendClientMessage(playerid,COLOR_WHITE, " Refaite /casque pour enlever le casque");
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(casque[playerid] == 1)
				{
				    casque[playerid] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s enleve son casque.", sendername);
      				RemovePlayerAttachedObject(playerid, 1);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être dans un véhicule pour pouvoir utiliser cette commande!");
	            return 1;
	        }
	    }
	    return 1;
	}
	// Nouvelle commande By Jones
	if (strcmp(cmd, "/ecasque", true) == 0)
	{
      RemovePlayerAttachedObject(playerid, 1);
      SendClientMessage(playerid,COLOR_WHITE, " Fait /casque pour remettre le casque sur une Moto");
      return 1;
	}
	if (strcmp(cmd, "/style1", true) == 0)
	{
      SetPlayerAttachedObject(playerid, 1, 18911, 2, -0.08, 0.03, 0.0, 90, -180, -90);
      SetPlayerAttachedObject(playerid, 2, 19035, 2, 0.09, 0.04, 0, 88, 75, 0);
      SetPlayerAttachedObject(playerid, 3, 18939, 2, 0.17, -0.03, 0.01, 180, 0, 30);
      SendClientMessage(playerid,COLOR_WHITE, " Faite /estyle1 pour enlever le style1");
      SendClientMessage(playerid,COLOR_ORANGE, " Woouahh Quelle look mon vieux!");
      return 1;
	}
	if (strcmp(cmd, "/estyle1", true) == 0)
	{
      RemovePlayerAttachedObject(playerid, 1);
      RemovePlayerAttachedObject(playerid, 2);
      RemovePlayerAttachedObject(playerid, 3);
      SendClientMessage(playerid,COLOR_WHITE, " Faite /style1 pour remettre le style1");
      return 1;
	}
	if (strcmp(cmd, "/bonnet", true) == 0)
	{
      SetPlayerAttachedObject(playerid, 1, 18964, 2, 0.125, 0.015, 0, 90, 100, 0);
      SendClientMessage(playerid,COLOR_WHITE, " Faite /ebonnet pour enlever le bonnet");
      SendClientMessage(playerid,COLOR_ORANGE, " Il fait froid hein...");
      return 1;
	}
	if (strcmp(cmd, "/ebonnet", true) == 0)
	{
      RemovePlayerAttachedObject(playerid, 1);
      SendClientMessage(playerid,COLOR_WHITE, " Faite /bonnet pour remettre le bonnet");
      return 1;
	}



	if(!strcmp(cmdtext, "/masquernumero", true))
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPnumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas le numéro de téléphone de cacher.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pDonateRank] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You need to donate atleast bronze to get this feature.");
			    return 1;
			}
			if(PlayerInfo[playerid][pHideNumber] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Votre numero est caché maintenant.");
				PlayerInfo[playerid][pHideNumber] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pHideNumber] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Votre numero est public maintenant.");
				PlayerInfo[playerid][pHideNumber] = 0;
				return 1;
			}
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/hautparleur", true))
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPnumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Tu n'as pas de téléphone !.");
		        return 1;
		    }
		    if(Mobile[playerid] == 255)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "  Tu n'appel pas !.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pSpeaker] == 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "* Beep beeeeep * Hautparleur acitvé.");
				PlayerInfo[playerid][pSpeaker] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pSpeaker] == 1)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "* Beep beeep * Hautparleur desactivé.");
				PlayerInfo[playerid][pSpeaker] = 0;
				return 1;
			}
		}
		return 1;
	}
//-----------------------------------------------------[Moving house CMDS]---------------------------------------
	if(strcmp(cmd, "/entrermaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 4000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entrermaison [houseid] - Moves a house to you");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"House ID must be above 0 and below 33");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entrance of House %d to %f - %f - %f",proplev,X,Y,Z);
       			ABroadCast(COLOR_YELLOW,string);
				HouseInfo[proplev][hEntrancex] = X;
				HouseInfo[proplev][hEntrancey] = Y;
				HouseInfo[proplev][hEntrancez] = Z;
				OnPropUpdate();
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/sortirmaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 4000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /sortirmaison [houseid] - Moves a house to you");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"House ID must be above 0 and below 33");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Exit of House %d to %f - %f - %f",proplev,X,Y,Z);
       			ABroadCast(COLOR_YELLOW,string);
				HouseInfo[proplev][hExitx] = X;
				HouseInfo[proplev][hExity] = Y;
				HouseInfo[proplev][hExitz] = Z;
				HouseInfo[proplev][hInt] = GetPlayerInterior(playerid);
				OnPropUpdate();
				return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/entrerbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entrerbiz [bizid] - vous téléporte a un biz");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(BizzInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Business ID must be above 0 and below 5");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entrance of Biz %d to %f - %f - %f",proplev,X,Y,Z);
			    ABroadCast(COLOR_YELLOW,string);
				BizzInfo[proplev][bEntranceX] = X;
				BizzInfo[proplev][bEntranceY] = Y;
				BizzInfo[proplev][bEntranceZ] = Z;
				OnPropUpdate();
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/entrersuperbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entrersuperbiz [sbizid] - Moves an sbiz to you");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > 11 || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"SBusiness ID must be above 0 and below 12");
			    return 1;
			}
			else
			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entrance of SBiz %d to %f - %f - %f",proplev,X,Y,Z);
			    ABroadCast(COLOR_YELLOW,string);
				SBizzInfo[proplev][sbEntranceX] = X;
				SBizzInfo[proplev][sbEntranceY] = Y;
				SBizzInfo[proplev][sbEntranceZ] = Z;
				OnPropUpdate();
				return 1;
   			}
		}
		return 1;
	}
//------------------------------------------------[Job shit]---------------------------------------------------
	if(!strcmp(cmdtext, "/startrecolte", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsAHarvest(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à la ferme.");
			    return 1;
			}
			if(FarmerVar[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous êtes déjà sur votre travail.");
			    return 1;
			}
			if(FarmerPickup[playerid][0] >= 22)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "C'est assez pour aujourd'hui (le prochain jour de paie revenez).");
			    return 1;
			}
	        if(PlayerInfo[playerid][pJob] == 16)
	        {
	            JustStarted[playerid] = 1;
	            FarmerVar[playerid] = 1;
	            TogglePlayerControllable(playerid, 1);
	            OnPlayerEnterCheckpoint(playerid);
	            SendClientMessage(playerid, COLOR_YELLOW, "Propriétaire de ferme : Vos heures de travail augmente, allez au marqueur rouge.");
	        }
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/stoprecolte", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(FarmerVar[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas commencé votre travail.");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 16)
			{
			    if(IsAHarvest(idcar))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/startrecoltededrogue", true))
	{
		if(IsPlayerConnected(playerid))
		{
			if(!IsADrugHarvest(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   vous n'êtes pas dans une moissonneuse de drogue.");
			    return 1;
			}
			if(DrugFarmerVar[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Votre etes déjà sur votre travail.");
			    return 1;
			}
			if(DrugFarmerPickup[playerid][0] >= 37)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "C'est assez pour aujourd'hui (prochain jour de paie revenez).");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    JustStarted[playerid] = 1;
			    TogglePlayerControllable(playerid, 1);
			    DrugFarmerVar[playerid] = 1;
			    OnPlayerEnterCheckpoint(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "Propriétaire de ferme : Vos heures de travail augmente, allez au marqueur rouge.");
			}
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/stoprecoltededrogue", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(DrugFarmerVar[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas commencé votre travail.");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    if(IsADrugHarvest(idcar))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
				{
					DrugFarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
				DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	    return 1;
	}

	if(!strcmp(cmdtext, "/chargerdrogue", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas un contrebandier de drogue.");
	            return 1;
	        }
	        if(SmugglerWork[playerid] != 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous êtes déjà un contrebandier de drogue.");
			    return 1;
			}
			if( GetPlayerMoney(playerid) < 299)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "   Apportez au moins 300$ quand vous êtes un contrebandier de drogue.");
		    	return 1;
			}
			if(PayDaySecure[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Êtes-vous sûr vouloir passer de la drogue en contrebande encore, aujourd'hui ?");
			    return 1;
			}
			if(!PlayerToPoint(5.0,playerid,2667.7090,-1458.9666,30.5938))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à une ferme de drogue.");
			    return 1;
			}
			if(IsASmuggleCar(idcar) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TogglePlayerControllable(playerid, 0);
			    SmugglerWork[playerid] = 1;
			    PayDaySecure[playerid] = 1;
			    GameTextForPlayer(playerid, "~w~Loading car with drogue...", 5000, 1);
			    SetTimerEx("LoadingDrugsForSmugglers", 5000, false, "i", playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu n'es pas dans une voiture de contrebandier.");
			    return 1;
			}
	    }
	    return 1;
	}

	if(strcmp(cmd, "/changermdp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué.");
		        return 1;
		    }
		    else
		    {
		    	SendClientMessage(playerid, COLOR_GREY, "   Ce dispositif est soulevé sur le prochain dégagement");
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /changermdp [password]");
				return 1;
			}
			strmid(PlayerInfo[playerid][pKey], tmp, 0, strlen(cmdtext), 255);
			SaveAccount(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "   Le mot de passe a été changé avec succès.");
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/verouillerhq", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas logué.");
		        return 1;
	        }
	        else
	        {
	            if(PlayerInfo[playerid][pLeader] == 5)
	            {
	                if(hqlock[surlock] == 0)
	                {
	                    hqlock[surlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Surenos HQ locked.");
	                }
	                else if(hqlock[surlock] == 1)
	                {
	                    hqlock[surlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Surenos HQ unlocked.");
					}
	            }
	            else if(PlayerInfo[playerid][pLeader] == 6)
	            {
	                if(hqlock[luclock] == 0)
	                {
	                    hqlock[luclock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "La Famiglia Sinatra HQ locked.");
	                }
	                else if(hqlock[luclock] == 1)
	                {
	                    hqlock[luclock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "La Famiglia Sinatra HQ unlocked.");
	                }
	            }
	            else if(PlayerInfo[playerid][pLeader] == 15)
	            {
	                if(hqlock[stlock] == 0)
	                {
	                    hqlock[stlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "47th Street Saints Families gang HQ locked.");
	                }
	                else if(hqlock[stlock] == 1)
	                {
	                    hqlock[stlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "47th Street Saints Families gang HQ unlocked.");
	                }
                }
	            else if(PlayerInfo[playerid][pLeader] == 16)
	            {
	                if(hqlock[stlock] == 0)
	                {
	                    hqlock[stlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "East Side Ballas Families gang HQ locked.");
	                }
	                else if(hqlock[stlock] == 1)
	                {
	                    hqlock[stlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "East Side Ballas Families gang HQ unlocked.");
	                }
				}
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "You don't have keys of any HQ.");
	                return 1;
	            }
	        }
	    }
	    return 1;
	}

	/*if(strcmp(cmd, "/braquerall", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1337)
		{
	    	return 1;
		}
		else
		{
	    	for(new i = 0; i < MAX_PLAYERS; i++)
	    	{
	    			if(IsPlayerConnected(i))
	    			{
	   					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3)
						{
							PlayerInfo[playerid][probbank] = 0;
							SendClientMessage(playerid,COLOR_BLUE,"braquage de nouveau disponnible")
							NombreBraqueur = 0;
						}
                    }
	    	}
             return 1;
		}
	}*/
	/*if(strcmp(cmdtext,"/decoder",true)==0)
	{
	    if(PlayerInfo[playerid][Decoder] == 1)
	    {
    		if(PlayerToPoint(3, playerid,2142.5330,1625.7997,993.6882))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Tu prend ton decodeur et tu tente de decoder(20 secondes)");
			    SetTimerEx("Decodage",20000,0,"d",playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY,"Tu ne te trouve pas devant le tableau");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Tu n'a pas de Decodeur");
		}
	    return 1;
	}*/
	/*if(strcmp(cmd, "/mdpbanque", true) == 0) // by LordMan
    {
	    if(PlayerToPoint(3, playerid,2142.5330,1625.7997,993.6882))
	    {
		    tmp = strtok(cmdtext, idx);
		    new lemdp = strval(tmp);
		    if(!strlen(tmp))
		    {
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Usage: /mdpbanque [mdp]");
			    SendClientMessage(playerid, COLOR_RED, "Gare a toi si tu fais faux !");
	 	    }
   		    if(lemdp == mdpbanque)
    	    {
	   		    MoveStreamObject(blindebanque,2146.1977539063, 1626.7004394531, 994.26220703125, 2.0000);
	   		    //MoveStreamObject(secubanque,2144.7109375, 1606.787109375, 998.71154785156, 2.5000);
                SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
			    GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 1;
		        format(string, sizeof(string), "* %s prend sa télécommande et ouvre le coffre.", sendername);
	   		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    }
		    else if(lemdp == 118218)
		    {
		        MoveStreamObject(blindebanque,2146.1977539063, 1626.7004394531, 994.26220703125, 2.0000);
		        //MoveStreamObject(secubanque,2144.7109375, 1606.787109375, 998.71154785156, 2.5000);
                SetTimerEx("OuvertureGrille", 25000, 0, "i", playerid);
                GetPlayerName(playerid, sendername, sizeof(sendername));
                grilleouverte[playerid] = 1;
                format(string, sizeof(string), "* %s Tape le mot de passe et ouvre le coffre.", sendername);
	   		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    }
		    else
		    {
		        //MoveStreamObject(secubanque,2144.7109375, 1606.787109375, 994.96154785156, 4.5000);
		       //MoveStreamObject(blindebanque,2144.1813964844, 1626.6809082031, 994.26220703125, 4.5000);
	            GetPlayerName(playerid, sendername, sizeof(sendername));
	   		    format(string, sizeof(string), "* %s Tape le mauvais mot de passe et la grille de securiter se ferme.", sendername);
	   		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   		    SendClientMessageToAll(COLOR_BLUE,"Annonce : L'alarme de la banque vien d'être enclenchée");
    		}
        }
        else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes trop loin du tableau de commande."); }
	    return 1;
    }*/
/*
	if(strcmp(cmd, "/braquer", true) == 0) // By Jill
	 {
	    if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3))
	    {
			if(PlayerToPoint(3, playerid,2144.0420,1638.5311,993.5761) || PlayerToPoint(40, playerid,-29.0377,-86.6471,1003.5542) || PlayerToPoint(40, playerid,-27.6196,-53.8779,1003.5469) || PlayerToPoint(40, playerid,-28.5354,-85.5751,1003.5542))// Coordonnées de la banque
			{
                if(PlayerInfo[playerid][pLevel] < 6)
	            {
				     SendClientMessage(playerid, COLOR_LIGHTRED, " Vous devez etre niveaux 6 pour braquer la banque");
				     return 1;
                }
				if(!(Flicservice >= 4))
				{
				    return SendClientMessage(playerid,COLOR_RED,"[BRAQUER]: Il n' y a pas 4 policier en service pour pouvoir braquer");
				}
				if(braquageencours == 1)
				{
					return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'etre braquer");
				}
				NombreBraqueur ++;
		        Braqueur[playerid] = NombreBraqueur
		        if(NombreBraqueur <= 3)
	          	{
		             format(string1,sizeof(string1),"Il manque plus que %d braqueur pour pouvoir commencer",3 - NombreBraqueur);
		             SendClientMessage(playerid,COLOR_RED,string1);
		             return 1;
	        	}*/                   /*
				if(PlayerInfo[playerid][probbank] >= 1 || PlayerInfo[playerid][pLeader] <= 0)// Ceux qui ne peuvent pas braquer
				{
					return SendClientMessage(playerid, COLOR_RED, "Vous ne pouvez braquer qu'une fois tous les 3 heures!/Vous n'etes pas leader de faction.");
				}
				if(PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 16)
				if(PlayerInfo[playerid][probbank] == 0 && PlayerInfo[playerid][pLeader] == 12)//Ceux qui peuvent braquer
                {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0);
					SendClientMessage(playerid, COLOR_RED, " ");
					PlayerInfo[playerid][probbank] += 10800; // 86400 secondes : 24h
					format(string, sizeof(string), "** Infos: Un braquage a lieu à Los Angeles !. **", sendername);
					SendClientMessageToAll(COLOR_BLUE, string);*/                      /*
					if(PlayerToPoint(3, playerid,2144.0420,1638.5311,993.5761))
					{
					    format(string, sizeof(string), "** Infos: Alarme déclenchée dans la banque vous avez 6 Minutes !. **", sendername);
					}
					else
					{
					    format(string, sizeof(string), "** Infos: Alarme déclenchée dans UN 24/7 !. **", sendername);
					}*/                  /*
					SendRadioMessage(1, TEAM_RADIO_COLOR, string);
					WantedPoints[playerid]+=10; SetPlayerCriminal(playerid,255, "Braquage à Los Santos! !");
					SendClientMessage(playerid, COLOR_YELLOW, "Attend 8 minutes dans la banque");
					lathune = SetTimerEx("DonnerThune",5 * 80000,0,"d",playerid);
					SetTimer("Braquage", 10 * 80000, 0);
					braquageencours = 1;
					ilbraque[playerid] = 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Tu ne peut pas braquer cette endroit!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Tu es un flic!");
		}
		return 1;
	}       */

        if(strcmp("/001neon", cmdtext, true, 10) == 0)
        {
        new neon = CreateObject(18648,0,0,0,0,0,0,100.0);
        new neon1 = CreateObject(18648,0,0,0,0,0,0,100.0);
        AttachObjectToVehicle(neon, GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        AttachObjectToVehicle(neon1, GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        SendClientMessage(playerid, COLOR_WHITE, "neon installé");
        return 1;
         }
         if(strcmp("/002neon", cmdtext, true, 10) == 0)
        {
         new neon = CreateObject(18647,0,0,0,0,0,0,100.0);
         new neon1 = CreateObject(18647,0,0,0,0,0,0,100.0);
         AttachObjectToVehicle(neon, GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         AttachObjectToVehicle(neon1, GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         SendClientMessage(playerid, COLOR_WHITE, "neon installé");
         return 1;
         }
         if(strcmp("/003neon", cmdtext, true, 10) == 0)
        {
         new neon = CreateObject(18649,0,0,0,0,0,0,100.0);
         new neon1 = CreateObject(18649,0,0,0,0,0,0,100.0);
         AttachObjectToVehicle(neon, GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         AttachObjectToVehicle(neon1, GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         SendClientMessage(playerid, COLOR_WHITE, "neon installé");
         return 1;
         }
         if(strcmp("/004neon", cmdtext, true, 10) == 0)
        {
         new neon = CreateObject(18651,0,0,0,0,0,0,100.0);
         new neon1 = CreateObject(18651,0,0,0,0,0,0,100.0);
         AttachObjectToVehicle(neon, GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         AttachObjectToVehicle(neon1, GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         SendClientMessage(playerid, COLOR_WHITE, "neon installé");
         return 1;
         }
         if(strcmp("/005neon", cmdtext, true, 10) == 0)
        {
         new neon = CreateObject(18650,0,0,0,0,0,0,100.0);
         new neon1 = CreateObject(18650,0,0,0,0,0,0,100.0);
         AttachObjectToVehicle(neon, GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         AttachObjectToVehicle(neon1, GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         SendClientMessage(playerid, COLOR_WHITE, "neon installé");
         return 1;
         }

		if(strcmp(cmd, "/braquer", true) == 0) // By Jill
	 {
	    if(!(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3))
	    {
			if(PlayerToPoint(3, playerid,2144.0420,1638.5311,993.5761) || PlayerToPoint(40, playerid,-29.0377,-86.6471,1003.5542) || PlayerToPoint(40, playerid,-27.6196,-53.8779,1003.5469) || PlayerToPoint(40, playerid,-28.5354,-85.5751,1003.5542))// Coordonnées de la banque
			{
                if(PlayerInfo[playerid][pLevel] < 6)
	            {
                    return SendClientMessage(playerid, COLOR_LIGHTRED, " Vous devez etre niveaux 6 pour braquer la banque");
                }
				if(braquageencours == 1)
				{
					return SendClientMessage(playerid, COLOR_YELLOW, "Un endroit est déjà en train d'etre braquer");
				}
				if(PlayerInfo[playerid][probbank] >= 1)// Ceux qui ne peuvent pas braquer
				{
					return SendClientMessage(playerid, COLOR_YELLOW, "Vous avez déjà braqué !");
				}
				if(PlayerInfo[playerid][probbank] == 0)//Ceux qui peuvent braquer
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 0);
					SendClientMessage(playerid, COLOR_RED, " ");
					PlayerInfo[playerid][probbank] += 14400; // 86400 secondes : 24h
					format(string, sizeof(string), "** Infos: Un braquage a lieu à Los Santos!. **", sendername);
					SendClientMessageToAll(COLOR_BLUE, string);
					if(PlayerToPoint(3, playerid,2144.0420,1638.5311,993.5761))
					{
					    format(string, sizeof(string), "** Infos: Alarme déclenchée dans la banque !. **", sendername);
					}   /*
					else
					{
					    format(string, sizeof(string), "** Infos: Alarme déclenchée dans UN 24/7 !. **", sendername);
					} */
					SendClientMessageToAll(COLOR_BLUE, string);
					WantedPoints[playerid]+=10; SetPlayerCriminal(playerid,255, "Braquage à Los Santos!");
					SendClientMessage(playerid, COLOR_YELLOW, "Mec ! Attend 8 minutes dans la banque");
					lathune = SetTimerEx("DonnerThune",5 * 80000,0,"d",playerid);
					SetTimer("Braquage", 10 * 80000, 0);
					braquageencours = 1;
					ilbraque[playerid] = 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Tu ne peut pas braquer cette endroit!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Tu es un flic!");
		}
		return 1;
	}

	//----------------------------------[FOURDIVE]------------------------------------------------
	if(strcmp(cmd, "/faireplonger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /faireplonger [playerid1] [playerid2] [playerid3] [playerid4]");
				return 1;
			}
			new para1;
			new para2;
			new para3;
			new para4;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para3 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para4 = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3250)
			{
				if (IsPlayerConnected(para1)){ SafeGivePlayerWeapon(para1, 46, 0); SetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);PlayerInfo[para1][pInt] = 0;SendClientMessage(para1, COLOR_WHITE, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para2)) && (para2>0)) { SafeGivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para3)) && (para3>0)) { SafeGivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para4)) && (para4>0)) { SafeGivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisés à employer cette commande!");
			}
		}
		return 1;
	}
//-----------------------------------------------------------------
	
	/*if(strcmp(cmd, "/karate", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas logué.");
		        return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous devez être au moins niveau 3 pour employer cette commande.");
	            return 1;
	        }
	        if(KnockedDown[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Can't swing when you're knocked down.");
	            return 1;
	        }
            if(PlayerInfo[playerid][pSex] == 2)
            {
                SendClientMessage(playerid, COLOR_GREY, "Vous êtes trop faible pour renverser quelqu'un.");
	            return 1;
            }
            if(PlayerBoxing[playerid] != 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Can't use that command while boxing.");
                return 1;
            }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /karate [id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(1.0, playerid, giveplayerid))
			        {
           				if(KnockedDown[giveplayerid] != 1)
			        	{
			        	    if(giveplayerid == playerid)
			        	    {
			        	        SendClientMessage(playerid, COLOR_GREY, "  Tu ne peux pas te mettre par terre ! Si ? .");
			        	        return 1;
			        	    }
			        	    if(PlayerInfo[giveplayerid][pSex] == 2)
			        	    {
			        	        SendClientMessage(playerid, COLOR_GREY, "Tu veux vraiment frapper une fille ?");
			        	        return 1;
			        	    }
			        	    if(IsPlayerInAnyVehicle(giveplayerid))
			        	    {
			        	        return 1;
			        	    }
			            	new giveplayername[MAX_PLAYER_NAME];
			            	GetPlayerName(playerid, sendername, sizeof(sendername));
			            	GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
			            	new rands = random(2)+1;
							format(string, sizeof(string), "* %s frappe %s et essaye de le mettre KO.", sendername, giveplayername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
							if(rands == 1)
							{
							    TogglePlayerControllable(giveplayerid, 0);
								ApplyAnimation(giveplayerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
								SetTimerEx("ClearKnock", 20000, false, "i", giveplayerid);
								KnockedDown[giveplayerid] = 1;
								format(string, sizeof(string), "* %s réussi a le mettre par terre.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
							    format(string, sizeof(string), "* %s n'ait pas arrivé a le mettre par terre !.", sendername);
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Cette personne est deja KO.");
						}
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas à coté de toi .");
			        }
			    }
			}

		}
		return 1;
	}*/

	if(strcmp(cmd, "/donner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donner [nom] [idDuJoueur/PartieDuNom] ([montant])");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: drogue, arme, clefveh(1-3), clefmaison, corde");
				return 1;
			}
			if(strcmp(x_nr,"drogue",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner drogue [idDuJoueur/PartieDuNom] [nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "   Le joueur n'es pas pret de vous!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner drogue [idDuJoueur/PartieDuNom] [nombre]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas assz de drogues."); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDrugs] -= dammount;
						PlayerInfo[giveplayerid][pDrugs] += dammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s prend son sac de drogue et donne un peu de drogue à %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s prend son sac de drogue et donne un peu de drogue à  %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Joueur non connecté!");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"arme",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner arme [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    new gunID = GetPlayerWeapon(playerid);
            				new gunAmmo = GetPlayerAmmo(playerid);

						    GetPlayerName(playerid, sendername, sizeof(sendername));
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));

						    if(gunID != 0 && gunAmmo != 0)
						    {
						        SafeGivePlayerWeapon(giveplayerid, gunID, gunAmmo);
						        RemovePlayerWeapon(playerid, gunID);
						        format(string, sizeof(string), "* %s jette son arme à %s, qui la rattrape.", sendername, giveplayer);
						        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            			return 1;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas d'arme à donner !");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas pret de vous ! ");
						    return 1;
						}
				    }
				}
			}
			else if(strcmp(x_nr,"clefmaison",true) == 0)
			{
			    if(HireCar[playerid] == 299)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de maison!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner clefmaison [idDuJoueur/PartieDuNom]");
			        return 1;
			    }
			    giveplayerid = ReturnUser(tmp);
       			if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
			            new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(15, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "   Ce joueur n'es pas pres de vous !");
			                return 1;
			            }
			    		if(HireCar[giveplayerid] != 299)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "    Ce joueur a deja une maison!");
			        		return 1;
			    		}
			    		HireCar[giveplayerid] = HireCar[playerid];
			    		HireCar[playerid] = 299;
			    		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s prend la clef de sa maison et la donne à %s.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			else if(strcmp(x_nr,"corde",true) == 0)
			{
			    if(Rope[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas de corde!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donner corde [idDuJoueur/PartieDuNom]");
			        return 1;
			    }
			    giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
			            if(ProxDetectorS(5, playerid, giveplayerid))
			            {
			                if(Rope[giveplayerid] > 4)
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur a asser de cordes !");
			                    return 1;
			                }
			                Rope[playerid]--;
			                Rope[giveplayerid]++;
			                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s donne une corde à %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas près de vous !");
							return 1;
			            }
			        }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donner [name] [idDuJoueur/PartieDuNom] ([ammount])");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: drogue, arme, clefveh(1-3), clefmaison, corde");
				return 1;
			}

	    }
	    return 1;
	}

	if(strcmp(cmd, "/ita", true) == 0 || strcmp(cmd, "/italien", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ita)lien [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
							{
					    		format(string, sizeof(string), "%s dit: [Italien] %s", sendername, result);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dit: [Language inconnu(Italien)]", sendername);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Italien !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/mex", true) == 0 || strcmp(cmd, "/mexicain", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 5)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/mex)icain [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
							{
					    		format(string, sizeof(string), "%s dit: [Mexicain] %s", sendername, result);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dit: [Language inconnu(Mexicain)]", sendername);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Mexicain !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/rus", true) == 0 || strcmp(cmd, "/russe", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12 )
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/Rus)se [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12 )
							{
					    		format(string, sizeof(string), "%s dit: [Russe] %s", sendername, result);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dit: [Language inconnu(Russe)]", sendername);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Russe !");
			}
		}
		return 1;
	}
	

    if(strcmp(cmd, "/jama", true) == 0 || strcmp(cmd, "/jamai", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15 )
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/jama)aican [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15 )
							{
					    		format(string, sizeof(string), "%s dit: [Jamaican] %s", sendername, result);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dit: [Language inconnu(Jamaican)]", sendername);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Jamaican !");
			}
		}
		return 1;
	}

	
    if(strcmp(cmd, "/jam", true) == 0 || strcmp(cmd, "/jamaican", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 16 )
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/jam)aican [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 16 )
							{
					    		format(string, sizeof(string), "%s dit: [Jamaican] %s", sendername, result);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dit: [Language inconnu(Jamaican)]", sendername);
					    		SendClientMessage(i, COLOR_WHITE, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne savez pas parler Jamaican !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/bailloner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bailloner [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(PlayerTied[giveplayerid] == 1)
			       	{
			    	   	if(bailloner[giveplayerid] == 0)
			    	   	{
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							bailloner[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s prend un foulard et le boure dans la bouche de %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else{ SendClientMessage(playerid, COLOR_RED, "le joueur es déjà bailloner"); }
			       	}
			       	else{ SendClientMessage(playerid, COLOR_RED, "le joueur doit être ligoté"); }
                }
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/debailloner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /debailloner [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			    	if(bailloner[giveplayerid] == 1)
			    	{
	        			GetPlayerName(playerid, sendername, sizeof(sendername));
	        			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						bailloner[giveplayerid] = 0;
			           	format(string, sizeof(string), "* %s enleve le foulard de la bouche de %s", sendername, giveplayer);
			           	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else{ SendClientMessage(playerid, COLOR_RED, "le joueur n'es pas bailloner"); }

                }
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bander", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bander [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 0)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	/*if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "   Vous devez être dans un véhicule pour faire cela !");
        						return 1;
	        				}*/
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerCameraPos(giveplayerid, 2000,-2000,2000);
							SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s prend un foullard et bande les yeux de %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "    Le joueur doit être ligotter !");
							return 1;
						}
					}
					else{ SendClientMessage(playerid, COLOR_RED, "ce joueur a déja les yeux bander"); }
			    }
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/debander", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /debander [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 1)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	/*if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "   Vous devez être dans un véhicule pour faire cela !");
        						return 1;
	        				}*/
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetCameraBehindPlayer(giveplayerid);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s Enleve le foullard des yeux de %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "    Le joueur doit être ligotter !");
							return 1;
						}
					}
					else{ SendClientMessage(playerid, COLOR_RED, "ce joueur n'as pas les yeux bander"); }
			    }
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/montrerbadge",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
				{
	        	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrerbadge [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
				    	if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					    	if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "ID invalide!"); return 1; }
					    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son badge pour vous le montrer.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    	if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Badge: Sheriff de la LSPD %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Badge: Sheriff Adjoint %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Badge: Capitaine %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Badge: Lieutenant %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Badge: Sergent %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Badge: Officier %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Badge: Cadet %s", sendername); }
							SendClientMessage(giveplayerid, COLOR_GREY, string);
				        	format(string, sizeof(string), "* %s vous a montrer son badge.", sendername);
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							format(string, sizeof(string), "* Vous avez montrez votre badge à %s.", giveplayer);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas pres de vous !");
					    	return 1;
						}
					}
				}
	        	else
	        	{
	            	SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas connecté!");
	            	return 1;
	        	}
	        }
		}
	    return 1;
 	}

 	if(strcmp(cmd,"/montrerplaque",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
	        	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrerplaque [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "ID invalide!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend sa plaque pour vous la montrer.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** || Badge FBI: Directeur fédéral %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** || Badge FBI: Co-Directeur fédéral %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** || Badge FBI: Lieutenant fédéral %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** || Badge FBI: Agent Spécial %s* ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** || Badge FBI: Agent %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** || Badge FBI: Agent Stagiaire %s ||", sendername); }
							SendClientMessage(giveplayerid, COLOR_GREY, string);
					        format(string, sizeof(string), "* %s vous a montré sa plaque.", sendername);
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							format(string, sizeof(string), "* Vous avez montré votre plaque à %s.", giveplayer);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas pres de vous !");
						    return 1;
						}
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas connecté!");
	            return 1;
	        }
		}
	    return 1;
 	}

 	if(!strcmp(cmdtext, "/toit", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
		        {
		            if(PlayerToPoint(1.0,playerid,246.8096,126.7141,1003.2188))
		            {
		            	SetPlayerPos(playerid, 1555.9838,-1673.6777,28.3955);
		            	GameTextForPlayer(playerid, "~w~LSPD Helicoptere Base ",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}

 	if(!strcmp(cmdtext, "/garage", true))
 	{
 	    if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
		        {
		            if(PlayerToPoint(1.0,playerid,246.8096,126.7141,1003.2188))
		            {
		            	SetPlayerPos(playerid, 1531.9021,-1679.6292,5.8906);
		            	GameTextForPlayer(playerid, "~w~Garage de la LSPD",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}

    if(!strcmp(cmdtext, "/regardernotes", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas loggué ! ");
                return 1;
            }
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "_________Carnet de notes_________");
            format(string, sizeof(string), "1| %s", PlayerInfo[playerid][pNote1]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "2| %s", PlayerInfo[playerid][pNote2]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "3| %s", PlayerInfo[playerid][pNote3]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "4| %s", PlayerInfo[playerid][pNote4]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "5| %s", PlayerInfo[playerid][pNote5]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "___________________________________");
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "* %s regarde son carnet de notes.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        return 1;
    }

    if(strcmp(cmd,"/supprimernote",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    Vous n'êtes pas loggué ! ");
                return 1;
            }
            new x_nr[256];
            x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /supprimernote (1-5)");
				return 1;
			}
			if(strcmp(x_nr,"1",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote1s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote1], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote1s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "La note 1 a bien étée suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas rédigé de note 1 ! ");
				}
			}
			else if(strcmp(x_nr,"2",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote2s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote2], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote2s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "La note 2 a bien étée suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas rédigé de note 2 ! ");
				}
			}
			else if(strcmp(x_nr,"3",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote3s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote3], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote3s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "La note 3 a bien étée suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas rédigé de note 3 ! ");
				}
			}
			else if(strcmp(x_nr,"4",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote4s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote4], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote4s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "La note 4 a bien étée suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas rédigé de note 4 ! ");
				}
			}
			else if(strcmp(x_nr,"5",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote5s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote5], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote5s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "La note 5 a bien étée suprimée.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas rédigé de note 5 ! ");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Id de note invalide ! ");
			    return 1;
			}
        }
        return 1;
    }

    if(strcmp(cmd,"/creernote",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    Vous n'êtes pas logué ! ");
                return 1;
            }
            new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(length > 60)
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Note trop longue (maximum 60 caracthers) ! ");
			    return 1;
			}
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /creernote [text]");
				return 1;
			}
			if(PlayerInfo[playerid][pNote1s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote1], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote1s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note bien crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote2s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote2], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote2s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note bien crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote3s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote3], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote3s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note bien crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote4s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote4], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote4s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note bien crée.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote5s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote5], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote5s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Note bien crée.");
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez plus de place dans votre carnet de notes ! ");
			    return 1;
			}
        }
        return 1;
    }

    if(strcmp(cmd,"/donnernote",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    Vous n'êtes pas logué ! ");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnernote [idDuJoueur/PartieDuNom] [note id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(!PlayerToPoint(5, playerid, x, y, z))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "    Le joueur n'es pas pret de vous! ");
			            return 1;
			        }
			        new x_nr[64];
			        x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnernote [idDuJoueur/PartieDuNom] [note id]");
						return 1;
					}
					if(strcmp(x_nr,"1",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote1s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Carnet de note du joueur plein ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas de note 1 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"2",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote2s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Carnet de note du joueur plein ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas de note 2 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"3",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote3s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Carnet de note du joueur plein ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas de note 3 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"4",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote4s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Carnet de note du joueur plein ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas de note 4 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"5",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote5s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Vous avez donné une note à [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Vous avez reçu une note de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Carnet de note du joueur plein ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    Vous n'avez pas de note 5 ! ");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Note id invalide ! ");
					    return 1;
					}
			    }
			}
        }
        return 1;
    }
    /*if(strcmp(cmd,"/gouvinvite",true)==0)
    {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Connectez-vous ! ! ");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gouvinvite [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pMember] != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Le joueur fait partis d'une autres organisation !");
				            return 1;
				        }
				        if(PlayerInfo[giveplayerid][pLeader] != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Le joueur fait partis d'une autres organisation ! ");
				            return 1;
				        }
				        PlayerInfo[giveplayerid][pMember] = 7;
						PlayerInfo[giveplayerid][pTeam] = 11;
						gTeam[giveplayerid] = 11;
				        SendClientMessage(playerid, COLOR_WHITE, "  Vous l'avez inviter au gouvernement.");
				        SendClientMessage(playerid, COLOR_WHITE, "Info: n'oubliez pas le /donnerjobgouv .");
				        SendClientMessage(giveplayerid, COLOR_WHITE, "  Vous étes recruter au gouvernement par le maire.");
				    }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'ètes pas la maire ! ");
			    return 1;
			}
		}
		return 1;
    }

	if(strcmp(cmd,"/gouvuninvite",true)==0)
    {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous devez vous connecter Dabord ! ");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gouvuninvite [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pMember] != 7)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Vous ne faite pas partit de la Faction ! ");
				            return 1;
						}
						PlayerInfo[giveplayerid][pMember] = 0;
						PlayerInfo[giveplayerid][pRank] = 0;
						PlayerInfo[giveplayerid][pTeam] = 3;
						gTeam[giveplayerid] = 3;
						new randomskin;
						if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivMalePeds)); }
						else if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivFemalePeds)); }
						else { randomskin = random(sizeof(CivMalePeds)); }
						SetPlayerSkin(giveplayerid, randomskin);
						PlayerInfo[giveplayerid][pChar] = randomskin;
						SendClientMessage(giveplayerid, COLOR_WHITE, "  Vous avez été renvoyé du Gourvernement par le maire.");
						SendClientMessage(playerid, COLOR_WHITE, "   Vous avez virer ce joueur du gourvenement.");
				    }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas la mairie ");
			    return 1;
			}
		}
		return 1;
    }

    if(strcmp(cmd,"/donnerjobgouv",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous devez être connecter ! ");
                return 1;
            }
            if(PlayerInfo[playerid][pLeader] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "  Vous n'ête pas le Maire ! ");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerjobgouv [idDuJoueur/PartieDuNom] [role name]");
				SendClientMessage(playerid, COLOR_WHITE, "Noms disponibles : chauffeur, secretaire, garde-du-corps, chef-de-la-securitee, inspecteur-des-affaires-internes, maire-adjoint ");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMember] != 7)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas dans cette faction ! ");
			            return 1;
			        }
			        new x_nr[64];
			        x_nr = strtok(cmdtext, idx);
			        if(!strlen(x_nr))
			        {
				    	SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerjobgouv [idDuJoueur/PartieDuNom] [role name]");
						SendClientMessage(playerid, COLOR_WHITE, "Noms disponibles : chauffeur, secretaire, garde-du-corps, chef-de-la-securitee, inspecteur-des-affaires-internes, maire-adjoint ");
						return 1;
			        }
			        if(strcmp(x_nr,"chauffeur",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pRank] = 1;
						SendClientMessage(giveplayerid, COLOR_WHITE, "Le President vous donne le rôle de chauffeur");
						ChosenSkin[giveplayerid] = 68;
						SetPlayerSkin(giveplayerid, 68);
						return 1;
			        }
			        if(strcmp(x_nr,"secretaire",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pRank] = 2;
						SendClientMessage(giveplayerid, COLOR_WHITE, "Le President vous donne nomme secrétaire");
						ChosenSkin[giveplayerid] = 141;
						SetPlayerSkin(giveplayerid, 141);
						return 1;
			        }
			        if(strcmp(x_nr,"garde-du-corps",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pJob] = 8;
			            PlayerInfo[giveplayerid][pRank] = 3;
			            SendClientMessage(giveplayerid, COLOR_WHITE, "Le President vous nomme Garde du corps");
						ChosenSkin[giveplayerid] = 163;
						SetPlayerSkin(giveplayerid, 163);
						return 1;
			        }
			        if(strcmp(x_nr,"chef-de-la-securitee",true) == 0)
                    {
			            PlayerInfo[giveplayerid][pRank] = 4;
			            SendClientMessage(giveplayerid, COLOR_WHITE, "Le President vous nomme Chef de la securitée");
						ChosenSkin[giveplayerid] = 165;
						SetPlayerSkin(giveplayerid, 165);
						return 1;
			        }
			        if(strcmp(x_nr,"inspecteur-des-affaires-internes",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pRank] = 5;
			            SendClientMessage(giveplayerid, COLOR_WHITE, "Le President vous nomme Inspecteur des affaires Internes");
						ChosenSkin[giveplayerid] = 17;
						SetPlayerSkin(giveplayerid, 17);
						return 1;
			        }
			        if(strcmp(x_nr,"Maire",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pRank] = 6;
			            SendClientMessage(giveplayerid, COLOR_WHITE, "Le President vous nomme Maire Adjoint");
						ChosenSkin[giveplayerid] = 295;
						SetPlayerSkin(giveplayerid, 295);
						return 1;
			        }
			        else
			        {
				    	SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerjobgouv [idDuJoueur/PartieDuNom] [role name]");
						SendClientMessage(playerid, COLOR_WHITE, "Noms disponibles : chauffeur, secretaire, garde-du-corps, chef-de-la-securitee, inspecteur-des-affaires-internes, maire-adjoint ");
						return 1;
			        }
			    }
			}
        }
        return 1;
    }*/

    if(!strcmp(cmdtext, "/toquer", true))
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
                    format(string, sizeof(string), "* %s Frappe a la porte de la maison.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
					    if(PlayerToPoint(60, p, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
					    {
					        SendClientMessage(p, COLOR_PURPLE, "* Quelqu'un frappe a la porte de la maison.");
					    }
					}
				}
			}
        }
        return 1;
    }

    if(!strcmp(cmdtext, "/startbalayage", true))
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 17)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas le balayeurs de la rue !");
		        return 1;
		    }
		    if(PlayerIsSweeping[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous balayez des rues, déjà !");
		        return 1;
		    }
		    if(IsASweeper(idcar))
		    {
		        PlayerIsSweeping[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new randomize;
		        randomize = random(sizeof(gSweeperPoints));
		        SetPlayerCheckpoint(playerid, gSweeperPoints[randomize][0], gSweeperPoints[randomize][1], gSweeperPoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Vous travaillez maintenant! Allez au poste de contrôle rouge.");
		    }
		}
		return 1;
    }

    if(!strcmp(cmdtext, "/stopbalayage", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsSweeping[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsSweeping[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Vous avez arreter de balayer la rue.");
                if(IsASweeper(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   Vous ne balayer pas ! ");
				return 1;
            }
        }
        return 1;
    }
    
    if(!strcmp(cmdtext, "/startlivraison", true))
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 14)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas camionneur !");
		        return 1;
		    }
		    if(PlayerIsTrucking[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous faites deja une livraison !");
		        return 1;
		    }
		    if(IsATruck(idcar))
		    {
		        PlayerIsTrucking[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new randomize;
		        randomize = random(sizeof(gTruckPoints));
		        SetPlayerCheckpoint(playerid, gTruckPoints[randomize][0], gTruckPoints[randomize][1], gTruckPoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Vous travaillez maintenant! Allez au poste de contrôle rouge.");
		    }
		}
		return 1;
    }

    if(!strcmp(cmdtext, "/stoplivraison", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsTrucking[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsTrucking[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Vous avez arreté de faire des livraisons .");
                if(IsATruck(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   Vous ne faites pas de livraison ! ");
				return 1;
            }
        }
        return 1;
    }
        if(!strcmp(cmdtext, "/startdistribution", true))
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 15)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'etes pas livreur de pizza !");
		        return 1;
		    }
		    if(PlayerIsPizzabiking[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous livrez deja une pizza !");
		        return 1;
		    }
		    if(IsAPizzabike(idcar))
		    {
		        PlayerIsPizzabiking[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new randomize;
		        randomize = random(sizeof(gPizzabikePoints));
		        SetPlayerCheckpoint(playerid, gPizzabikePoints[randomize][0], gPizzabikePoints[randomize][1], gPizzabikePoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Vous travaillez maintenant! Allez au poste de contrôle rouge.");
		    }
		}
		return 1;
    }

    if(!strcmp(cmdtext, "/stopdistribution", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsPizzabiking[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsPizzabiking[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Vous avez la distribution de pizza.");
                if(IsAPizzabike(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   Vous distribuez pas ! ");
				return 1;
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/inv", true) || !strcmp(cmdtext, "/inventaire", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous devez être connecter ! ");
                return 1;
            }
            new gunname[100];
            GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "__________ Inventaire __________");
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
            	format(string, sizeof(string), "Arme: %s, Munition: %d", gunname, PlayerInfo[playerid][pInvAmmo]);
            	SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "  L'inventaire est vide.");
			}
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "_______________________________");
            SendClientMessage(playerid, COLOR_WHITE, "HINT: /prendrearme /deposerarme");
        }
        return 1;
    }

    if(!strcmp(cmdtext, "/prendrearme", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous devez être connecter ! ");
                return 1;
            }
            if(ReduceTime[playerid] == 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous devez attendre 3 seconde avant de re utiliser la commande !");
                return 1;
            }
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
                ReduceTime[playerid] = 1;
                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                new gunname[100];
                GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
                SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pInvWeapon], PlayerInfo[playerid][pInvAmmo]);
                GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "   Vous avez pris %s de votre inventaire.", gunname);
      			SendClientMessage(playerid, COLOR_GREY, string);
      			PlayerInfo[playerid][pInvWeapon] = 0;
                PlayerInfo[playerid][pInvAmmo] = 0;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, " Vous n'avez pas placé de fusils dans votre inventaire !");
                return 1;
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/deposerarme", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "  Vous devez être connecter  !");
                return 1;
            }
            if(ReduceTime[playerid] == 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous devez attendre 3 seconde avant de re utiliser cette commande !");
                return 1;
            }
            if(PlayerInfo[playerid][pInvWeapon] != 0 || PlayerInfo[playerid][pInvAmmo] != 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "  Vous avez placer quelque chose dans votre inventaire mais il y est déjà !");
                return 1;
            }

            new gunID = GetPlayerWeapon(playerid);
            new gunAmmo = GetPlayerAmmo(playerid);

            if(gunID != 0 && gunAmmo != 0)
            {
                ReduceTime[playerid] = 1;
                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                PlayerInfo[playerid][pInvWeapon] = gunID;
                PlayerInfo[playerid][pInvAmmo] = gunAmmo;
				RemovePlayerWeapon(playerid, gunID);
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new gunname[100];
				GetWeaponName(gunID, gunname, sizeof(gunname));
                format(string, sizeof(string), "   Vous mettez %s Dans votre inventaire.", gunname);
				SendClientMessage(playerid, COLOR_GREY, string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas cette arme pour la mettre dans votre inventaire ! ");
                return 1;
            }
        }
        return 1;
    }
    // Commande gouvernement pour regarder les stats
    	if (strcmp(cmd, "/regarderstats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 9999 || PlayerInfo[playerid][pLeader] == 7 || IsPlayerAdmin(playerid))
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "SERVEUR: /regarderstats [Joueurid/Nom ou Prénom]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(IsPlayerNPC(giveplayerid))
			   	 		{
			        		SendClientMessage(playerid, COLOR_GREY, "Cette commande est désactivée pour une utilisation contre un BOT.");
			        		return 1;
						}
						ShowStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Joueur non trouvé");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas un admin ou un président");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/regarderarmes", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] < 2249)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "Vous n'ête pas autoriser");
		    return 1;
	    }
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "[CMD]: /regarderarmes [ID]");
		    return 1;
	    }
		giveplayerid = ReturnUser(tmp);
		if (giveplayerid == INVALID_PLAYER_ID)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "Ce joueurs est Hors ligne");
		    return 1;
	    }
		new sweapon, sammo;
	    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	    format(string, sizeof(string), "%s possède les armes suivantes:", giveplayer);
	    SendClientMessage(playerid, COLOR_GRAD1, string);
		for (new i=0; i<9; i++)
	    {
		    GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
		    if(sweapon != 0)
		    {
		        format(string, sizeof(string), "%d: %d (%d)", i, sweapon, sammo);
		    	SendClientMessage(playerid, COLOR_GRAD1, string);
			}
	    }
		return 1;
	}
	/*if(strcmp(cmd, "/suprimervehicule", true) == 0 || strcmp(cmd, "/sv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué ! ");
	            return 1;
	        }
	   		if (PlayerInfo[playerid][pAdmin] < 2999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas faire cela! ");
	            return 1;
	        }
	        else
	        {
				new carid;
				carid = GetPlayerVehicleID(playerid);
				DestroyVehicle(carid);
            }
		}
		return 1;
	}*/
	if(strcmp(cmd, "/coffre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[64];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: /coffre <nom>");
			    SendClientMessage(playerid, COLOR_WHITE, "noms valides: info, deposerarme, retirerarme, deposergilet, retirergilet");
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "vous pouvez ausssi faire /coffre fouiller pour fouiller");
			    }
			    return 1;
			}
			if(strcmp(x_nr,"info",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsABike(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Ce vehicule n'a pas de coffre");
               			    return 1;
               			}

						SendClientMessage(playerid, COLOR_LIGHT_BLUE, "|_______ Coffre du vehicule _______|");
						for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
						{
						    new gunname[100];
						    if(vehTrunk[result][slot] != 0)
						    {
						        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						        format(string, sizeof(string), "| Place %i: %s (Munitions: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						    else
						    {
						        format(string, sizeof(string), "| Place %i: Vide", slot);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						}
						format(string, sizeof(string), "| Armure: %f%", vehTrunkArmour[result]);
						SendClientMessage(playerid, COLOR_WHITE, string);

               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s Ouvre le coffre et regarde ce qu'il y a dedans.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'as pas de coffre");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"deposerarme",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			        }

			        case 1:
			        {
			            if(vehTrunkCounter[result] != (MAX_TRUNK_SLOTS-1))
			            {
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "Vous devez attendre 3 secondes avant de réutilisé cette commande");
			            	    return 1;
			            	}
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "  Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsABike(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83|| GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "  Ce vehicule n'a pas de coffre !");
               			    	return 1;
               				}
                            new buffer[512];
                            new gunname[100];
                            new gunID = GetPlayerWeapon(playerid);
                            new gunAmmo = GetPlayerAmmo(playerid);

                            if(gunID != 0 && gunAmmo != 0)
                            {
                                ReduceTime[playerid] = 1;
                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                                GetWeaponName(gunID, gunname, sizeof(gunname));
                                vehTrunkCounter[result]++;
                                vehTrunk[result][vehTrunkCounter[result]] = gunID;
                                vehTrunkAmmo[result][vehTrunkCounter[result]] = gunAmmo;
                                format(buffer, sizeof(buffer), "Vous avez déposer vôtre %s (munnition: %i) dans le coffre de la voiture.", gunname, gunAmmo);
                                SendClientMessage(playerid, COLOR_WHITE, buffer);
                                RemovePlayerWeapon(playerid, gunID);
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                format(string, sizeof(string), "* %s Ouvre le coffre de sa voiture et dépose une arme.", sendername);
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                SaveTrunk();
                                return 1;
                            }
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, " Le Coffre de la voiture es plein");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'as pas de coffre");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"retirerarme",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }

			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                return 1;
			            }
			            if(ReduceTime[playerid] == 1)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous devez attendre 3 secondes avant de réutilisé cette commande");
			                return 1;
		            	}
			            if(IsAPlane(result) || IsABike(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'as pas de coffre!");
               			    return 1;
               			}
			            if(vehTrunkCounter[result] != 0)
			            {
			                ReduceTime[playerid] = 1;
               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                new buffer[512];
			                new gunName[100];

			                SafeGivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
			                format(buffer, sizeof(buffer), "Vous avez pris votre %s (munnition: %i) dans le coffre de la voiture.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                SendClientMessage(playerid, COLOR_WHITE, buffer);
			                vehTrunk[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkCounter[result]--;
			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s ouvre le coffre de sa voiture et prend une arme.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, " Le Coffre de la voiture es vide");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'as pas de coffre");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"deposergilet",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                return 1;
			            }
			            if(IsAPlane(result) || IsABike(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'as pas de coffre !");
               			    return 1;
               			}

			            new Float:plyArmour;
			            GetPlayerArmour(playerid, plyArmour);

                        if(plyArmour != 0)
			            {
			                SetPlayerArmour(playerid, 0);
			                vehTrunkArmour[result] = plyArmour;

			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s ouvre le coffre de sa voiture et prend un gillet parballe.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de gillet ");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'as pas de coffre");
			            return 1;
			        }
				}
			    return 1;
			}
			else if(strcmp(x_nr,"retirergilet",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas ouvrir le coffre depuis votre voiture");
			                return 1;
			            }
			            if(IsAPlane(result) || IsABike(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'as pas de coffre !");
               			    return 1;
               			}
			            if(vehTrunkArmour[result] != 0)
			            {
			                SetPlayerArmour(playerid, vehTrunkArmour[result]);
			                vehTrunkArmour[result] = 0;

			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s ouvre le coffre de sa voiture et prend son gillet parballe.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de gillet dans cette voiture ! ");
			                return 1;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'as pas de coffre");
			            return 1;
			        }
				}
				return 1;
			}
			else if(strcmp(x_nr,"fouiller",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Aucune voiture avec un coffre près de vous");
						}

			        	case 1:
			        	{
			            	if(IsPlayerInAnyVehicle(playerid))
      						{
			                	SendClientMessage(playerid, COLOR_GREY, "  Vous ne pouvez pas ouvrir le coffre depuis cette voiture");
			            		return 1;
               				}
               				if(IsAPlane(result) || IsABike(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'as pas de coffre !");
               			    	return 1;
               				}

							SendClientMessage(playerid, COLOR_LIGHT_BLUE, "|_______ Vehicle Trunk _______|");
							for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
							{
							    new gunname[100];
							    if(vehTrunk[result][slot] != 0)
							    {
							        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						    	    format(string, sizeof(string), "| Place %i: %s (munnition: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
						    	else
						    	{
						        	format(string, sizeof(string), "|Place %i: Vide ", slot);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
							}
							format(string, sizeof(string), "| Armure: %f%", vehTrunkArmour[result]);
							SendClientMessage(playerid, COLOR_WHITE, string);

	               			GetPlayerName(playerid, sendername, sizeof(sendername));
    	                    format(string, sizeof(string), "* %s ouvre le coffre de la voiture et regarde ce qu'il y a dedan.", sendername);
        	          		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
			        	}

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Ce véhicule n'as pas de coffre");
				            return 1;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas faire cela ! ");
					return 1;
				}
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "COMMANDE: /coffre <nom>");
			    SendClientMessage(playerid, COLOR_WHITE, "noms valides: info, deposerarme, retirerarme, deposergilet, retirergilet");
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "vous pouvez ausssi faire /coffre fouiller pour fouiller");
			    }
			    return 1;
			}
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/fenetre", true) || !strcmp(cmdtext, "/fe", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas logué ! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new carid = GetPlayerVehicleID(playerid);
				if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Ce véhicule n'as pas de fenetre");
				    return 1;
				}
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	            {
	            	VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s ouvre la fenêtre du vehicule.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
				{
				    VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s ferme la fenêtre du vehicule.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   vous devez être dans se vehicule pour utiliser cela!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/adminservice", true))
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas loggué !");
				return 1;
		    }
		    if(PlayerInfo[playerid][pAdmin] > 999)
		    {
		        if(AdminDuty[playerid] == 0)
		        {
		            AdminDuty[playerid] = 1;
		            SetPlayerArmour(playerid, 999999);
					SetPlayerHealth(playerid, 999999);
    	            GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "[ID:%d]%s se met en service admin(Que si une personne IG a besoin d'un admin)", playerid, sendername);
					ABroadCast(COLOR_YELLOW,string);
					SetPlayerSkin(playerid,217);
				    return 1;
                }
		        else if(AdminDuty[playerid] == 1)
		        {
		            AdminDuty[playerid] = 0;
		            SetPlayerArmour(playerid, 0);
					SetPlayerHealth(playerid, 100);
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pChar]);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "[ID:%d]%s se retire du service admin", playerid, sendername);
					ABroadCast(COLOR_YELLOW,string);
					return 1;
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas admin !");
		        return 1;
		    }
		}
	    return 1;
	}
	if(strcmp(cmd, "/fouillerportemonnaie", true) == 0 || strcmp(cmd, "/fpm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "FORMULE: /fouillerportemonnaie [idDuJoueur/PartieDuNom]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerTied[giveplayerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Cette personne doit être ligotée ! ");
			            return 1;
			        }
			        if(ProxDetectorS(5.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "%s as %d$ sur lui.", giveplayer, GetPlayerMoney(giveplayerid));
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas pres de vous !");
			            return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
	/*if(strcmp("/mourrir", cmdtext, true)==0)
	{
       new Float:Health;
       GetPlayerHealth(playerid,Health);
       new name[MAX_PLAYER_NAME];//variable pseudo
       GetPlayerName(playerid,name,sizeof(name));//on retient le pseudo
       if(Health>= 1 && Health <= 19){// Si le pourcentage de santé est égal ou inférieur à 5%
       SetPlayerHealth(playerid,0); // On tue le joueur.
       format(string,sizeof(string), "* %s à succomber à c'est bléssure...",name);
       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
}*/
	if(!strcmp(cmdtext, "/vehid", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            format(string, sizeof(string), "* Vehicule ID: %d.", GetPlayerVehicleID(playerid));
	            SendClientMessage(playerid, COLOR_GREY, string);
	            return 1;
	        }
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/gotohopital", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 9999)
	        {
	        	SetPlayerPos(playerid, 1172.1720,-1332.8326,1006.4028);
				GameTextForPlayer(playerid, "~w~Hopital de Los Santos",5000,1);
				SetPlayerInterior(playerid,6);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 6;
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas autorisé a utilisé cette commande.");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/identite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "FORMULE: /identite [idDuJoueur/PartieDuNom]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        format(string, sizeof(string), "   Vous avez montrer votre identite à %s.", giveplayer);
	            		SendClientMessage(playerid, COLOR_WHITE, string);
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_______________________");
	            		format(string, sizeof(string), "   Nom: %s   Age: %d", sendername, PlayerInfo[playerid][pAge]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Numero  de téléphone: %d", PlayerInfo[playerid][pPnumber]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_______________________");
	            		format(string, sizeof(string), "   %s vous a montrer son identite.", sendername);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/tracerdernierappel", true) || !strcmp(cmdtext, "/tda", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué ");
	            return 1;
	        }
	        if(IsAPDMember(playerid))
	        {
	            if(pdtrace == 0 || pdtrace_x == 0 || pdtrace_y == 0 || pdtrace_z == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Erreur lors de la localisation de l'appelant");
	                return 1;
	            }
	            SendClientMessage(playerid, COLOR_WHITE, "La dérniere personne qui vous à appeler es marquée en rouge sur la carte");
	            SendClientMessage(playerid, COLOR_WHITE, "FORMULE: /restaurergps pour enlever le point rouge");
				SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
	            return 1;
	        }
	        else if(PlayerInfo[playerid][pJob] == 11)
	        {
	            if(emdtrace == 0 || emdtrace_x == 0 || emdtrace_y == 0 || emdtrace_z == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Erreur lors de la localisation de l'appelant");
	                return 1;
	            }
	            SendClientMessage(playerid, COLOR_WHITE, "La dérniere personne qui vous à appeler es marquée en rouge sur la carte");
	            SendClientMessage(playerid, COLOR_WHITE, "FORMULE: /restaurergps pour enlever le point rouge");
				SetPlayerCheckpoint(playerid,emdtrace_x,emdtrace_y,emdtrace_z,8.0);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas faire cela ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/fumer", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(IsSmoking[playerid] == 0)
	        {
	            if(PlayerInfo[playerid][pLighter] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de briquet ! ");
	                return 1;
	            }
	            if(PlayerInfo[playerid][pCigarettes] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de cigarettes ! ");
	                return 1;
	            }
	            new randsmoke = random(2)+1;
				if(randsmoke == 1)
				{
				    PlayerInfo[playerid][pCigarettes] -= 1;
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s sort une cigarette et se l'allume.", sendername); }
					else { format(string, sizeof(string), "* %s sort une cigarette et se l'allume.", sendername); }
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    IsSmoking[playerid] = 60;
				    SendClientMessage(playerid, COLOR_WHITE, "INFO: vous pouvez faire /finircigarette pour vite terminer votre cigarette.");
				    SetPlayerSpecialAction(playerid,21);
				    return 1;
				}
				else
				{
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s essaye de s'allumer une cigarette mais n'y arrive pas.", sendername); }
					else { format(string, sizeof(string), "* %s essaye de s'allumer une cigarette mais n'y arrive pas.", sendername); }
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous fumez déjà ! ");
			    return 1;
			}
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/biere", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(IsDrinking[playerid] == 0)
	        {
	            if(PlayerInfo[playerid][pBiere] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de biere ! ");
	                return 1;
	            }
	            new randsdrink = random(2)+1;
				if(randsdrink == 1)
				{
				    PlayerInfo[playerid][pBiere] -= 1;
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s sort une biere et l'ouvre.", sendername); }
					else { format(string, sizeof(string), "* %s sort une biere et l'ouvre.", sendername); }
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    IsDrinking[playerid] = 60;
				    SetPlayerSpecialAction(playerid,22);
				    return 1;
				}
				else
				{
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s essaye d'ouvrir sa biere mais echoue.", sendername); }
					else { format(string, sizeof(string), "* %s essaye d'ouvrir sa biere mais echoue.", sendername); }
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous buvez déjà ! ");
			    return 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/finircigarette", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(IsSmoking[playerid] > 0)
	        {
	            IsSmoking[playerid] = 0;
	            GetPlayerName(playerid, sendername, sizeof(sendername));
	            if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s Prend sa cigarrete et la jette par terre.", sendername); }
	            else { format(string, sizeof(string), "* %s Prend sa cigarrete et la jette par terre.", sendername); }
	            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            if(UsingSmokeAnim[playerid] == 1)
	            {
	                ClearAnimations(playerid);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Tu n'a pas de cigarrete ! ");
	            return 1;
	        }
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/fumeranim", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous pouvez utiliser /fumeranim seulement quand vous êtes a pied !");
	            return 1;
	        }
	        if(IsSmoking[playerid] != 0)
	        {
	            UsingSmokeAnim[playerid] = 1;
	            ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous avez besoin de /fumer pour utiliser cette animation ! ");
	            return 1;
	        }
		}
		return 1;
	 }
	if(!strcmp(cmdtext, "/chargermateriaux", true))
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 20)
	        {
	            if(PlayerToPoint(3.0,playerid,2667.7090,-1458.9666,30.5938))
	            {
	                if( GetPlayerMoney(playerid) < 199)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas assez d'argent (il vous faut 200 dollars)");
	                    return 1;
	                }
	                if(MatsHolding[playerid] != 0)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, " Vous faites passer clandestinement le matériel.");
	                    return 1;
	                }
	                SafeGivePlayerMoney(playerid, - 200);
	                MatsHolding[playerid] = 25;
	                SendClientMessage(playerid, COLOR_WHITE, "Vous avez ramassé le paquet de matériel. Apportez-le à l'usine. (marquer avec un checkpoint)");
	                GameTextForPlayer(playerid, "~w~Materials chargé", 5000, 1);
	                SetPlayerCheckpoint(playerid,2230.3579,-2286.2107,14.3751,1.0);
	                return 1;
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas à l'usine de matériel d'Airelle ! ")
	                return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un contrebandier de matériel !");
	            return 1;
	        }
		}
		return 1;
	}
	if(strcmp(cmd,"/creerarme",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 20)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas faire cela. ");
			    return 1;
			}
			new x_weapon[256];
			x_weapon = strtok(cmdtext, idx);
			if(!strlen(x_weapon))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /creerarme [Nom de l'arme]");
			    SendClientMessage(playerid, COLOR_GREY, "Noms d'armes: couteau batte pistolet(100) eagle(200)");
			    SendClientMessage(playerid, COLOR_GREY, "Noms d'armes: mp5(200) shotgun(200) ak47(600) m4(600) sniper(600)");
			    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			    return 1;
			}
			if(strcmp(x_weapon,"couteau",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 4; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"batte",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 5; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"pistolet",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { CreatingGun[playerid] = 23; CreatingGunPrice[playerid] = 100; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 14; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 24; CreatingGunPrice[playerid] = 150; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"mp5",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 29; CreatingGunPrice[playerid] = 200; CreatingGunAmmo[playerid] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 25; CreatingGunPrice[playerid] = 200; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
   			else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 30; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 31; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"sniper",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 33; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else { SendClientMessage(playerid,COLOR_GREY,"   Nom d'arme invalide!"); return 1; }
			SetPlayerCheckpoint(playerid, 2152.5308,-2270.8145,13.3090, 1.0);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            IsPuttingMaterials[playerid] = 1;
            SendClientMessage(playerid, COLOR_WHITE, "Allez prendre les armes a l'usine !");
            return 1;
	    }
	    return 1;
	 }
	if(strcmp(cmd,"/achetermatos",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 9)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez faire cela. ");
			    return 1;
	        }
	        if(!PlayerToPoint(2.0, playerid, -91.2514,-1576.4489,1.6171))
	        {
	            SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas au bonne endroits!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /achetermatos [Montant]");
	            return 1;
	        }
	        new mammount;
	        mammount = strval(tmp);
			if( GetPlayerMoney(playerid) < mammount * 1 - 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas assez d'argent ! ! ");
			    return 1;
			}
			if(mammount < 100 || mammount > 1000)
			{
			   SendClientMessage(playerid, COLOR_GREY, "vous ne pouvez pas acheter moin que 100 et plus de 1000 de materiaux!");
			   return 1;
			}
			matssys[MatsAmmount] -= mammount;
			PlayerInfo[playerid][pMats] += mammount;
			SafeGivePlayerMoney(playerid, - mammount * 1);
			format(string, sizeof(string), "   Vous avez acheté %d Materiels Pour %d$ !", mammount, mammount * 1);
			SendClientMessage(playerid, COLOR_GREY, string);
			SaveMatsSystem();
			return 1;
	    }
	    return 1;
	 }
     if(strcmp(cmd, "/credits", true) == 0)
     {
         if(IsPlayerConnected(playerid))
         {
             SendClientMessage(playerid, COLOR_RED, "----------------- La Vie Virtuelle - Crédits -----------------");
             SendClientMessage(playerid, COLOR_GREEN, "Scripteurs: Toobias , Gigise");
             SendClientMessage(playerid, COLOR_GREEN, "GameMode mit en partage aprés la fermeture de LVV");
             SendClientMessage(playerid, COLOR_GREEN, "pour laisser place a Eternal-Life-Rp.eu ! Nouveau GameMode Exclusif");
             SendClientMessage(playerid, COLOR_GREEN, "Et bien d'autres choses..");
		 }
         return 1;
	 }
 	 if(strcmp(cmd,"/acheterdrogue",true)==0)
    	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas logué !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez faire cela. ");
			    return 1;
	        }
	        if(!PlayerToPoint(2.0, playerid, -70.7612,-1574.3591,1.6421))
	        {
	            SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas au bonne endroits!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /acheterdrogue [Montant]");
	            return 1;
	        }
            new dammount;
	        dammount = strval(tmp);
			if( GetPlayerMoney(playerid) < 5)
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas assez d'argent ! ! ");
			    return 1;
			}
			if(dammount < 1 || dammount > 50)
			{
			   SendClientMessage(playerid, COLOR_GREY, "   vous ne pouvez pas acheter moin de 1 ou plus de 50 de drogue!");
			    return 1;
			}
			drugsys[DrugAmmount] -= dammount;
			PlayerInfo[playerid][pDrugs] += dammount;
			SafeGivePlayerMoney(playerid, - dammount * 6);
			format(string, sizeof(string), "   Vous avez acheté %d de drogue Pour %d$ !", dammount, dammount * 6);
			SendClientMessage(playerid, COLOR_GREY, string);
			SaveDrugSystem();
			return 1;
	    }
	    return 1;
	 }


	if(strcmp(cmd,"/ouvrirgrille",true)==0 || strcmp(cmd,"/og",true)==0)
	{
    	if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1)
    	{
  	        if (PlayerToPoint(15, playerid,1587.4228515625, -1639.2021484375, 12.3828125))
		    {
	   			if(Grille[1] == 1)
	   			{
	   			    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   			}
   	      		MoveStreamObject(police1,1589.02050781, -1638.08789062, 7.474289894104, 0.97);
	   	   		SetTimer("FermerBarrierePolice1", 12000, 0);
	      		Grille[1] = 1;
   	    		SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	   			if(PlayerInfo[playerid][pMaskuse] == 1)
		    	{
 		  	     	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de la LSPD .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	}
		     	else
		    	{
		   	       	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de la LSPD .*", sendername);
 		  	     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	}
		    }
  	        if (PlayerToPoint(15, playerid,1543.8592529297, -1627.734375, 12.707822799683))
		    {
	   			if(Grille[2] == 1)
	   			{
	   			    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   			}
   	      		MoveStreamObject(police2,1544.55371094, -1627.27539062, 6.55997276, 0.97);
	   	   		SetTimer("FermerBarrierePolice2", 12000, 0);
	      		Grille[2] = 1;
   	    		SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	   			if(PlayerInfo[playerid][pMaskuse] == 1)
		    	{
 		  	     	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de la LSPD .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	}
		     	else
		    	{
		   	       	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de la LSPD .*", sendername);
 		  	     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	}
		    }
		}
    	if(PlayerInfo[playerid][pFlyLic] == 1)
    	{
  	        if (PlayerToPoint(15, playerid,1962.0041503906, -2189.5124511719, 13.546875))
		    {
	   			if(Grille[4] == 1)
	   			{
	   			    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   			}
   	      		MoveStreamObject(aeroport,1961.5322265625, -2189.7646484375, 9.0702667236328, 0.97);
	   	   		SetTimer("Fermeraeroport", 12000, 0);
	      		Grille[4] = 1;
   	    		SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	   			if(PlayerInfo[playerid][pMaskuse] == 1)
		    	{
 		  	     	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de l'aeroport .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	}
		     	else
		    	{
		   	       	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de l'aeroport .*", sendername);
 		  	     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	}
		    }
		}
 	  	if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12)
  	 	{
  		    if (PlayerToPoint(15, playerid,1286.0546875, -2055.537109375, 58.682399749756))
	 	    {
				if(	Grille[8] == 1)
				{
				    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
				}
      			MoveStreamObject(russe,1284.7415771484, -2056.7543945313, 54.335113525391, 0.97);
	   			SetTimer("FermerBarriererusse", 12000, 0);
	   			Grille[8] = 1;
    			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  		format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille de la famille Russe .*", sendername);
   			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
 	  	}
 	  	if(PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pMember] == 10)
 	  	{
  		    if (PlayerToPoint(15, playerid,1595.6496582031, -2176.5832519531, 12.504703521729))
	 	    {
				if(	Grille[13] == 1)
				{
				    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
				}
      			MoveStreamObject(racer1,1593.9775390625, -2169.0615234375, 13.379755020142, 0.97);
	   			SetTimer("FermerRacer1", 12000, 0);
	   			Grille[13] = 1;
    			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  		format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille du garage des Racer'z.*", sendername);
   			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			if (PlayerToPoint(15, playerid,1496.8774414063, -2166.21875, 12.496891021729))
	 	    {
				if(	Grille[12] == 1)
				{
				    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
				}
      			MoveStreamObject(racer2,1497.2830810547, -2166.7561035156, 9.0754051208496, 0.97);
	   			SetTimer("FermerRacer2", 12000, 0);
	   			Grille[12] = 1;
    			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  		format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille du parking des Racer'z.*", sendername);
   			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
 	  	}
 	  	if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
  	 	{
  		    if (PlayerToPoint(15, playerid,786.77185058594, -1152.4747314453, 23.871732711792))
	 	    {
				if(	Grille[9] == 1)
				{
				    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
				}
      			MoveStreamObject(cosa1,785.2890625, -1152.41796875, 19.191352844238, 0.97);
	   			SetTimer("Fermercosa1", 12000, 0);
	   			Grille[9] = 1;
    			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  		format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille des Cosa .*", sendername);
   			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
  		    if (PlayerToPoint(15, playerid,664.83276367188, -1308.5372314453, 13.458567619324))
	 	    {
				if(	Grille[10] == 1)
				{
				    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
				}
      			MoveStreamObject(cosa2,664.8271484375, -1308.4267578125, 8.9040355682373, 0.97);
	   			SetTimer("Fermercosa2", 12000, 0);
	   			Grille[10] = 1;
    			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  		format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille des Cosa .*", sendername);
   			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
  		    if (PlayerToPoint(15, playerid,659.63659667969, -1227.8707275391, 14.011827468872))
	 	    {
				if(	Grille[11] == 1)
				{
				    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
				}
      			MoveStreamObject(cosa3,659.69140625, -1227.212890625, 11.463457107544, 0.97);
	   			SetTimer("Fermercosa3", 12000, 0);
	   			Grille[11] = 1;
    			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  		format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille des Cosa .*", sendername);
   			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
 	  	}
    	if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pJob] == 7)
    	{
  	        if (PlayerToPoint(15, playerid,1644.9204101563, -1712.6429443359, 12.231161117554))
		    {
	   			if(Grille[5] == 1)
	   			{
	   			    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   			}
   	      		MoveStreamObject(fourriere1,1642.8188476563, -1707.0543212891, 16.284065246582, 0.97);
	   	   		SetTimer("Fermerfourriere1", 12000, 0);
	      		Grille[5] = 1;
   	    		SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	   			if(PlayerInfo[playerid][pMaskuse] == 1)
		    	{
 		  	     	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de la fourriere .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	}
		     	else
		    	{
		   	       	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de la fourriere .*", sendername);
 		  	     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	}
		    }
  	        if (PlayerToPoint(15, playerid,-2655.2478027344, -221.04484558105, 6.1350336074829))
		    {
	   			if(Grille[6] == 1)
	   			{
	   			    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   			}
   	      		MoveStreamObject(fourriere2,-2655.2478027344, -221.04484558105, 0.1350336074829, 0.97);
	   	   		SetTimer("Fermerfourriere2", 12000, 0);
	      		Grille[6] = 1;
   	    		SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		GetPlayerName(playerid, sendername, sizeof(sendername));
	   			if(PlayerInfo[playerid][pMaskuse] == 1)
		    	{
 		  	     	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere du QG D.Cosia .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	}
		     	else
		    	{
		   	       	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere du QG D.Cosia .*", sendername);
 		  	     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	}
		    }
		}
 		else { SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas de télécommande pour cet grille."); }
        return 1;
	}
	if(!strcmp(cmdtext, "/ouvrirtuning", true))
	{
  	  	if(PlayerInfo[playerid][pAdmin] > 2 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
    	{
        	if (PlayerToPoint(30, playerid,1042.2530,-1026.0344,32.1016))
			{
      			SendClientMessage(playerid, COLOR_BLUE,"garrage de tuning ouvert");
      			GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s prend sa télécommande et ouvre la barierre du garrage de tuning.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else { SendClientMessage(playerid, COLOR_GREY,"Vous êtes  trop loin."); }
		}
		else return SendClientMessage(playerid, COLOR_GREY,"Vous ne pouvez pas faire cela.");
		return 1;
	}
	if(!strcmp(cmdtext, "/fermertuning", true))
	{
    	if(PlayerInfo[playerid][pAdmin] > 2 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
    	{
        	if (PlayerToPoint(30, playerid,1042.2530,-1026.0344,32.1016))
			{
      			SendClientMessage(playerid, COLOR_BLUE,"La voiture a la porte fermer");
      			GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s prend sa télécommande de sa voiture et ferme la porte de sa voiture.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else { SendClientMessage(playerid, COLOR_GREY,"La destination est trop loin rapprocher vous de la porte."); }
		}
    	else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la télécommande pour fermer la porte.");
    	return 1;
	}
	if(!strcmp(cmdtext, "/ouvrirporte", true))
	{
    	if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
    	{
       	    if (PlayerToPoint(3, playerid,239.5537,117.5195,1002.0925))
			{
      			MoveStreamObject(lspddoor1, 239.6792,114.9678,1002.1687, 3.5000);
      			MoveStreamObject(lspddoor2, 239.6377,118.5999,1002.1687, 3.5000);
      			SendClientMessage(playerid, COLOR_BLUE,"La porte de la LSPD est ouverte, fermez-la s'il vous plaît!");
      			GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s prend sa télécommande et ouvre la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       		}
       	    if (PlayerToPoint(3, playerid,253.1731,109.0229,1002.2427))
			{
      			MoveStreamObject(lspddoor3, 253.1478,111.6200,1002.2187, 3.5000);
      			MoveStreamObject(lspddoor4, 253.1988,108.1037,1002.2186, 3.5000);
      			SendClientMessage(playerid, COLOR_BLUE,"La porte de la LSPD est ouverte, fermez-la s'il vous plaît!");
      			GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s prend sa télécommande et ouvre la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       		}
       		if (PlayerToPoint(3, playerid,253.2621,125.2635,1002.2427))
			{
      			MoveStreamObject(lspddoor5, 253.2198,127.8265,1002.2186, 3.5000);
      			MoveStreamObject(lspddoor6, 253.1568,124.2483,1002.2186, 3.5000);
      			SendClientMessage(playerid, COLOR_BLUE,"La porte de la LSPD est ouverte, fermez-la s'il vous plaît!");
      			GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s prend sa télécommande et ouvre la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       		}
       		if (PlayerToPoint(3, playerid,239.5825,125.1213,1002.4249))
			{
      			MoveStreamObject(lspddoor7, 239.6572,122.4871,1002.2257, 3.5000);
      			MoveStreamObject(lspddoor8, 239.6500,126.1002,1002.2257, 3.5000);
      			SendClientMessage(playerid, COLOR_BLUE,"La porte de la LSPD est ouverte, fermez-la s'il vous plaît!");
      			GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s prend sa télécommande et ouvre la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       		}
       		else { SendClientMessage(playerid, COLOR_GREY,"La distination est trop loin rapprocher vous de la porte."); }
		}
		else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la télécommande pour ouvrir cette porte.");
		return 1;
	}
	if(!strcmp(cmdtext, "/fermerporte", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
	    {
	        if (PlayerToPoint(3, playerid,239.5537,117.5195,1002.0925))
			{
                MoveStreamObject(lspddoor1, 239.5513,116.1804,1002.1687, 3.5000);
				MoveStreamObject(lspddoor2, 239.5613,117.4503,1002.1687, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"LSPD la porte est fermer, Merci a vous!");
    	  		GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s Prend sa télécommande et ferme la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   	}
	        if (PlayerToPoint(3, playerid,253.1731,109.0229,1002.2427))
			{
                MoveStreamObject(lspddoor3, 253.1441,110.4971,1002.2187, 3.5000);
				MoveStreamObject(lspddoor4, 253.1420,109.1938,1002.2187, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"LSPD la porte est fermer, Merci a vous!");
    	  		GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s Prend sa télécommande et ferme la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   	}
    	   	if (PlayerToPoint(3, playerid,253.2621,125.2635,1002.2427))
			{
                MoveStreamObject(lspddoor5, 253.1712,126.7515,1002.2187, 3.5000);
				MoveStreamObject(lspddoor6, 253.1823,125.4255,1002.2187, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"LSPD la porte est fermer, Merci a vous!");
    	  		GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s Prend sa télécommande et ferme la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   	}
    	   	if (PlayerToPoint(3, playerid,239.5825,125.1213,1002.4249))
			{
                MoveStreamObject(lspddoor7, 239.6337,123.5868,1002.2257, 3.5000);
				MoveStreamObject(lspddoor8, 239.6599,124.9501,1002.2257, 3.5000);
	      		SendClientMessage(playerid, COLOR_BLUE,"LSPD la porte est fermer, Merci a vous!");
    	  		GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "* %s Prend sa télécommande et ferme la porte.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   	}
    	   	else { SendClientMessage(playerid, COLOR_GREY,"La distination est trop loin rapprocher vous de la porte."); }
		}
		else return SendClientMessage(playerid, COLOR_GREY,"Vous n'avez pas la télécommande pour fermer cette porte.");
		return 1;
	}
	if(strcmp(cmd, "/acheterarmes", true) == 0)
	{
	   	if(IsPlayerConnected(playerid))
		{
          if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, " Vous devez etre niveaux 3 pour utiliser cet commande");
				return 1;
			}
		    if(PlayerToPoint(5,playerid,295.7422,-80.6637,1000.5146))
		    {
					ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Menu de l'Ammu-Nation", "Pistolets\nFusil\nMitrailleuses\nArmes de poing et Armure", "Ok", "Annuler");
                    return 1;
		    }
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "  Vous n'êtes pas dans un Ammu-nation !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tunning", true) == 0)
	{
	   	if(IsPlayerConnected(playerid))
		{
          if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader]== 10)
          {
		    if(PlayerToPoint(5,playerid,1609.5852,-2174.0627,13.0546))
		    {
				if(IsPlayerInAnyVehicle(playerid))
				{
					TogglePlayerControllable(playerid, 0);
					ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
					SendClientMessage(playerid, COLOR_GREEN, "  Vous pouvez maintenant tunnez votre voiture !");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "  Vous n'êtes pas dans un vêhicule !");
				}
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "  Vous n'êtes dans l'atelier de tunning!");
			}
		  }
		  else
		  {
		    	SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Racer !");
				return 1;
          }
		}
		return 1;
	}
	if(strcmp(cmd, "/peinture", true) == 0)
	{
	   	if(IsPlayerConnected(playerid))
		{
          if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader]== 10)
          {
		    if(PlayerToPoint(5,playerid,1568.0308,-2179.8293,12.5218))
		    {
				if(IsPlayerInAnyVehicle(playerid))
				{
					TogglePlayerControllable(playerid, 0);
					ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
					SendClientMessage(playerid, COLOR_GREEN, "  Vous pouvez maintenant peindre votre voiture !");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "  Vous n'êtes pas dans un vêhicule !");
				}
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "  Vous n'êtes devant la grille de tunage !");
			}
		  }
		  else
		  {
		    	SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Racer !");
				return 1;
          }
		}
		return 1;
	}
	if(strcmp(cmd, "/startouest", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 13)
			{
				if (BusrouteWest[playerid][0] == 12 || BusrouteEast[playerid][0] == 12)
				{
					BusrouteWest[playerid][0] = 0;
					BusrouteEast[playerid][0] = 0;
				}
				if(BusrouteWest[playerid][0] == 0 && BusrouteEast[playerid][0] == 0)
				{
					new playervehicleid = GetPlayerVehicleID(playerid);
					if(IsABus(playervehicleid))
					{
						TogglePlayerControllable(playerid, 1);
						GameTextForPlayer(playerid, "~g~Bus Route Commencer", 5000, 3);
						SendClientMessage(playerid, COLOR_LIGHTRED, "---------Va à Los Santos Bus Route-----------");
						SendBusRoute(playerid, 1);
						SendClientMessage(playerid, COLOR_RED, " ");
						SendClientMessage(playerid, COLOR_GREEN, "Les marqueurs rouges seront placés le long du trajet.");
						SendClientMessage(playerid, COLOR_GREEN, "Votre service sera annoncé aux joueurs proches à l'arrêt suivant automatiquement.");
						//GangZoneHideForPlayer(playerid, buszoneeast);
						//GangZoneHideForPlayer(playerid, buszonewest);
						BusrouteWest[playerid][0] = 1;
						BusrouteWest[playerid][1] = playervehicleid;
						//BusrouteWest[playerid][2] = 0;
						/* for (new i=0; i<=MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i) && GetPlayerVehicleID(i) == playervehicleid) BusrouteWest[playerid][2] ++;
						}*/
						OnPlayerEnterCheckpoint(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un bus!");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà sur un trajet!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un conducteurd'autobus!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startest", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 13)
			{
				if (BusrouteWest[playerid][0] == 12 || BusrouteEast[playerid][0] == 12)
				{
					BusrouteWest[playerid][0] = 0;
					BusrouteEast[playerid][0] = 0;
				}
			    if(BusrouteWest[playerid][0] == 0 && BusrouteEast[playerid][0] == 0)
			    {
					new playervehicleid = GetPlayerVehicleID(playerid);
					if(IsABus(playervehicleid))
					{
						TogglePlayerControllable(playerid, 1);
						GameTextForPlayer(playerid, "~g~Bus Route Commencer", 5000, 3);
						SendClientMessage(playerid, COLOR_LIGHTRED, "---------East Los Santos Bus Route-----------");
						SendBusRoute(playerid, 0);
						SendClientMessage(playerid, COLOR_RED, " ");
						SendClientMessage(playerid, COLOR_GREEN, "Les marqueurs rouges seront placés le long du trajet.");
						SendClientMessage(playerid, COLOR_GREEN, "Votre service sera annoncé aux joueurs proches à l'arrêt suivant automatiquement.");
						BusrouteEast[playerid][0] = 1;
						BusrouteEast[playerid][1] = playervehicleid;
						OnPlayerEnterCheckpoint(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un bus!");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous êtes déjà sur un trajet!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un conducteur d'autobus!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deverouiller", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4000)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /deverouiller [ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocked] == 1)
			        {
			            PlayerInfo[giveplayerid][pLocked] = 0;
			            TogglePlayerControllable(giveplayerid, 1);
			            SendClientMessage(playerid, COLOR_YELLOW, "Compte Debloquer.");

			        }
			    }
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être admin niveau 3 pour utiliser cette commande.");
		}
		return 1;
	}
	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas encore connecté !");
	            return 1;
	        }
			if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
            {
				SendClientMessage(playerid, COLOR_GRAD2, "Le cannal ooc a été désactivé par un admin !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/o)oc <texte>");
				return 1;
			}
			format(string, sizeof(string), "[OOC][%d] %s: %s " ,playerid, sendername, result);
			OOCOff(COLOR_OOC,string);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2000 && (!noooc))
			{
				noooc = 1;
				BroadCast(COLOR_GRAD2, "  Le cannal de conversation OOC a été désactivé par un admin !");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 3 && (noooc))
			{
				noooc = 0;
				BroadCast(COLOR_GRAD2, "  Le cannal de conversation OOC a été activé par un admin !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisé a utiliser cette commande!");
			}
		}
		return 1;
	}

//-----------------------------FullAdmin----------------------------------------
	if(strcmp(cmd, "/aooc", true) == 0 || strcmp(cmd, "/ao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas encore connecté !");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 999)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Commande réservées aux admins");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: (/ao)oc (texte)");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] == 1000)
			{
					format(string, sizeof(string), "Moderateur : %s " , result);
		        	OOCOff(0x62B382AA,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 2000)
			{
					format(string, sizeof(string), "Moderateur : %s " , result);
		        	OOCOff(0x62B382AA,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 2250)
			{
					format(string, sizeof(string), "Moderateur : %s " , result);
		        	OOCOff(0x62B382AA,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 2500)
			{
					format(string, sizeof(string), "Moderateur : %s " , result);
		        	OOCOff(0x62B382AA,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 2750)
			{
					format(string, sizeof(string), "Moderateur : %s " , result);
		        	OOCOff(0x62B382AA,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 3000)
			{
					format(string, sizeof(string), "Adminisrateur : %s " , result);
		        	OOCOff(0xFF83000,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 3250)
			{
					format(string, sizeof(string), "Adminisrateur : %s " , result);
		        	OOCOff(0xFF83000,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 3500)
			{
					format(string, sizeof(string), "Adminisrateur : %s " , result);
		        	OOCOff(0xFF83000,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 3750)
			{
					format(string, sizeof(string), "Adminisrateur : %s " , result);
		        	OOCOff(0xFF83000,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 4000)
			{
					format(string, sizeof(string), "SuperAdmin : %s " , result);
		        	OOCOff(0xFF83000,string);
		        	printf("%s", string);
			}
			else if (PlayerInfo[playerid][pAdmin] == 9999)
			{
					format(string, sizeof(string), "AdminGeneral : %s " , result);
		        	OOCOff(0x33CCFFAA,string);
		        	printf("%s", string);
			}
		}
		return 1;
	}
//---------------------------------getin----------------------------------------
	if(strcmp(cmd, "/getincar", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] > 3)
	    {
		     tmp = strtok(cmdtext, idx);
             if(!strlen(tmp))
			 {
				 SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getin [Playerid]");
				 return 1;
        	 }
			 giveplayerid = ReturnUser(tmp);
		     if(giveplayerid != INVALID_PLAYER_ID)
	 	     {
            	 PutPlayerInVehicle(giveplayerid, GetPlayerVehicleID(playerid), 1);// on telep le joueur
        	 }
        	 else{ SendClientMessage(playerid, COLOR_RED, "Ce joueur n'es pas connecté !!!!!!"); }
	    }
	    else{ SendClientMessage(playerid, COLOR_RED, "tu n'es pas un administrateur"); }
    	return 1;
	}
//---------------------------------gotoincar----------------------------------------
	if(strcmp(cmd, "/gotoincar", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 3000)
	    {
		     tmp = strtok(cmdtext, idx);
             if(!strlen(tmp))
			 {
				 SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoincar [Playerid]");
				 return 1;
        	 }
			 giveplayerid = ReturnUser(tmp);
		     if(giveplayerid != INVALID_PLAYER_ID)
	 	     {
            	 PutPlayerInVehicle(playerid, GetPlayerVehicleID(giveplayerid), 1);// on telep l'admin
        	 }
        	 else{ SendClientMessage(playerid, COLOR_RED, "Ce joueur n'es pas connecté !!!!!!"); }
	    }
	    else{ SendClientMessage(playerid, COLOR_RED, "tu n'es pas un administrateur"); }
    	return 1;
	}
//---------------------------------AnnonceIG------------------------------------
	if(strcmp(cmd, "/an", true) == 0 || strcmp(cmd, "/anonceig", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas encore connecté !");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 2000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas admin avec ce rang");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/an) <texte>");
				return 1;
			}
  			format(string, sizeof(string), "LVV News : %s ", result);// LA HONTE !!!!!
			OOCOff(COLOR_LIGHTBLUE,string);
			printf("%s", string);

		}
		return 1;
	}

	if(strcmp(cmd, "/an2", true) == 0 || strcmp(cmd, "/anonceig2", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas encore connecté !");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 2000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas admin avec ce rang");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/an) <texte>");
				return 1;
			}
  			format(string, sizeof(string), " %s ", result);// c
			OOCOff(0xF6C100F6,string);
			printf("%s", string);

		}
		return 1;
	}

//---------------------------------Decopla--------------------------------------
	if (strcmp(cmd, "/decoid", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deconnecterpl [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4000)
			{
			    if(IsPlayerConnected(giveplayerid)&&giveplayerid != INVALID_PLAYER_ID)
			    {
					SaveAccount(playerid);
					gPlayerLogged[giveplayerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD1, "  Le joueur a été deconnecter.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisés à utiliser cet commande!");
			}
		}
		return 1;
	}

		if (strcmp(cmd, "/decoallid", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4000)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						SaveAccount(playerid);
						gPlayerLogged[i] = 0;
					}
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Tout les joueur ont été deconnecter");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisés à utiliser cet commande!");
			}
		}
		return 1;
	}

//---------------------------------CNN------------------------------------------

		if(strcmp(cmd, "/cnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] == 9999)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnn [cnn textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
					return 1;
				}
				format(string, sizeof(string), "~%s: %s",sendername,result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    ShowPlayerDialog(i,-1,-1,"","","","");
					    ShowPlayerDialog(i,8888,DIALOG_STYLE_MSGBOX,"Message",string,"Ok","Ok");
						//GameTextForPlayer(i, string, 5000, 6);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisés à utiliser cet commande!");
				return 1;
			}
		}
		return 1;
	}
//------------------------------ID----------------------------------------------
	if (strcmp(cmd, "/idjobs", true) == 0)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 1 Detective");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 2 Avocat");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 3 Prostitué");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 4 Dealer de drogue");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 5 Voleur de caisse");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 6 Journaliste");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 7 Mecanicien");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 8 Garde du corps");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 9 Dealer d'armes");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 10 Ambulancier");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 11 Boxeur");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 12 Taximan");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 13 Conducteur de bus");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 14 Camionneur");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 15 Livreur de pizza");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 16 Fermier");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " 17 Nettoyeur de rue");

   }
//-------------------------------Avertir----------------------------------------

	if(strcmp(cmd, "/avertir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "CMD: /avertir [id] [raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[82];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "CMD: /avertir [id] [raison]");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarns] += 1;
						if(PlayerInfo[giveplayerid][pWarns] >= 3)
						{
						    new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "ACMD: %s a été kické par %s, raison: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
							BanLog(string);
							format(string, sizeof(string), "ACMD: %s a été kické par %s (3 Avertissements), raison: %s", giveplayer, sendername, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
							PlayerInfo[giveplayerid][pAdmin] = PlayerInfo[giveplayerid][pLevel];
							PlayerInfo[giveplayerid][pLevel] = -999;
							Kick(giveplayerid);
							return 1;
						}
						format(string, sizeof(string), "Vous avez Averti %s, raison: %s", giveplayer, (result));
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "Vous êtes Averti par Administrateur, raison: %s", (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d  n'est pas actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//-------------------------------------------Cam--------------------------------
 	if (strcmp(cmd, "/cams", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cam [1/2/3/4]");
				return 1;
			}
			Unspec[playerid][sCam] = strval(tmp);
			format(string, sizeof(string), "Change de camera %d",Unspec[playerid][sCam]);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/adminliste", true) == 0)
	{
       if(IsPlayerConnected(playerid))
       {
           if (PlayerInfo[playerid][pAdmin] >= 499)
	       {
	           SendClientMessage(playerid, COLOR_LIGHTBLUE, "Membres du staff en ligne :");
		       for(new i = 0; i < MAX_PLAYERS; i++)
		       {
			      if(IsPlayerConnected(i))
			      {
			         if(PlayerInfo[i][pAdmin] >= 1 )
			         {
					     GetPlayerName(i, sendername, sizeof(sendername));
					     format(string, 256, "%s | Level: %d", sendername, PlayerInfo[i][pAdmin]);
					     SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				     }
			      }
		       }
		       return 1;
		   }
		   else
	       {
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
	       }
	   }
	}

//------------------------------------------------------------------------------

    if(strcmp(cmd, "/autoriserswat", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pRank] >= 4)
		{
			authorizeswat = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: Officier %s a autorisé le  S.W.A.T. **", sendername);
			SendRadioMessage(1, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/interdireswat", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pRank] >= 4)
		{
			authorizeswat = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: Officier %s a interdit le S.W.A.T.",sendername);
			SendRadioMessage(1, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/swat", true) == 0)
	{
        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			if(swat[playerid] == 0)
            {
				if(authorizeswat == 1)
				{
					if (PlayerToPoint(3, playerid,210.5792,144.4530,1003.0234) || PlayerToPoint(3,playerid,211.1120,151.6898,1003.0234) || PlayerInfo[playerid][pLocal] != 255)
					{

    	 				SafeResetPlayerWeapons(playerid);
						swat[playerid] = 1;
						SetPlayerSkin(playerid, 285);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 34, 150);
						SafeGivePlayerWeapon(playerid, 29, 730);
						SafeGivePlayerWeapon(playerid, 27, 250);

						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), "* %s prend son uniforme d'intervention S.W.A.T.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else { SendClientMessage(playerid, COLOR_GREY, "Le S.W.A.T. es interdit!"); }
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 1) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 267); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 266); }

				swat[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), "* %s retire son uniforme d'intervention S.W.A.T.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid))
 		{
	       	SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas policier!");
		}
		return 1;
	}
/*	if(strcmp(cmd,"/demanderaide",true)==0 || strcmp(cmd,"/da",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s demande à toute les unitée un renfort d'urgence et immediat (marquer en rouge).", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1||PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
								SendClientMessage(i, TEAM_BLUE_COLOR, string);
							}
						}
					}
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Faite /ada pour enlever votre demande de renforts.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous demandez deja des renforts!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'etes pas policier!");
			}
		}
		return 1;
	} */
	
// /bkf pour les gangs/mafia/FBI/LSPD
    if(strcmp(cmd,"/bkf",true)==0 || strcmp(cmd,"/bkf",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerTied[playerid] > 0)
  			{
    			SendClientMessage(playerid, COLOR_GREY, "Vous etes ligoter.");
      			return 1;
    		}
	    	if(PlayerCuffed[playerid] == 2)
	    	{
     			SendClientMessage(playerid, COLOR_GREY, "Vous etes menotté");
       			return 1;
	    	}
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "A TOUTE LA POLICE: %s viens d'activé sa balise, il a sûrement besoin d'aide !", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string)
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
			if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "A TOUTE LA FBI: %s viens d'activé sa balise, il a sûrement besoin d'aide !", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
			else if(PlayerInfo[playerid][pMember] == 15||PlayerInfo[playerid][pLeader] == 15)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
  	        else if(PlayerInfo[playerid][pMember] == 5||PlayerInfo[playerid][pLeader] == 5)
		    {
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
            else if(PlayerInfo[playerid][pMember] == 6||PlayerInfo[playerid][pLeader] == 6)
		    {
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
			else if(PlayerInfo[playerid][pMember] == 7||PlayerInfo[playerid][pLeader] == 7)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc ou /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
			else if(PlayerInfo[playerid][pMember] == 10||PlayerInfo[playerid][pLeader] == 10)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
            else if(PlayerInfo[playerid][pMember] == 12||PlayerInfo[playerid][pLeader] == 12)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
            else if(PlayerInfo[playerid][pMember] == 14||PlayerInfo[playerid][pLeader] == 14)
 			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle toute la faction, allez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
			else if(PlayerInfo[playerid][pMember] == 15||PlayerInfo[playerid][pLeader] == 15)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle la famille, venez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
			else if(PlayerInfo[playerid][pMember] == 16||PlayerInfo[playerid][pLeader] == 16)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "%s viens d'activé sa balise, il appelle la famiglia, venez l'aider!", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0x9ACD32AA);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_RED, "Tapez /bkc pour effacer votre backup.");
					SetTimerEx("BackupClear", 300000, false, "ii", playerid, 1);
                    format(string, sizeof(string), "** %s a activé sa balise ! Biip.. Biip..", sendername);
                    ProxDetector(35.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une demande de bkf activée!");
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd,"/backupclear",true)==0 || strcmp(cmd,"/bkc",true)==0)
	{
		BackupClear(playerid, 0);
		return 1;
	}

	if(strcmp(cmdtext, "/barrage", true)==0 || strcmp(cmdtext, "/ba", true)==0)
	{
	    if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Vous devez être au moins rang 5!");
			return 1;
		}
		if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 ||PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 )
		{
			if (PlayerInfo[playerid][pRoadblock] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can only deploy 1 roadblock at a time, type /rrb to remove your existing one.");
			if (roadblocktimer != 0) return SendClientMessage(playerid, COLOR_GREY, "Please wait before trying to spawn another roadblock!");
			new Float:X, Float:Y, Float:Z, Float:A;
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			PlayerInfo[playerid][pRoadblock] = CreateStreamObject(981, X, Y, Z, 0.0, 0.0, A+180);
			SetPlayerPos(playerid, X, Y, Z+4);
			GameTextForPlayer(playerid, "~w~Barrage Routier ~r~Place", 5000, 5);
			SendClientMessage(playerid, COLOR_GREEN, "Le barrage routier a été placé avec succès. Tapez /stopbarrage pour le suprimer.");
			roadblocktimer = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "QG: Un barrage routier a été placé par %s, il a été marqué sur le radar par un checkpoint.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
					{
						SetPlayerCheckpoint(playerid, X, Y, Z-10, 1.0);
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
						if (PlayerInfo[i][pRank] >= 5 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 ||PlayerInfo[i][pRank] >= 5 && PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
							SendClientMessage(i, COLOR_YELLOW, "Vous pouvez enlever tous les barrages en tapez /stopba");
						}
					}
				}
			}
			SetTimer("ResetRoadblockTimer", 60000, false);
		}
		return 1;
	}
	if(strcmp(cmdtext, "/stopbarrage", true)==0 || strcmp(cmdtext, "/stopba", true)==0)
	{
		if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Vous devez être au moins rang 5!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Aucun barrage routier en place!");
			return 1;
		}
		if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 ||PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 )
		{
			RemoveRoadblock(playerid);
			SendClientMessage(playerid, COLOR_GREEN, "Le barrage routier a été levé avec succès.");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/stopbarrageall", true)==0 || strcmp(cmdtext, "/sball", true)==0)
	{
		if (PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pRoadblock] != 0)
				{
					RemoveRoadblock(i);
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "QG: Tous les barrages routiers de la zone ont été levé sous ordre de %s.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2)
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You have to be rank 5+ or a police leader to remove all roadblocks!");
		}
		return 1;
	}
	if(strcmp(cmd, "/uriner", true) == 0) {
		 SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
         return 1;
    }
    if(strcmp(cmd, "/payer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /payer [idDuJoueur/PartieDuNom] [Montant]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /payer [idDuJoueur/PartieDuNom] [Montant]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être au moin au niveau 3 pour donner plus que 1000");
				return 1;
			}
			if(moneys < 1 || moneys > 99999)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Vous devez donner au moin plus de 1 et moin que 99999.");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "la commande est non permis dans cette endrois");
						return 1;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas payer pour vous !");
					        return 1;
					    }
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney =  GetPlayerMoney(playerid);
						if (moneys > 0 && playermoney >= moneys)
						{
						    //ConsumingMoney[giveplayerid] = 1;
							SafeGivePlayerMoney(playerid, (0 - moneys));
							SafeGivePlayerMoney(giveplayerid, moneys);
							format(string, sizeof(string), "   Vous avez envoyé %s(player: %d), $%d.", giveplayer,giveplayerid, moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							ApplyAnimation(playerid, "DEALER", "shop_pay",4.0,0,0,0,0,0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Vous recevez$%d de la part de %s(player: %d).", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "[Payer]%s A payer $%d a %s", sendername, moneys, giveplayer);
							PayLog(string);
							if(moneys >= 1000)
							{
								ABroadCast(COLOR_RED,string);
							}
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							/*format(string, sizeof(string), "* %s takes out some cash, and hands it to %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);*/
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   La transaction n'a pas marcher.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Votre trop loin.");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "   %d N'est pas un joueurs actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	
	// COmmande FBi
	
		if(strcmp(cmd, "/tactiqueon", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
			authorizetactical = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** QG: Le Directeur %s à autorisé l'uniforme tactique **", sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}


	if(strcmp(cmd, "/tactiqueoff", true) == 0)
    {
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
        	authorizetactical = 0;
	 		GetPlayerName(playerid, sendername, sizeof(sendername));
        	format(string, sizeof(string), "** QG: Le Directeur %s n'autorise plus l'uniforme tactique",sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/tactique", true) == 0)
	{
        if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader] == 2)
		{
			if(tactical[playerid] == 0)
            {
				if(authorizetactical == 1)
				{
					if (PlayerToPoint(3, playerid,252.4938,73.4559,1003.6406) || PlayerToPoint(3,playerid,258.6202,79.8815,1003.6406) || PlayerInfo[playerid][pLocal] != 255)
					{

					    SafeResetPlayerWeapons(playerid);
						tactical[playerid] = 1;
						SetPlayerSkin(playerid, 287);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 23, 150);
						SafeGivePlayerWeapon(playerid, 27, 250);

						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), "* %s prend l'uniforme de tactique dans son casier et l'enfile.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GREY, "L'équipement tactique n'est pas autorisé!");
				}
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerSkin(playerid, 286); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 163); }

				tactical[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), "* %s enleve son uniforme de tactique et le range dans son casier.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid) || PlayerInfo[playerid][pLeader] > 2 || PlayerInfo[playerid][pLeader] < 2)
		{
   		    SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas du FBI!");
		}
		return 1;
	}
/*	if(strcmp(cmd, "/autorisertactical", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
			authorizetactical = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: Directeur %s a autorisé l'uniforme de Réponse Tactique **", sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/interdiretactical", true) == 0)
    {
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
        	authorizetactical = 0;
	 		GetPlayerName(playerid, sendername, sizeof(sendername));
        	format(string, sizeof(string), "** HQ: Directeur %s a désactiver l'uniforme de Réponse Tactique",sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/tactical", true) == 0)
	{
        if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader] == 2)
		{
			if(tactical[playerid] == 0)
            {
				if(authorizetactical == 1)
				{
					if (PlayerToPoint(3, playerid,252.4938,73.4559,1003.6406) || PlayerToPoint(3,playerid,258.6202,79.8815,1003.6406) || PlayerInfo[playerid][pLocal] != 255)
					{

					    SafeResetPlayerWeapons(playerid);
						tactical[playerid] = 1;
						SetPlayerSkin(playerid, 287);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 23, 150);
						SafeGivePlayerWeapon(playerid, 27, 250);

						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), "* %s met son uniforme de Réponse Tactique.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GREY, "L'uniforme de Réponse Tactique a été Désactiver par le directeur!");
				}
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerSkin(playerid, 286); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 163); }

				tactical[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), "* %s remet son uniforme de Réponse Tactique dans le casier.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid) || PlayerInfo[playerid][pLeader] > 2 || PlayerInfo[playerid][pLeader] < 2)
		{
   		    SendClientMessage(playerid, COLOR_GREY, "Vous n'ête pas un agent");
		}
		return 1;
	} */
//------------------------------[Map-Icons]----------------------------------------------------------------------
    /*SetPlayerMapIcon(playerid, 1, 1551.2158,-1676.2555,15.7553, 30, COLOR_YELLOW);  // LSPD Spawn
	SetPlayerMapIcon(playerid, 2, 1420.4089,-1624.2172,13.1089, 45, COLOR_YELLOW);  // Zip
	SetPlayerMapIcon(playerid, 3, 1409.7046,-1647.9684,12.9469, 49, COLOR_YELLOW);  // Disco Jizzy
	SetPlayerMapIcon(playerid, 4, 1481.4696,-1765.2483,18.3665, 2, COLOR_YELLOW);  // Mairie
	SetPlayerMapIcon(playerid, 5, 1351.9473,-1758.2928,13.0748, 52, COLOR_YELLOW);  // Auchan
	SetPlayerMapIcon(playerid, 6, 1310.4292,-1367.4677,13.0889, 7, COLOR_YELLOW);  // Anpe*/
	SetPlayerMapIcon(playerid, 7, 1081.0946,-1697.3175,13.6453, 55, COLOR_YELLOW);  // Anto ecole
	SetPlayerMapIcon(playerid, 8, 1175.9119,-1323.1113,13.8264, 40, COLOR_YELLOW);  // Hopital
	SetPlayerMapIcon(playerid, 9, 2229.6391,-1721.5467,13.2855, 54, COLOR_YELLOW);  // Sport
	/*SetPlayerMapIcon(playerid, 10, 629.8506,-1858.5051,5.6675, 2, COLOR_YELLOW);  // Mairie
	SetPlayerMapIcon(playerid, 11, 594.7371,-1873.8301,4.3883, 10, COLOR_YELLOW);  // Manger
	SetPlayerMapIcon(playerid, 12, 577.7225,-1871.9113,4.2831, 49, COLOR_YELLOW);  // The Sun
	SetPlayerMapIcon(playerid, 13, 1154.0387,-2036.7568,68.5786, 57, COLOR_YELLOW);  // Gouvernement
    SetPlayerMapIcon(playerid, 14, 1769.2792,-1665.5083,13.9769, 30, COLOR_YELLOW);  // Flic MSP
	SetPlayerMapIcon(playerid, 15, 1720.0754,-1740.7618,13.1173, 3, COLOR_YELLOW);  // Eglise
	SetPlayerMapIcon(playerid, 16, 1836.3552,-1682.5208,12.9289, 49, COLOR_YELLOW);  // Xava
    SetPlayerMapIcon(playerid, 17, 1939.3193,-1772.0667,12.9475, 53, COLOR_YELLOW);  // Pomp*/
	SetPlayerMapIcon(playerid, 18, 2104.7722,-1806.4736,13.1332, 29, COLOR_YELLOW);  // Pizza
	/*SetPlayerMapIcon(playerid, 19, 2424.9314,-1660.9186,12.9481, 61, COLOR_YELLOW);  // Crip'z*/
	/*SetPlayerMapIcon(playerid, 20, 2000.3453,-1118.6580,26.7813, 59, COLOR_YELLOW);  // ballas*/
	SetPlayerMapIcon(playerid, 21, 1465.0830,-1010.6750,25.8687, 36, COLOR_YELLOW);  // banque
	/*SetPlayerMapIcon(playerid, 22, 2077.1772,-2006.2416,13.1145, 6, COLOR_YELLOW);  // Usine arme
	SetPlayerMapIcon(playerid, 23, 755.4629,-1672.0463,3.5356, 60, COLOR_YELLOW);  // Usine amre*/




//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/stats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				ShowStats(playerid,playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas logué!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/regarder", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1000)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /regarder [ID]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Personne non connectée");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas admin");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/numero", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /numero [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pHideNumber] == 1)
				        {
							GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							format(string, 256, "Nom: %s, Tél: HIDDEN",sendername);
							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
						else
						{
						    GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							format(string, 256, "Nom: %s, Tél: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'avez pas le PhoneBook !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /id [playerid/PartOfName]");
				return 1;
			}
			new target;
			target = ReturnUser(tmp);
			new sstring[256];
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(sstring, sizeof(sstring), "ID: (%d) %s",target,giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, sstring);
				}
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/niveausuperieur", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				if(PlayerInfo[playerid][pLevel] >= 0)
				{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					new expamount = nxtlevel*levelexp;
					new infostring[256];
					if (PlayerInfo[playerid][pExp] < expamount)
					{
						format(infostring, 256, "  Vous avez besoin de %d points de respect, vous en avez acctuelement: %d !",expamount,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "~g~NIVEAU SUPERIEUR~n~~w~Vous etes desormait au niveau %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(playerid);
						PlayerInfo[playerid][pLevel]++;
						if(PlayerInfo[playerid][pDonateRank] > 0)
						{
						    PlayerInfo[playerid][pExp] -= expamount;
						    new total = PlayerInfo[playerid][pExp];
						    if(total > 0)
						    {
						        PlayerInfo[playerid][pExp] = total;
						    }
						    else
						    {
						        PlayerInfo[playerid][pExp] = 0;
						    }
						}
						else
						{
							PlayerInfo[playerid][pExp] = 0;
						}
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
						GameTextForPlayer(playerid, string, 5000, 1);
						format(infostring, 256, "   Vous avez augmenté de niveau %d Type /ameliorer", nxtlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						format(infostring, 256, "   You gave %d unspent Upgrade Points",PlayerInfo[playerid][gPupgrade]);
						SendClientMessage(playerid, COLOR_GRAD2, infostring);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not Logged in !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/levelzero", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez être connecter !");
				return 1;
			}
			if ( GetPlayerMoney(playerid) < 100000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Le prix est $50000 !");
				return 1;
			}
			if (PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez être niveaux 2 pour faire sa !");
				return 1;
			}
			PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pAlcoholPerk] = 0;
			PlayerInfo[playerid][pDrugPerk] = 0;
			PlayerInfo[playerid][pMiserPerk] = 0;
			PlayerInfo[playerid][pPainPerk] = 0;
			PlayerInfo[playerid][pTraderPerk] = 0;
			SafeGivePlayerMoney(playerid,-50000);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			format(string, 256, "   Vous avez %d de point non utilisé !",PlayerInfo[playerid][gPupgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/acheterarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent sur vous!");
			    return 1;
			}
			new gun;
			new gunid[16];
			new gunstring1[256];
			new gunstring2[256];
			new gunstring3[256];
			new gunstring4[256];
			new gunstring5[256];
			new infostring[256];
			new guncharge;
			new ammocharge;
			new location = PlayerInfo[playerid][pLocal];
			if(location == 99 || location == 100 || location == 102)
			{
			    /*if(BizzInfo[location-99][bProducts] <= 0)
			    {
			        GameTextForPlayer(playerid, "~r~Stock Epuiser", 5000, 1);
					return 1;
			    }*/
				new mod = 100;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "USAGE: /acheterarme [nomarme] [montantmunition]");
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					SendClientMessage(playerid, COLOR_WHITE,"*** Arme & Munition ***");
					SendClientMessage(playerid, COLOR_GRAD2,string);
					format(gunstring1, 256, "Armes: parachute ($%d) clubgolf ($%d) baguette ($%d) battebaseball ($%d) pelle ($%d) cannebillard ($%d)",
					GunPrice[0][0]/100*mod,GunPrice[1][0]/100*mod,GunPrice[2][0]/100*mod,GunPrice[3][0]/100*mod,GunPrice[4][0]/100*mod,GunPrice[5][0]/100*mod,GunPrice[6][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
					format(gunstring2, 256, "Armes: sextoymauve ($%d) Sextoyblanc ($%d) longsextoyblanc ($%d) sextoyblanc2 ($%d) fleurs ($%d) cane",
					GunPrice[7][0]/100*mod,GunPrice[8][0]/100*mod,GunPrice[9][0]/100*mod,GunPrice[10][0]/100*mod,GunPrice[11][0]/100*mod,GunPrice[12][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
					format(gunstring3, 256, "Armes: pistolet ($%d) deagle ($%d) mp5 ($%d)",
					GunPrice[13][0]/100*mod,GunPrice[14][0]/100*mod,GunPrice[15][0]/100*mod,GunPrice[16][0]/100*mod,GunPrice[17][0]/100*mod,GunPrice[18][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
					format(gunstring4, 256, "Armes: shotgun ($%d) ak47 ($%d) m4 ($%d) fusilchasse ($%d)",
					GunPrice[19][0]/100*mod,GunPrice[20][0]/100*mod,GunPrice[21][0]/100*mod,GunPrice[22][0]/100*mod,GunPrice[23][0]/100*mod,GunPrice[24][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
					format(gunstring5, 256, "Armes: munitionpistolet ($%d) munitionpompe ($%d) munitionsmg ($%d) munitionasaut ($%d) munitionfusil ($%d)",
					GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					return 1;
				}
				strmid(gunid, tmp, 0, strlen(cmdtext), 255);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "USAGE: /acheterarme [nomarme] [montantmunition]");
					return 1;
				}
				new ammo = strval(tmp);
				if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "Munition pas en desous de 1 et au desus de 999!"); return 1; }
				if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
				{
					gun = 46;
					guncharge = GunPrice[0][0]/100*mod;
					ammocharge = 0;
				}
				else if (strcmp(gunid, "clubgolf", true, strlen(gunid)) == 0)
				{
					gun = 2; guncharge = GunPrice[1][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 2; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "baguette", true, strlen(gunid)) == 0)
				{
					gun = 3; guncharge = GunPrice[2][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 3; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "battebaseball", true, strlen(gunid)) == 0)
				{
					gun = 5; guncharge = GunPrice[4][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 5; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "pelle", true, strlen(gunid)) == 0)
				{
					gun = 6; guncharge = GunPrice[5][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 6; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "cannebillard", true, strlen(gunid)) == 0)
				{
					gun = 7; guncharge = GunPrice[6][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 7; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sextoymauve", true, strlen(gunid)) == 0)
				{
					gun = 10; guncharge = GunPrice[7][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 10; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sextoyblanc", true, strlen(gunid)) == 0)
				{
					gun = 11; guncharge = GunPrice[8][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 11; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "longsextoyblanc", true, strlen(gunid)) == 0)
				{
					gun = 12; guncharge = GunPrice[9][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 12; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sextoyblanc2", true, strlen(gunid)) == 0)
				{
					gun = 13; guncharge = GunPrice[10][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 13; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "fleurs", true, strlen(gunid)) == 0)
				{
					gun = 14; guncharge = GunPrice[11][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 14; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
				{
					gun = 15; guncharge = GunPrice[12][0]/100*mod; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 15; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "pistolet", true, strlen(gunid)) == 0)
				{
					gun = 23; guncharge = GunPrice[13][0]/100*mod; ammocharge = GunPrice[25][0]*ammo;
					//PlayerInfo[playerid][pGun2] = 23; PlayerInfo[playerid][pAmmo2] = ammo;
				}
				else if (strcmp(gunid, "deagle", true, strlen(gunid)) == 0)
				{
					gun = 24; guncharge = GunPrice[15][0]/100*mod; ammocharge = GunPrice[25][0]*ammo;
					//PlayerInfo[playerid][pGun2] = 24; PlayerInfo[playerid][pAmmo2] = ammo;
				}
				else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
				{
					gun = 29; guncharge = GunPrice[18][0]/100*mod; ammocharge = GunPrice[27][0]*ammo;
					//PlayerInfo[playerid][pGun3] = 29; PlayerInfo[playerid][pAmmo3] = ammo;
				}
				else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
				{
					gun = 25; guncharge = GunPrice[19][0]/100*mod; ammocharge = GunPrice[26][0]*ammo;
					//PlayerInfo[playerid][pGun3] = 25; PlayerInfo[playerid][pAmmo3] = ammo;
				}
				else if (strcmp(gunid, "ak47", true, strlen(gunid)) == 0)
				{
					gun = 30; guncharge = GunPrice[22][0]/100*mod; ammocharge = GunPrice[28][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 30; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
				{
					gun = 31; guncharge = GunPrice[23][0]/100*mod; ammocharge = GunPrice[28][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 31; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else if (strcmp(gunid, "fusilchasse", true, strlen(gunid)) == 0)
				{
					gun = 33; guncharge = GunPrice[24][0]/100*mod; ammocharge = GunPrice[29][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 33; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "Marchand: Je n'ai jamais entendu parler de cette arme.");
					return 1;
				}
				if((guncharge+ammocharge) > GetPlayerMoney(playerid))
				{
					format(infostring, 256, "Vous n'avez pas $%d !",guncharge+ammocharge);
					SendClientMessage(playerid, COLOR_GRAD3, infostring);
					return 1;
				}
				if(GetPlayerMoney(playerid) < (guncharge+ammocharge))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas achetez ça!");
				    return 1;
				}
				new payout = guncharge + ammocharge;
				format(infostring, 256, "Vous avez acheter un %s avec %d munitions pour $%d",gunid,ammo,payout);
				SendClientMessage(playerid, COLOR_GRAD3, infostring);
				if(location == 102 && IsACop(playerid)) { }
				else { SafeGivePlayerMoney(playerid, - payout); }
				BizzInfo[location-99][bTill] += payout;
				ExtortionBiz(location-99, payout);
				BizzInfo[location-99][bProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerWeapon(playerid, gun, ammo);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s a acheté pour $%d au magasin %d", sendername, payout, location-99);
				printf("%s", string);
				PayLog(string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE,"Vous n'êtes pas dans un magasin.");
				return 1;
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/ameliorer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			new infostring[256];
			new upgradepoints = PlayerInfo[playerid][gPupgrade] - 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "USAGE: /ameliorer [Nom amelelioration] (Vous avez %d Points d'amelioration)",upgradepoints);
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** Amelioration ***");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				if(PlayerInfo[playerid][pLevel] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Niveau 2 Avantages : Alcool, Drogues");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Niveau 3 Avantages : Alcool, Drogues, Avare");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Niveau 4 Avantages : Alcool, Drogues, Avare, Commerçant");
				}
				else if(PlayerInfo[playerid][pLevel] >= 5)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Niveau 5 Avantages : Alcool, Drogues, Avare, Commerçant, analgesiques");
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Santé Supplémentaire : santé");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] > 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "Santé", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5.0;
						format(infostring, 256, "Nouvelle amélioration : Vous spawnerez avec %.2f Vie (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Vous avez le maximum de vie");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "Alcool", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 3)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(infostring, 256, "Nouvelle amélioration Audacieuse: Votre Alcoolique Audacieux est maintenant de Niveau %d.",PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "  Votre Alcoolique Audacieux est au max !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "drogues", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						format(infostring, 256, "Nouvelle amélioration Audacieuse: Votre Drogue Audacieux est maintenant au Niveau %d.",PlayerInfo[playerid][pDrugPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Votre Drogué Audacieux est au max !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "Avare", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pMiserPerk] < 3)
					{
						PlayerInfo[playerid][pMiserPerk] += 1;
						format(infostring, 256, "Nouvelle amélioration Audacieuse: Votre Avare Audacieux est maintenant du Niveau %d.",PlayerInfo[playerid][pMiserPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Votre Avare Audacieux est au max !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "Commerçants", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pTraderPerk] < 3)
					{
						PlayerInfo[playerid][pTraderPerk] += 1;
						format(infostring, 256, "Nouvelle amélioration Audacieuse: Votre Commerçant Audacieux est maintenant au niveau %d.",PlayerInfo[playerid][pTraderPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Votre Commerçant Audacieux est au max !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "analgesiques", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pPainPerk] < 3)
					{
						PlayerInfo[playerid][pPainPerk] += 1;
						format(infostring, 256, "Nouvelle amélioration Audacieuse: Votre resistance a la Douleur Audacieux sont maintenant le Niveau %d.",PlayerInfo[playerid][pPainPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Votre resistance a la Douleur Audacieux est au max !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Amélioration inconnue");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "  Vous avez 0 point d'amélioration");
				return 1;
			}
			SendClientMessage(playerid, COLOR_GRAD6, infostring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return 1;
	}

    if(strcmp(cmd,"/competence",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Information Compétence __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /competence [Nombre]");
		  		SendClientMessage(playerid, COLOR_GREY, "| 1: Avocat         		5: Boxeur");
		  		SendClientMessage(playerid, COLOR_GREY, "| 2: Prostitué           	6:Voleur de voiture");
		  		SendClientMessage(playerid, COLOR_GREY, "| 3: Dealer de drogue");
		  		SendClientMessage(playerid, COLOR_GREY, "| 4: Mecanicien");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
			else if(strcmp(x_nr,"1",true) == 0)//Lawyer
			{
			    new level = PlayerInfo[playerid][pLawSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau D'avocat = 1."); format(string, sizeof(string), "You need to free %d more people to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau D'avocat = 2."); format(string, sizeof(string), "You need to free %d more people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau D'avocat = 3."); format(string, sizeof(string), "You need to free %d more people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau D'avocat = 4."); format(string, sizeof(string), "You need to free %d more people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau D'avocat = 5."); }
			}
			else if(strcmp(x_nr,"2",true) == 0)//Whore
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Prostitué = 1."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Prostitué = 2."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Prostitué = 3."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Prostitué = 4."); format(string, sizeof(string), "You need to have sex %d times more to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Prostitué = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Drugs Dealer
			{
			    new level = PlayerInfo[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Leader de Drogue = 1."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Leader de Drogue = 2."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Leader de Drogue = 3."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Leader de Drogue = 4."); format(string, sizeof(string), "You need to sell drugs %d times more to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Leader de Drogue = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//Car Mechanic
			{
			    new level = PlayerInfo[playerid][pMechSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Mecanicien = 1."); format(string, sizeof(string), "You need to fix/fill a car for %d times more to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Mecanicien = 2."); format(string, sizeof(string), "You need to fix/fill a car for %d times people to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Mecanicien = 3."); format(string, sizeof(string), "You need to fix/fill a car for %d times people to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Mecanicien = 4."); format(string, sizeof(string), "You need to fix/fill a car for %d times people to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Mecanicien = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//Boxer
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Boxeur = 1."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Boxeur = 2."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Boxeur = 3."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Boxeur = 4."); format(string, sizeof(string), "You need to Win %d more Matches to Level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de Boxeur = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pJackSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de voleur de voiture = 1."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de voleur de voiture = 2."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 250 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de voleur de voiture = 3."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 500 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de voleur de voiture = 4."); format(string, sizeof(string), "You need to Fish %d more Fishes to Level up.", 1000 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Votre Niveau de voleur de voiture = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Nombre de la Compétence Invalide!");
			    return 1;
			}
	    }
	    return 1;
	}
	if (strcmp(cmd, "/login", true) ==0 || strcmp(cmd, "/l", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new tmppass[64];
			if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "SERVEUR: Vous êtes déjà loggué.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "USAGE: (/l)ogin [Mot de passe]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerLogin(playerid,tmppass);
		}
		return 1;
	}
	if (strcmp(cmd, "/register", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "SERVEUR: Vous ête déjà loggué.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "users/%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Se noms est déjà utilisers re connecter vous avec un autre Mot de passe.");
				fclose(hFile);
				return 1;
			}
	        new tmppass[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /register [Mot de passe]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerRegister(playerid,tmppass);
		}
		return 1;
	}
	if(strcmp(cmd, "/pub", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous devez être au niveau 2 pour utiliser cette fonction !");
	            return 1;
	        }
	        if(!PlayerToPoint(3.0,playerid,1760.7969,-1276.6528,12.6683))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas au centre de pub !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/pub)[texte]");
				return 1;
			}
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Merci de refaire cette commande plus tard dans %d secondes !",  (addtimer/400));
				SendClientMessage(playerid, COLOR_RED, string);
				return 1;

			}
			new payout = 50;
			if( GetPlayerMoney(playerid) < payout)
	        {
	            format(string, sizeof(string), "* Vous avez utiliser %d un perssonage qui côute $%d, vous n'avez pas assez.", offset, payout);
	            SendClientMessage(playerid, COLOR_WHITE, string);
	            return 1;
	        }
			SafeGivePlayerMoney(playerid, - payout);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SBizzInfo[7][sbTill] += payout;
			ExtortionSBiz(7, payout);
			format(string, sizeof(string), "[PUB] %s", result);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "Pub de: %s Numero: %d", sendername, PlayerInfo[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "~r~Payer $%d~n~~w~", payout);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}
		return 1;
	}
	if(strcmp(cmd, "/npub", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous devez etre connecté !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][Frequence] != 1338)
	        {
	            SendClientMessage(playerid, COLOR_RED, "  Vous devez être sur la frequence 1338 pour passer une annonce illegal!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][Radio] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas de radio!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/npub)[texte]");
				return 1;
			}
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Merci de refaire cette commande plus tard dans %d secondes !",  (addtimer/200));
				SendClientMessage(playerid, COLOR_RED, string);
				return 1;

			}
			new payout = 50;
			if( GetPlayerMoney(playerid) < payout)
	        {
	            format(string, sizeof(string), "* Vous avez utiliser %d un perssonage qui côute $%d, vous n'avez pas assez.", offset, payout);
	            SendClientMessage(playerid, COLOR_WHITE, string);
	            return 1;
	        }
			SafeGivePlayerMoney(playerid, - payout);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SBizzInfo[7][sbTill] += payout;
			ExtortionSBiz(7, payout);
			format(string, sizeof(string), "%s", result);
			SendRadioFrequenceMessage(COLOR_RED,string);
			format(string, sizeof(string), "Pub de: %s Numero: %d", sendername, PlayerInfo[playerid][pPnumber]);
			SendRadioFrequenceMessage(COLOR_RED,string);
			format(string, sizeof(string), "~r~Payer $%d~n~~w~", payout);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}
		return 1;
	}
	if(strcmp(cmd, "/gouvernement", true) == 0 || strcmp(cmd, "/gouv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
 			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 7)
			{
				if(PlayerInfo[playerid][pRank] < 4)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous devez être du Grade 4 pour être capables de l'utiliser !");
				    return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/gouv)ernment [text]");
					return 1;
				}
				SendClientMessageToAll(COLOR_BLUE, "|___________ Annonce Gouvernement ___________|");
				if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
				{
					if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "Sheriff de la LSPD %s: %s", sendername, result); }
				    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "Assistant Sheriff  %s: %s", sendername, result); }
					SendClientMessageToAll(COLOR_BLUE, string);
				}
				else if(PlayerInfo[playerid][pLeader] == 2)
				{
					format(string, sizeof(string), "Directeur de la MSP %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_BLUE, string);
				}
				else if(PlayerInfo[playerid][pLeader] == 3)
				{
					format(string, sizeof(string), "Générale %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pLeader] == 7)
				{
					format(string, sizeof(string), "Le President %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_YELLOW, string);
				}
			}
		}
		else { SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas un policier."); }
		return 1;
	}
	if(strcmp(cmd, "/petiteannonce", true) == 0 || strcmp(cmd, "/petiteannonce", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
 			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 7 )
			{
				if(PlayerInfo[playerid][pRank] < 6)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous devez être du Grade 6 pour être capables de l'utiliser !");
				    return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/gouv)ernment [text]");
					return 1;
				}
				SendClientMessageToAll(COLOR_BLUE, "|___________ Petite Annonce ___________|");
				if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
				{
					if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "Sheriff %s: %s", sendername, result); }
				    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "Sheriff Adjoin %s: %s", sendername, result); }
					SendClientMessageToAll(COLOR_BLUE, string);
				}
                else if(PlayerInfo[playerid][pJob] != 1)
				{
					format(string, sizeof(string), "Le detective %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 2)
				{
					format(string, sizeof(string), "L'avocat %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 3)
				{
					format(string, sizeof(string), "La coquinne de service %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 6)
				{
					format(string, sizeof(string), "Le Journaliste %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 7)
				{
					format(string, sizeof(string), "Le Mecanicien %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 8)
				{
					format(string, sizeof(string), "Le Garde du corps %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 10)
				{
					format(string, sizeof(string), "L'ambulancier %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 11)
				{
					format(string, sizeof(string), "Le Boxeur %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 12)
				{
					format(string, sizeof(string), "Le Taximan %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 13)
				{
					format(string, sizeof(string), "Le Conducteur de Bus %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 15)
				{
					format(string, sizeof(string), "Le livreur de Pizza %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pJob] != 17)
				{
					format(string, sizeof(string), "Le Nettoyeur de ville %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
			}
		}
		else { SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas un policier."); }
		return 1;
	}
		if(strcmp(cmd, "/gouvv", true) == 0 || strcmp(cmd, "/gouvv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
 			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 7)
			{
				if(PlayerInfo[playerid][pRank] < 6)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous devez être du Grade 6 pour être capables de l'utiliser !");
				    return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[82];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/gouv)ernment [text]");
					return 1;
				}
				SendClientMessageToAll(COLOR_BLUE, "|___________ Annonce Gouvernement ___________|");
				if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
				{
					if(PlayerInfo[playerid][pRank] == 19) { format(string, sizeof(string), "Sheriff %s: %s", sendername, result); }
				    else if(PlayerInfo[playerid][pRank] == 19) { format(string, sizeof(string), "Sheriff Adjoin %s: %s", sendername, result); }
					SendClientMessageToAll(COLOR_BLUE, string);
				}
				else if(PlayerInfo[playerid][pLeader] == 2)
				{
					format(string, sizeof(string), "Directeur de la MSP %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_BLUE, string);
				}
				else if(PlayerInfo[playerid][pLeader] == 3)
				{
					format(string, sizeof(string), "Générale %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_GREEN, string);
				}
				else if(PlayerInfo[playerid][pLeader] == 7)
				{
					format(string, sizeof(string), "Le President %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_YELLOW, string);
				}
			}
		}
		else { SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas un policier."); }
		return 1;
	}
	/*if(strcmp(cmd, "/tele", true) == 0)
	{
    	SetPlayerPos(playerid,292.0274,-36.0291,1001.5156);
    	return 1;
	}
	if(strcmp(cmd, "/armes", true) == 0)
	{
 		if(PlayerToPoint(2,playerid,297.0056,-38.5137,1001.5156))
		{
    		if(PlayerInfo[playerid][pGunLic] == 1)
    		{
	    		ShowPlayerDialog(playerid, GUNSHOP, DIALOG_STYLE_LIST, "liste des armes à acheter", "sniper 2000$\nak47 1600$\nm4 1600$\nMp5 1400$\nFusil de Combat 1300$\nFusil 1200$\nDeagle 1000$\nGillet Par-Balle 1000$\nSilencieux 950$\n9mm 900$\nGaz lacrymogene 850$\nClub de Golf 150$\nBatte 150$\nPelle 150$\nSabre 150$\nPoing americain 100$\nCouteau75$\nBombe de Peinture 50$", "Choisir", "Retour");
	    	}
	    	else{ SendClientMessage(playerid,COLOR_RED,"Vous n'avez pas de permis d'arme."); }
	    	return 1;
		}
		return 1;
	}*/
	if(strcmp(cmd, "/eteindrepm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!HidePM[playerid])
			{
				HidePM[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Message priver Désactiver !");
			}
			else if (HidePM[playerid])
			{
				HidePM[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Message priver Activer !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/eteindretel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Votre téléphone est éteint !");
			}
			else if (PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Votre téléphone est allumer !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/togfam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gFam[playerid])
			{
				gFam[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal de la famille desactiver ");
			}
			else if (gFam[playerid])
			{
				gFam[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal de la famille activer !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/prendrejob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pJob] == 0)
			{
				if( GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1708.7024,-1648.9265,23.6953))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "* Vous allez devenir avocat, grace a un contrat de 5h !.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir avocat, faites /accepter job.");
				    GettingJob[playerid] = 1;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1708.7019,-1654.2805,23.7018))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "* Vous allez devenir detective , grace a un contrat de 5h !");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un detective, faites /accepter job.");
				    GettingJob[playerid] = 2;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1857.6784,-1871.2180,12.5046))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir une pute, et d'obtenir un contrat de 5 heure.")
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir pute , faites /accepter job.");
				    GettingJob[playerid] = 3;
				}
                else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1343.7381,-1771.5291,12.5104))
		        {
                  if(PlayerInfo[playerid][pLevel] < 3)
		       	  {
				       SendClientMessage(playerid, COLOR_LIGHTRED, " Vous devez etre niveaux 3 pour prendre se job!");
				       return 1;
			      }
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un dealer de drogue, et d'obtenir un contrat de 5 heure.")
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un dealer de drogue , faites /accepter job.");
				    GettingJob[playerid] = 4;
                }
                else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,516.7844,-1298.5079,16.3422))
		        {
                  if(PlayerInfo[playerid][pLevel] < 8)
		       	  {
				       SendClientMessage(playerid, COLOR_LIGHTRED, " Vous devez etre niveaux 8 pour prendre se job!");
				       return 1;
			      }
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un Voleur de voiture, et d'obtenir un contrat de 5 heure.")
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un Voleur de voiture , faites /accepter job.");
				    GettingJob[playerid] = 5;
                }
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1708.7054,-1664.8760,23.7044))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "*Vous allez devenir Journaliste , grace a un contrat de 5h !");

				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sur de vouloir devenir un Journaliste faites /accepter job");
				    GettingJob[playerid] = 6;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1650.0622,-1829.2011,12.5432))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "* Vous allez devenir Mecanicien, grace a un contrat de 5 h.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un Mécanicien, faites /accepter job.");
				    GettingJob[playerid] = 7;
		  		}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1735.0490,-1642.6157,23.7570))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un garde du corps, et d'obtenir un contrat de 5 heure.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un garde du corps, faites /accepter job.");
				    GettingJob[playerid] = 8;
		  		}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2445.3659,-1759.4938,12.5600))
		  		{
                  if(PlayerInfo[playerid][pLevel] < 5)
		       	  {
				       SendClientMessage(playerid, COLOR_LIGHTRED, " Vous devez etre niveaux 5 pour prendre se job!");
				       return 1;
			      }
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un dealer d'arme, et d'obtenir un contrat de 5 heure.")
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un dealer d'arme, faites /accepter job.");
				    GettingJob[playerid] = 9;
				}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1735.0580,-1648.1445,23.7449))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "*  Vous êtes sur le point de devenir un Ambulancier, et d'obtenir un contrat de 5 heure.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un ambulancier, faites /accepter job.");
				    GettingJob[playerid] = 10;
		  		}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1735.0833,-1654.2095,23.7316))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un Boxeur, et d'obtenir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un Boxeur, faites /accepter job.");
				    GettingJob[playerid] = 11;
		  		}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1735.1013,-1660.1799,23.7185))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un Taximan, et d'obtenir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un Taximan, faites /accepter job.");
				    GettingJob[playerid] = 12;
		  		}
	  			else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1708.7209,-1659.6443,23.7030))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "* Vous allez devenir chauffeur de bus , grace a un contrat de 5h !");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un chauffeur de bus, faites /accepter job.");
				    GettingJob[playerid] = 13 ;
				}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-77.7208,-1136.3131,0.0781))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un Camionneur et d'obtenir un contrat de 5 heures.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un Camionneur, faites /accepter job.");
				    GettingJob[playerid] = 14;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2100.9458,-1811.9661,12.5297))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir un Livreur de Pizza, et d'obtenir un contrat de 5 heure.");
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir un livreur de pizza, faites /accepter job.");
				    GettingJob[playerid] = 15;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-381.2035,-1426.1820,25.9070))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir Fermier, et d'obtenir un contrat de 5 heure.")
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir Fermier, faites /accepter job.");
				    GettingJob[playerid] = 16;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1667.0897,-1903.5375,12.5468))
		  		{
		  		    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes sur le point de devenir Nettoyeur, et d'obtenir un contrat de 5 heure.")
				    SendClientMessage(playerid, COLOR_WHITE, "* Si vous êtes sûr de vouloir devenir Nettoyeur, faites /accepter job.");
				    GettingJob[playerid] = 17;
				}
		  		else
		  		{
		  		    SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez pas prendre ce job ici ! Allez a la Mairie pour le /guide ! ");
		  		}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Pour quitter votre job /quitterjob !");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/moi", true) == 0 || strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas connectés !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /me [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "** Etranger %s", result);
			}
			else
			{
				format(string, sizeof(string), "** %s %s", sendername, result);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/do", true) == 0 || strcmp(cmd, "/do", true) == 0)
    {
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas connectés !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /do [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "** %s  [Etranger]", result);
			}
			else
			{
				format(string, sizeof(string), "** %s [%s(%i)]", result, sendername, playerid);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/b", true) == 0 || strcmp(cmd, "/b", true) == 0)//local ooc
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /b <texte>");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "(( Etranger dit:  %s ))", result);
			}
			else
			{
				format(string, sizeof(string), "(( [%i] %s dit: %s ))", playerid, sendername, result);
			}
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/crier", true) == 0 || strcmp(cmd, "/c", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/c)rier <text>");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Etranger Crie: %s!!!", result);
			}
			else
			{
				format(string, sizeof(string), "%s Crie: %s!!!", sendername, result);
			}
			ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/doucement", true) == 0 || strcmp(cmd, "/dou", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas loggué!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
	        {
	            SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
	            return 1;
            }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/dou)cement <texte>");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Etranger dis doucement: %s", result);
			}
			else
			{
				format(string, sizeof(string), "%s dis doucement: %s", sendername, result);
			}
			ProxDetector(15.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/megaphone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMuted] == 1)
	        {
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez mutté");
					return 1;
            }
			new tmpcar = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/m)egaphone [megaphone chat]");
				return 1;
			}
			if(gTeam[playerid] == 2 || IsACop(playerid) || IsAnFbiCar(playerid))
			{
				if(!IsACopCar(tmpcar) || !IsAnFbiCar(tmpcar))
				{
					if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    new currank[64];
    					if(PlayerInfo[playerid][pRank] == 1) { currank = "Cadet"; }
						else if(PlayerInfo[playerid][pRank] == 2) { currank = "Officier"; }
						else if(PlayerInfo[playerid][pRank] == 3) { currank = "Sergent"; }
						else if(PlayerInfo[playerid][pRank] == 4) { currank = "Lieutenant"; }
						else if(PlayerInfo[playerid][pRank] == 5) { currank = "Capitaine"; }
						else if(PlayerInfo[playerid][pRank] == 6) { currank = "Assistant Sheriff "; }
						else if(PlayerInfo[playerid][pRank] == 7) { currank = "Sheriff de la LSPD"; }
						else { currank = "Cadet"; }
						format(string, sizeof(string), "%s %s: %s", currank, sendername, result);
						ProxDetector(60.0, playerid, string,COLOR_YELLOW3,COLOR_YELLOW3,COLOR_YELLOW3,COLOR_YELLOW3,COLOR_YELLOW3);
					}
					else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
					{
						format(string, sizeof(string), "[Agent %s: %s]", sendername, result);
						ProxDetector(60.0, playerid, string,COLOR_YELLOW3,COLOR_YELLOW3,COLOR_YELLOW3,COLOR_YELLOW3,COLOR_YELLOW3);
					}
					printf("%s", string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'êtes pas dans un vehicule des force de l'ordre");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas le droit d'utilisez cette commande");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jobradio", true) == 0 || strcmp(cmd, "/jr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMuted] == 1)
            {
                 SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez mutté");
	             return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /jobradio [message]");
				return 1;
			}
		    if(PlayerInfo[playerid][pJob] >= 1)
			{
				format(string, sizeof(string), "** %s(JobRadio): %s. **", sendername, result);
	            SendJobMessage(PlayerInfo[playerid][pJob], COLOR_GREEN, string);
	        }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes au chômage!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/radiofrequence", true) == 0 || strcmp(cmd, "/rf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pMuted] == 1)
            {
	               SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez mutté");
	               return 1;
            }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/rf)RadioFrequence [radio chat]");
				return 1;
			}
			if(PlayerInfo[playerid][Frequence] == 0){ SendClientMessage(playerid,COLOR_RED,"vous devez enregistrer une fréquence [/frequence]"); return 1; }
		    if(PlayerInfo[playerid][Radio] == 1)
			{
				format(string, sizeof(string), "**%s: %s", sendername, result);
            	for(new i = 0; i < MAX_PLAYERS; i++)
        		{
        			if(IsPlayerConnected(i))
	        		{
	        		    if(PlayerInfo[i][Frequence] == PlayerInfo[playerid][Frequence])
	        		    {
            				ProxDetector(6.0, i, string, 0x62B382AA,0x62B382AA,0x62B382AA,0x62B382AA,0x62B382AA);
		        		}
	        		}
        		}
				printf("%s", string);
				return 1;
		    }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous ne faite pas partit d'une team !");
				return 1;
			}
		}
		return 1;
	}
		if(strcmp(cmd, "/joindevent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (devent == 1)
			{
				if (GetPlayerState(playerid) == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Sortez de votre vehicule, et réssayez après!");
					return 1;
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous êtes téléporter dans l'event Deagle Arena!");
				SetPlayerInterior(playerid,1);
				SetPlayerVirtualWorld(playerid,0);
				GivePlayerWeapon(playerid, 24, 2000);
				GivePlayerWeapon(playerid, 29, 2000);
				SetPlayerHealth(playerid, 100);
				SetPlayerArmour(playerid, 100);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   L'event du Deagle n'est pas active!");
			}
		}
		return 1;
	}
		if(strcmp(cmd, "/devent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4000 && (devent == 0))
			{
				devent = 1;
				BroadCast(COLOR_LIGHTBLUE, "  L'event DM à été activé (/joindevent)!");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 4000 && (devent == 1))
			{
				devent = 0;
				BroadCast(COLOR_GRAD2, "  L'event DM à été désactivé par un Admin !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous n'êtes pas autorisé à faire cette commande !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				if (PlayerToPoint(3, playerid,238.9701,112.7509,1003.2188) || PlayerToPoint(3,playerid,251.6416,192.3702,1008.1719) || PlayerToPoint(3,playerid,249.6595,192.3225,1008.1719) ||PlayerInfo[playerid][pLocal] != 255)
				{
					if(OnDuty[playerid]==0)
			        {
			            if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			            {
				    		format(string, sizeof(string), "* %s prend ca veste en kelvar, son arme et son badge.", sendername);
						}
						else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			            {
				    		format(string, sizeof(string), "* %s prend ca veste en kelvar, son arme et son badge.", sendername);
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeGivePlayerWeapon(playerid, 24, 70);
						SafeGivePlayerWeapon(playerid, 3, 0);
						SetPlayerArmour(playerid, 100);
						OnDuty[playerid] = 1;
						Flicservice ++;
						SetPlayerColor(playerid, TEAM_HIT_COLOR);
					}
					else if(OnDuty[playerid]==1)
					{
					    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
					    {
				    		format(string, sizeof(string), "* %s pose ca veste en kelvar, son arme et son badge.", sendername);
						}
						else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
                            format(string, sizeof(string), "* %s pose ca veste en kelvar, son arme et son badge.", sendername);
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeResetPlayerWeapons(playerid);
						SetPlayerArmour(playerid, 0);
						SafeGivePlayerWeapon(playerid, 41, 500);
						OnDuty[playerid] = 0;
						Flicservice --;
						SetPlayerColor(playerid, TEAM_HIT_COLOR);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas dans un vestiaire !");
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
		    	if(!PlayerToPoint(3,playerid,-1347.9897,491.8485,11.1953)) { SendClientMessage(playerid,COLOR_RED,"Vous devez être au bateau pour vous mettre en service."); }
			    if(OnDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant hors-service.");
			        SetPlayerColor(playerid, 0x00000000);
			        OnDuty[playerid] = 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant en service.");
			        SetPlayerColor(playerid, TEAM_HIT_COLOR);
			        OnDuty[playerid] = 1;
			    }
			}
			else if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant Hors service de votre Emploi d'ambulancier et ne recevrez pas d'appels plus.");
			        JobDuty[playerid] = 0;
			        Medics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant En service avec votre Emploi d'ambulancier et recevrez des appels des gens dans le besoin.");
			        JobDuty[playerid] = 1;
			        Medics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Info] Medecin %s se met en service. (/appeler 911).", sendername);
	    			OOCNews(COLOR_ALLDEPT,string);
			    }
			}
			else if(PlayerInfo[playerid][pJob] == 15)
   			{
       			if(JobDuty[playerid] == 1)
       			{
           			SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant Hors service de votre Emploi de Livraison de Pizza et ne recevrez  plus d'appels.");
           			JobDuty[playerid] = 0;
           			PizzaBoys -= 1;
       			}
       			else
       			{
           			SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant En service avec votre Emploi de Livraison de Pizza et recevrez des appels des gens dans le besoin.");
           			JobDuty[playerid] = 1;
        			PizzaBoys += 1;
        			GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Info] Service de Pizza %s Appeler nous a notre numero 111, (/appeler 111).", sendername);
	    			OOCNews(0xFF7E00AA,string);
				}
			}
			else if(PlayerInfo[playerid][pJob] == 7)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant Hors service de votre Voiture mecanicien l'Emploi et ne recevrez d'appels plus.");
			        JobDuty[playerid] = 0;
			        Mechanics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant En service avec votre Voiture mecanicien l'Emploi et recevrez des appels des gens dans le besoin.");
			        JobDuty[playerid] = 1;
			        Mechanics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Info] Mecano %s Appeler nous a notre numero ont vous repareras votre voiture a bas prix ! numero 555, (/appeler 555).", sendername);
	    			OOCNews(0x2993EDAA,string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'ête pas Policier !");
			}
		}
		return 1;
	}
//-----test---------------------------------------------------------------------
	if(strcmp(cmd, "/armeeservice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				if (PlayerToPoint(3, playerid,2259.6165,-2166.0012,6.0793) || PlayerToPoint(3,playerid,251.6416,192.3702,1008.1719) || PlayerToPoint(3,playerid,249.6595,192.3225,1008.1719) ||PlayerInfo[playerid][pLocal] != 255)
				{
					if(OnDuty[playerid]==0)
			        {
			            if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1)
			            {
				    		format(string, sizeof(string), "*  %s prend son equipement et son badge.", sendername);
						}
						else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 1)
			            {
				    		format(string, sizeof(string), "* %s prend son equipement et son badge.", sendername);
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeGivePlayerWeapon(playerid, 24, 70);
						SafeGivePlayerWeapon(playerid, 3, 0);
						SetPlayerArmour(playerid, 100);
						OnDuty[playerid] = 1;
						SetPlayerColor(playerid, TEAM_HIT_COLOR);
					}
					else if(OnDuty[playerid]==1)
					{
					    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
					    {
				    		format(string, sizeof(string), "* %s pose ca veste en kelvar, son arme et son badge.", sendername);
						}
						else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
                            format(string, sizeof(string), "* %s pose ca veste en kelvar, son arme et son badge.", sendername);
						}
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeResetPlayerWeapons(playerid);
						SetPlayerArmour(playerid, 0);
						SafeGivePlayerWeapon(playerid, 41, 500);
						OnDuty[playerid] = 0;
						SetPlayerColor(playerid, TEAM_HIT_COLOR);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas dans un vestiaire !");
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
		    	if(!PlayerToPoint(3,playerid,-1347.9897,491.8485,11.1953)) { SendClientMessage(playerid,COLOR_RED,"Vous devez être au bateau pour vous mettre en service."); }
			    if(OnDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant hors-service.");
			        SetPlayerColor(playerid, 0x00000000);
			        OnDuty[playerid] = 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant en service.");
			        SetPlayerColor(playerid, TEAM_HIT_COLOR);
			        OnDuty[playerid] = 1;
			    }
			}
			else if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant Hors service de votre Emploi d'ambulancier et ne recevrez pas d'appels plus.");
			        JobDuty[playerid] = 0;
			        Medics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant En service avec votre Emploi de Carabin et recevrez des appels des gens dans le besoin.");
			        JobDuty[playerid] = 1;
			        Medics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Info] Medecin %s ce met en service. (/appeler 911).", sendername);
	    			OOCNews(COLOR_ALLDEPT,string);
			    }
			}
			else if(PlayerInfo[playerid][pJob] == 15)
   			{
       			if(JobDuty[playerid] == 1)
       			{
           			SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant Hors service de votre Emploi de Livraison de Pizza et ne recevrez d'appels plus.");
           			JobDuty[playerid] = 0;
           			PizzaBoys -= 1;
       			}
       			else
       			{
           			SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant En service avec votre Emploi de Livraison de Pizza et recevrez des appels des gens dans le besoin.");
           			JobDuty[playerid] = 1;
        			PizzaBoys += 1;
        			GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Info] Service de Pizza %s Appeler nous a notre numero 111, (/appeler 111).", sendername);
	    			OOCNews(0xFF7E00AA,string);
				}
			}
			else if(PlayerInfo[playerid][pJob] == 7)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant Hors service de votre Voiture mecanicien l'Emploi et ne recevrez d'appels plus.");
			        JobDuty[playerid] = 0;
			        Mechanics -= 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes maintenant En service avec votre Voiture mecanicien l'Emploi et recevrez des appels des gens dans le besoin.");
			        JobDuty[playerid] = 1;
			        Mechanics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Info] Mecano %s Appeler nous a notre numero ont vous repareras votre voiture a bas prix ! numero 555, (/appeler 555).", sendername);
	    			OOCNews(0x2993EDAA,string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'ête pas Policier !");
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/departments", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/d)epartments [department chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
			    if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1) { format(string, sizeof(string), "** Sheriff %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Sheriff Adjoint %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Capitaine %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Lieutenant %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Sergent %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Officier %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Cadet %s: %s , Terminé **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Cadet %s: %s **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendJobMessage(11, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
			    if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 2) { format(string, sizeof(string), "** Directeur de la FBI %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Co-Directeur %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Agent Spécial %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Agent expérimenté %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Agent du FBI %s: %s , Terminé **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Stagiaire au FBI %s: %s , Terminé **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Stagiaire au FBI %s: %s **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendJobMessage(11, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 3) { format(string, sizeof(string), "** Colonel %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Lieutenant-Colonel %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Major %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Caporal %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Soldat %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Soldat Stagiaire %s: %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Soldat Stagiaire %s: %s **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendJobMessage(11, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pJob]==4)
			{
				format(string, sizeof(string), "** Médecin %s: %s **", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendJobMessage(11, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			    if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 7) { format(string, sizeof(string), "** Président %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Vice président %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Ministre %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Secrétaire d'état %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** chef des GDC %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** GDC/chauffeur %s: %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Chauffeur %s: %s **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendJobMessage(11, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous ne faite pas partit d'une team !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mdc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas policier !");
	            return 1;
	        }
			new tmpcar = GetPlayerVehicleID(playerid);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mdc [idDuJoueur/PartieDuNom]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsACopCar(tmpcar) || IsAnFbiCar(tmpcar) ||PlayerToPoint(5.0, playerid, 253.9280,69.6094,1003.6406))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"______-=MOBILE DATA=-_______");
						format(string, sizeof(string), "Nom : %s", sendername);
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Crime : %s", PlayerCrime[giveplayerid][pAccusedof]);
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Claimant : %s", PlayerCrime[giveplayerid][pVictim]);
						SendClientMessage(playerid, COLOR_GRAD3,string);
						format(string, sizeof(string), "Reporter : %s", PlayerCrime[giveplayerid][pAccusing]);
						SendClientMessage(playerid, COLOR_GRAD4,string);
						format(string, sizeof(string), "Accusé : %s", PlayerCrime[giveplayerid][pBplayer]);
						SendClientMessage(playerid, COLOR_GRAD5,string);
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"_______________________________________");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas dans un Véhicule de La police ou dans le Département de La police.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/suspect", true) == 0 || strcmp(cmd, "/su", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(OnDuty[playerid] == 1 && PlayerInfo[playerid][pMember] == 1 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pLeader] == 1) { }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/su)spect [ID] [Nom du Delits]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (gTeam[playerid] == 2 || IsACop(playerid))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (gTeam[giveplayerid] != 2)
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[80];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/su)spect [ID] [Nom du delit]");
								return 1;
							}
							if(WantedPoints[giveplayerid] == 0) { WantedPoints[giveplayerid] = 3; }
							else { WantedPoints[giveplayerid]+= 2; }
							SetPlayerCriminalEx(giveplayerid,playerid, result);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas faire ca sur un policier !");
						}
					}
				}
				else
				{
						format(string, sizeof(string), "%d n'es pas un joueur actif.", giveplayerid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'etes pas policier/FBI/Militaire");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/verouiller", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
			{
				if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pPhousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de vehicule.");
					return 1;
				}
				else if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pPhousekey]+1)
				{
					if (HireCar[playerid] != gLastCar[playerid] && HireCar[playerid] != 299)
					{
						gLastDriver[HireCar[playerid]] = 300;
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
					}
					HireCar[playerid] = gLastCar[playerid];
				}
			}
			if (PlayerInfo[playerid][pPhousekey] == 255)
			{
				if(HireCar[playerid] == 299)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de vehicule.");
					return 1;
				}
			}
			carid = PlayerInfo[playerid][pPhousekey]+1;
			if(HireCar[playerid] != 299 && !SwitchKey[playerid])
			{
				carid = HireCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de vehicule");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Véhicule de Location ~r~Fermer", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Vehicule de maison ~r~Fermer", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}
				}
				case 1:
				{
					if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de vehicule");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Vehicule de location ~g~Ouvert", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Vehicule de maison ~g~Ouvert", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Erreur");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de vehicule !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ouvrir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPhousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Porte ~g~Ouverte", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Porte ~r~Fermer", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas les clé", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Biz ~g~Ouvert", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Biz ~r~Fermer", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas la clef", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
							SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Biz ~g~Ouvert", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Biz ~r~Fermer", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas la clef", 5000, 6);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/gang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pLeader] == 16)
			{
				if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pGangKey]+1)
				{
					if (GangCar[playerid] != gLastCar[playerid] && GangCar[playerid] != 512)
					{
						gLastDriver[GangCar[playerid]] = 520;
						gCarLock[GangCar[playerid]] = 0;
						UnLockCar(GangCar[playerid]);
					}
					GangCar[playerid] = gLastCar[playerid];
				}
			}
			if(GangCar[playerid] != 512 && !SwitchKey[playerid])
			{
				carid = GangCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(GangCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}
				}
				case 1:
				{
					if(GangCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Error");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle !");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/pm", true) == 0 || strcmp(cmd, "/p", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
				return 1;
			}
			if(PlayerInfo[playerid][pLevel] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous devez être au niveau 2 pour utiliser cet commande !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/p)m [idDuJoueur/PartieDuNom] [texte]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(HidePM[giveplayerid] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Se joueurs a bloquer les message privé!");
			            return 1;
			        }
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[80];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/p)m [idDuJoueur/PartieDuNom] [texte]");
						return 1;
					}
					format(string, sizeof(string), "[ID:%d] %s pm: %s", playerid, sendername, (result));
					SendClientMessage(giveplayerid, COLOR_YELLOW3, string);
					format(string, sizeof(string), "PM Envoyer a [ID:%d]%s: %s", giveplayerid, giveplayer, (result));
					SendClientMessage(playerid,  COLOR_YELLOW3, string);
					format(string, sizeof(string), "~r~$-%d", txtcost);
					GameTextForPlayer(playerid, string, 5000, 1);
					SafeGivePlayerMoney(playerid,-txtcost);
					format(string, sizeof(string), "[PM]%s à %s: %s", sendername,giveplayer,(result));
					SendAdminMessagePM(COLOR_YELLOW, string);
					print(string);
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "   %d N'est pas un joueurs actif.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/pma", true) == 0 || strcmp(cmd, "/pma", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pAdmin] <= 1000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'etes pas autoriser a faire cette commande !");
	            return 1;
	        }
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pma [idDuJoueur/PartieDuNom] [Texte]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        /*if(HidePM[giveplayerid] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Se joueurs a bloquer les message privé!");
			            return 1;
			        }*/
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[80];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pma [idDuJoueur/PartieDuNom] [texte]");
						return 1;
					}
					format(string, sizeof(string), "Administrateur: %s",(result));
					SendClientMessage(giveplayerid, 0xBBA033AA, string);
					format(string, sizeof(string), "PM Envoyer a [ID:%d]%s: %s", giveplayerid, giveplayer, (result));
					SendClientMessage(playerid,  0xE5C43EAA, string);
					format(string, sizeof(string), "[PM]%s à %s: %s", sendername,giveplayer,(result));
					SendAdminMessagePM(COLOR_YELLOW, string);
					print(string);
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "   %d N'est pas un joueurs actif.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ab", true) == 0 || strcmp(cmd, "/ab", true) == 0)//local ooc admin
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pAdmin] <= 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'etes pas autoriser a faire cette commande !");
	            return 1;
	        }
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas loggué!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ab <texte>");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "(( Administrateur:  %s ))", result);
			}
			else
			{
				format(string, sizeof(string), "(( Administrateur: %s ))",result);
			}
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/chuchotter", true) == 0 || strcmp(cmd, "/chu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'etes pas connecté !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/chu)chotter [idDuJoueur/PartieDuNom] [texte]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(PlayerToPoint(5, playerid, x, y, z))
			        {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						if(giveplayerid == playerid)
						{
							format(string, sizeof(string), "* %s mutters something to himself.", sendername);
							ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
                        {
							if(PlayerInfo[playerid][pMaskuse] == 1)
							{
                    		   	if(PlayerInfo[giveplayerid][pMaskuse] == 1)
                                {
				     		    	ProxDetector(15.0, playerid, "* Etranger Chuchote quelque chose à Etranger", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    	}
                    		   	if(PlayerInfo[giveplayerid][pMaskuse] == 0)
                                {
						            format(string, sizeof(string), "* Etranger Chuchote quelque chose à %s", giveplayer);
						        	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    		}
					    	}
                   		   	if(PlayerInfo[playerid][pMaskuse] == 0)
                            {
                    		   	if(PlayerInfo[giveplayerid][pMaskuse] == 1)
                                {
						            format(string, sizeof(string), "* %s Chuchote quelque chose à Etranger", sendername);
						        	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    	}
                    		   	if(PlayerInfo[giveplayerid][pMaskuse] == 0)
                                {
						            format(string, sizeof(string), "* %s Chuchote quelque chose à %s",sendername,giveplayer);
						        	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    		}
						   	}
						}
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[82];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/chu) [idDuJoueur/PartieDuNom] [texte]");
							return 1;
						}
						format(string, sizeof(string), "%s Chuchote: %s", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "%s Chuchote: %s", sendername, (result));
						SendClientMessage(playerid,  COLOR_YELLOW, string);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid,  COLOR_GREY, "  Le joueur n'est pas près de vous !");
					    return 1;
					}
				}
			}
			else
			{
					format(string, sizeof(string), "   %d N'est pas un joueurs actif.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
   if(strcmp(cmd,"/droits",true)==0)
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[256];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(IsPlayerConnected(playerid))
		{
        	if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
        	{
            	if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "USAGE: /droits [motif]");
					return 1;
				}
				new nom[MAX_PLAYER_NAME];
				GetPlayerName(playerid, nom, sizeof(nom));
				format(string, sizeof(string), "%s dit: Vous êtes en état d'arrestation.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Pour %s.", nom, result);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Vous avez le droit de garder le silence.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Tous ce que vous direz sera retenu devant le tribunal.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
				format(string, sizeof(string), "%s dit: Vous pouvez appeler un avocat.", nom);
                ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                printf("%s", string);
			}
			else
			{
                SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas policier / FBI / militaire.");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"Vous n'êtes pas connecté.");
		}
		return 1;
	}

	if(strcmp(cmd, "/deposer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(20, playerid,2311.2961,-13.2608,26.7422))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas dans une banque !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposer [Montant]");
				format(string, sizeof(string), "  Vous avez $%d dans votre compte.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposer [Montant]");
				format(string, sizeof(string), "  Vous avez $%d dans votre compte.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit >  GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas autant d'argent !");
				return 1;
			}
			SafeGivePlayerMoney(playerid,-cashdeposit);
			new curfunds = PlayerInfo[playerid][pAccount];
			ApplyAnimation(playerid, "DEALER", "shop_pay",4.0,0,0,0,0,0);
			PlayerInfo[playerid][pAccount]=cashdeposit+PlayerInfo[playerid][pAccount];
			SendClientMessage(playerid, COLOR_WHITE, "|___ BANQUE STATS ___|");
			format(string, sizeof(string), "  Vieille Balance: $%d", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Dépôt: $%d",cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  Nouvelle Balance: $%d", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		return 1;
	}
    if(strcmp(cmd, "/retirer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(20, playerid,2311.2961,-13.2608,26.7422) || IsToAnDistributeur(playerid))
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirer [montant]");
					format(string, sizeof(string), "  Vous Avez $%d dans votre compte.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirer [montant]");
					format(string, sizeof(string), "  Vous Avez $%d dans votre compte.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas autant d'argent !");
					return 1;
				}
		    	//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,cashdeposit);
				PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
				ApplyAnimation(playerid, "PED", "ATM",4.0,0,0,0,0,0);
				format(string, sizeof(string), "  Vous avez Retirés $%d De votre compte en banque il vous reste : $%d ", cashdeposit,PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
			else
			{
   				SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas dans une banque");
	            return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/retirergouv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(20, playerid,2311.2961,-13.2608,26.7422))
	        {
				tmp = strtok(cmdtext, idx);
 				if(PlayerInfo[playerid][pLeader] != 7)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas le maire !");
					return 1;
				}
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirergouv [montant]");
					format(string, sizeof(string), " Il y a %d$ dans le compte banquaire du gouvernement.", ArgentGouv);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirergouv [montant]");
					format(string, sizeof(string), " Il y a %d$ dans le compte banquaire du gouvernement.", ArgentGouv);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > ArgentGouv || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Il n'y a pas autant d'argent dans le compte du gouvernement !");
					return 1;
				}

		    	//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,cashdeposit);
		    	ArgentGouv -= cashdeposit;
				format(string, sizeof(string), "  Vous avez retirer %d$ De l'argent du gouvernement. Il reste %d$ sur le compte du Gouvernement ", ArgentGouv);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SaveStat();
				return 1;
			}
			else
			{
   				SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas dans une banque");
	            return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/balance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(20, playerid,2311.2961,-13.2608,26.7422) || PlayerToPoint(1.5, playerid, 1346.5016,-1758.7649,13.5156) || PlayerToPoint(1.5, playerid, 1592.7152,-2335.3748,13.5400) || PlayerToPoint(1.5, playerid, 2308.4612,-1634.4176,14.8270) || PlayerToPoint(1.5, playerid, 2865.9014,-1415.4203,11.0061) || PlayerToPoint(1.5, playerid, 2404.5913,-1229.8973,23.8301) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
	        {
				format(string, sizeof(string), "  Vous avez $%d dans votre compte.",PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas dans une banque !");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jetterde", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "*** %s lance un Dé qui atterrit sur %d", sendername,dice);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de dé");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jetterpiece", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new coin = random(2)+1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new coinname[20];
			if(coin == 1) { coinname = "face"; }
			else { coinname = "pile"; }
			format(string, sizeof(string), "*** %s lance une piece ! Elle atterit sur %s", sendername,coinname);
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	if(strcmp(cmd, "/transferer", true) == 0 || strcmp(cmd, "/virement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez être Niveau 3 Minimum !");
				return 1;
			}
			/*if(!PlayerToPoint(20, playerid,2311.2961,-13.2608,26.7422))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'ête pas dans une banque !");
	            return 1;
	        }*/
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /transferer [idDuJoueur/PartieDuNom] [Montant]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /transferer [idDuJoueur/PartieDuNom] [Montant]");
				return 1;
			}
			moneys = strval(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = PlayerInfo[playerid][pAccount] ;
					if (moneys > 0 && playermoney >= moneys)
					{
						PlayerInfo[playerid][pAccount] -= moneys;
						PlayerInfo[giveplayerid][pAccount] += moneys;
						format(string, sizeof(string), "   Vous avez transferer $%d sur le Compte de %s", moneys, giveplayer,giveplayerid);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   Vous recevez $%d Dans votre compte pars %s", moneys, sendername, playerid);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "[Transfere]%s Transfere $%d a %s", sendername, moneys, giveplayer);
		                if(moneys >= 1)
						{
							ABroadCast(COLOR_RED,string);
						}
						printf("%s", string);
						PayLog(string);
						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Le transfert n'a pas marcher.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d N'est pas un joueurs actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/frequence", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {

			if(PlayerInfo[playerid][Radio] == 0)
			{
			    SendClientMessage(playerid,COLOR_LIGHTRED,"Vous n'avez pas de radio");
			    return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "/frequence [frequence]");
				return true;
			}
			new frequency;
			frequency = strvalEx(tmp);
			if(frequency >= 1000 || frequency <= 9999)
			{
				format(string, sizeof(string), "Vous venez de définir la fréquence radio à %d", frequency);
				SendClientMessage(playerid,COLOR_WHITE,string);
				PlayerInfo[playerid][Frequence] = frequency;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERREUR: la fréquence radio doit être au moins 4 chiffres!");
    	}
		return true;
    }
	if(strcmp(cmd, "/equiper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				if(PlayerToPoint(5, playerid, 238.9685,114.0949,1003.2188))//centerpoint 24-7
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE:   [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						SendClientMessage(playerid, COLOR_GRAD2, "| 2: équipement de motard");
						SendClientMessage(playerid, COLOR_GRAD2, "| 3: vie + gillet");
						SendClientMessage(playerid, COLOR_GRAD3, "| 4: équipement de base");
						SendClientMessage(playerid, COLOR_GRAD3, "| 5: équipement de SWAT");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de cadet et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 2)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement d'officier et le met..", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 3)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sergent et le met..", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 4)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de lieutenant et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 5)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SafeGivePlayerWeapon(playerid, 46, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de capitaine et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 6)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
						    SafeGivePlayerWeapon(playerid, 31, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sheriff adjoint et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
						    SafeGivePlayerWeapon(playerid, 31, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sheriff et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
 	  				}
					else if (item == 2)
					{
						SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 29, 1000);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SafeGivePlayerWeapon(playerid, 41, 1000);
						SafeGivePlayerWeapon(playerid, 25, 1000);
						SafeGivePlayerWeapon(playerid, 29, 1000);
 		 				SetPlayerSkin(playerid, 284);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de motard et le met.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            		}
					else if (item == 3)
					{
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend un donnut's et le mange puis, enfile sa veste en kelvar.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if (item == 4)
					{
           	     	    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SetPlayerHealth(playerid, 100);
						if(PlayerInfo[playerid][pRank] <= 1){ SetPlayerSkin(playerid,71); ChosenSkin[playerid] = 71; }
						if(PlayerInfo[playerid][pRank] == 2){ SetPlayerSkin(playerid,280); ChosenSkin[playerid] = 280; }
						if(PlayerInfo[playerid][pRank] == 3){ SetPlayerSkin(playerid,281); ChosenSkin[playerid] = 281; }
						if(PlayerInfo[playerid][pRank] == 4){ SetPlayerSkin(playerid,266); ChosenSkin[playerid] = 266; }
						if(PlayerInfo[playerid][pRank] == 5){ SetPlayerSkin(playerid,265); ChosenSkin[playerid] = 265; }
						if(PlayerInfo[playerid][pRank] == 6){ SetPlayerSkin(playerid,283); ChosenSkin[playerid] = 283; }
						if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1){ SetPlayerSkin(playerid,288); ChosenSkin[playerid] = 288; }
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de base et le met.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
	             	else if (item == 5)
					{
           	     	    SafeResetPlayerWeapons(playerid);
                        SafeGivePlayerWeapon(playerid, 3, 1);
				    	SafeGivePlayerWeapon(playerid, 29, 1000);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SafeGivePlayerWeapon(playerid, 41, 1000);
						SafeGivePlayerWeapon(playerid, 25, 1000);
						SafeGivePlayerWeapon(playerid, 29, 1000);
		                SafeGivePlayerWeapon(playerid, 31, 2500);
                        SafeGivePlayerWeapon(playerid, 34, 500);
						SafeGivePlayerWeapon(playerid, 17, 1000);
						SafeGivePlayerWeapon(playerid, 46, 1000);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						if(PlayerInfo[playerid][pRank] <= 1){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 2){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 3){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 4){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 5){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 6){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de SWAT.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					SendClientMessage(playerid, COLOR_WHITE, "   Id invalid!");
					return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas devant vôtre casier"); }
			}
			if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
		    	if (PlayerToPoint(3,playerid,-1347.9897,491.8485,11.1953))
		    	{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equipergouv [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						SendClientMessage(playerid, COLOR_GRAD2, "| 2: vie + gillet");
						SendClientMessage(playerid, COLOR_GRAD3, "| 3: équipement de base");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 3)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 34, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
 	  				}
					else if (item == 2)
					{
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s prend son équipement.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if (item == 3)
					{
           	     	    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SetPlayerHealth(playerid, 100);
                        SetPlayerSkin(playerid,287);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s met son uniforme.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Id invalid!");
						return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "vous n'êtes pas au bon endroit"); }
			}
		}
		return 1;
	}
		if(strcmp(cmd, "/equipergouv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 7||PlayerInfo[playerid][pLeader] == 7)
			{
				if(PlayerToPoint(8.0,playerid,367,159,1009))//centerpoint 24-7
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE:   [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement garde du corps");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
                            GivePlayerWeapon(playerid,24,90);
                            GivePlayerWeapon(playerid,29,300);
	                        GivePlayerWeapon(playerid, 21, 1000);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}


					}
					else
					{
					SendClientMessage(playerid, COLOR_WHITE, "   Id invalid!");
					return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas devant vôtre casier"); }
			}
			if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
		    	if (PlayerToPoint(8.0,playerid,367,159,1009))
		    	{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equipergouv [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
                            GivePlayerWeapon(playerid,24,90);
                            GivePlayerWeapon(playerid,29,300);
	                        GivePlayerWeapon(playerid, 21, 1000);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Id invalid!");
						return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "vous n'êtes pas au bon endroit"); }
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/equipemoi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
				if(PlayerToPoint(5, playerid, 249.0410,192.9111,1008.1719))//centerpoint 24-7
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equiper [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						SendClientMessage(playerid, COLOR_GRAD2, "| 2: équipement de motard");
						SendClientMessage(playerid, COLOR_GRAD2, "| 3: vie + gillet");
						SendClientMessage(playerid, COLOR_GRAD3, "| 4: SWAT");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de cadet et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 2)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement d'officier et le met..", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 3)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sergent et le met..", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 4)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de lieutenant et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 5)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de capitaine et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 6)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
						    SafeGivePlayerWeapon(playerid, 31, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sheriff adjoint et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
						    SafeGivePlayerWeapon(playerid, 31, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sheriff et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
 	  				}
					else if (item == 2)
					{
						SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 29, 1000);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SafeGivePlayerWeapon(playerid, 41, 1000);
						SafeGivePlayerWeapon(playerid, 25, 1000);
						SafeGivePlayerWeapon(playerid, 29, 1000);
 		 				SetPlayerSkin(playerid, 284);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de motard et le met.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            		}
					else if (item == 3)
					{
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend un donnut's et le mange puis, enfile sa veste en kelvar.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if (item == 4)
					{
						SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SafeGivePlayerWeapon(playerid, 25, 1000);
						SafeGivePlayerWeapon(playerid, 29, 1000);
						SafeGivePlayerWeapon(playerid, 34, 1000);
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						if(PlayerInfo[playerid][pRank] <= 1){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 2){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 3){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 4){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 5){ SetPlayerSkin(playerid,286); ChosenSkin[playerid] = 286; }
						if(PlayerInfo[playerid][pRank] == 6){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de base et le met.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Invalide");
						return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas devant vôtre casier"); }
			}
			if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
		    	if (PlayerToPoint(3,playerid,1946.2291,-2203.6409,13.8347))
		    	{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equiper [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						SendClientMessage(playerid, COLOR_GRAD2, "| 2: vie + gillet");
						SendClientMessage(playerid, COLOR_GRAD3, "| 3: équipement de base");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 3)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 34, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
 	  				}
					else if (item == 2)
					{
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s prend son équipement.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if (item == 3)
					{
           	     	    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SetPlayerHealth(playerid, 100);
                        SetPlayerSkin(playerid,287);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s met son uniforme.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Id invalid!");
						return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "vous n'êtes pas au bon endroit"); }
			}
		}
		return 1;
	}
//---------------------equipement-----------------------------------------------
	if(strcmp(cmd, "/equipement", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
				if(PlayerToPoint(5, playerid, 2257.0901,-2165.5571,6.7771))//centerpoint 24-7
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equiper [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						SendClientMessage(playerid, COLOR_GRAD2, "| 2: équipement de motard");
						SendClientMessage(playerid, COLOR_GRAD2, "| 3: vie + gillet");
						SendClientMessage(playerid, COLOR_GRAD3, "| 4: SWAT");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de cadet et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 2)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement d'officier et le met..", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 3)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sergent et le met..", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 4)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de lieutenant et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 5)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de capitaine et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 6)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
						    SafeGivePlayerWeapon(playerid, 31, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sheriff adjoint et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1)
						{
						    SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 3, 1);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 25, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
						    SafeGivePlayerWeapon(playerid, 31, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
  							format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de sheriff et le met.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
 	  				}
					else if (item == 2)
					{
						SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 29, 1000);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SafeGivePlayerWeapon(playerid, 41, 1000);
						SafeGivePlayerWeapon(playerid, 25, 1000);
						SafeGivePlayerWeapon(playerid, 29, 1000);
 		 				SetPlayerSkin(playerid, 284);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de motard et le met.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            		}
					else if (item == 3)
					{
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend un donnut's et le mange puis, enfile sa veste en kelvar.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if (item == 4)
					{
						SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SafeGivePlayerWeapon(playerid, 25, 1000);
						SafeGivePlayerWeapon(playerid, 29, 1000);
						SafeGivePlayerWeapon(playerid, 34, 1000);
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						if(PlayerInfo[playerid][pRank] <= 1){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 2){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 3){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 4){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 5){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 6){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						if(PlayerInfo[playerid][pRank] == 7 || PlayerInfo[playerid][pLeader] == 1){ SetPlayerSkin(playerid,285); ChosenSkin[playerid] = 285; }
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s ouvre son casier, prend son équipement de base et le met.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Invalide");
						return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "Vous n'êtes pas devant vôtre casier"); }
			}
			if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
			{
		    	if (PlayerToPoint(3,playerid,1946.2291,-2203.6409,13.8347))
		    	{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /equipement [no. d'équipement]");
						SendClientMessage(playerid, COLOR_BLUE, "|_______ EQUIPEMENT _______|");
						SendClientMessage(playerid, COLOR_GRAD1, "| 1: équipement");
						SendClientMessage(playerid, COLOR_GRAD2, "| 2: vie + gillet");
						SendClientMessage(playerid, COLOR_GRAD3, "| 3: équipement de base");
						return 1;
					}
					new item = strval(tmp);
					if (item == 1)
					{
					    if(PlayerInfo[playerid][pRank] <= 1)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					    if(PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 3)
						{
					        SafeResetPlayerWeapons(playerid);
							SafeGivePlayerWeapon(playerid, 24, 1000);
							SafeGivePlayerWeapon(playerid, 27, 1000);
							SafeGivePlayerWeapon(playerid, 29, 1000);
							SafeGivePlayerWeapon(playerid, 41, 1000);
							SafeGivePlayerWeapon(playerid, 31, 1000);
							SafeGivePlayerWeapon(playerid, 34, 1000);
							SafeGivePlayerWeapon(playerid, 17, 1000);
							SetPlayerArmour(playerid, 100);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend son équipement et ses armes.", sendername);
							ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
 	  				}
					else if (item == 2)
					{
						SetPlayerHealth(playerid, 100);
						SetPlayerArmour(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s prend son équipement.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if (item == 3)
					{
           	     	    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 1000);
						SetPlayerHealth(playerid, 100);
                        SetPlayerSkin(playerid,287);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s met son uniforme.", sendername);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Id invalid!");
						return 1;
					}
				}
				else{ SendClientMessage(playerid, COLOR_RED, "vous n'êtes pas au bon endroit"); }
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/acheter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Tu n'est pas dans un 24-7 !");
				return 1;
			}
			ShowPlayerDialog(playerid, SHOP, DIALOG_STYLE_LIST, "liste des choses à acheter", "Annuaire 10$\nDès 10$\nPreservatif 1$\nAppareil photo 50$\nMasque 300$\nMontre 60$\nCanne à pêche 150$\nCorde 10$\nBriquet 5$\nCigarettes 10$\nBieres 6$\nRadio 500$\nBidon d'essence 20$", "Acheter", "Quitter");
		}
		return 1;
	}
	if(strcmp(cmd, "/acmd", true) == 0)
	{
	if(PlayerInfo[playerid][pAdmin] == 500)
	{
    SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes MDC ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/a | /n | /adminliste |");
	}
	if(PlayerInfo[playerid][pAdmin] == 1000)
	{
    SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur en test ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /setint | /setvw | /muter | /kick | /unfreeze |/freeze |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /gethere | /a | /ao | /skin | /taule | /specplayer | /bigears | /specoff | /ab |");
	}
	if (PlayerInfo[playerid][pAdmin] == 2000)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur1 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer| /bigears | /specoff | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /setjob | /gotols | /pma(pm admin) | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 2250)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur2 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer| /bigears | /specoff | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc| /rc | /setjob | /gotols | /pma(pm admin) | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 2500)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur3 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc | /rc | /setjob | /gotols | /startlotto | /pma(pm admin) | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 2750)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Moderateur4 ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc | /rc | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /nom |");
 	}
	if (PlayerInfo[playerid][pAdmin] == 3000)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur1  ______________________|");
   	SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin)  | /tutoriel |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /nom |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 3250)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur2  ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel | /clear2 |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /entrercar | /faireplonger |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 3500)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur3  ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel | /clear2 |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /entrercar | /faireplonger |");
 	}
 	if (PlayerInfo[playerid][pAdmin] == 3750)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Administrateur4  ______________________|");
    SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel | /clear2 |");
	SendClientMessage(playerid, COLOR_GREEN,"/vehslap |/gotoin | /gotocar | /getcar | /setage | /entrercar | /gotojet | /rac | /ban | /entrercar | /faireplonger |");
 	}
	if (PlayerInfo[playerid][pAdmin] == 4000)
	{
	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes SuperAdmin  ______________________|");
	SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab | /noooc |");
	SendClientMessage(playerid, COLOR_GREEN,"/rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /tutoriel |");
	SendClientMessage(playerid, COLOR_GREEN,"/gotohopital | /ip | /modifier | /vehslap |/gotoin | /gotostad | /gotolv | /gotosf | /gotocar |");
	SendClientMessage(playerid, COLOR_GREEN,"/getcar | /setage | /entrercar | /gotojet | /rac | /racblocation | /racclocation |/ban | /nom |");
    SendClientMessage(playerid, COLOR_GREEN,"/unban | /deverouiller | /donnerdrogue | /sethp | /setarmor |/explose | /clear2 | /clear2 | /faireplonger |");
	}
	if (PlayerInfo[playerid][pAdmin] == 9999)
	{
 	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes AdminGeneral ______________________|");
	SendClientMessage(playerid, COLOR_GREEN,"/adminservice | /adminliste | /regarder | /setint | /setvw | /muter | /kick | /unfreeze |/freeze | /regarderarmes |");
    SendClientMessage(playerid, COLOR_GREEN,"/slap | /goto | /gethere | /a | /ao | /skin | /taule | /specplayer | /specoff| /bigears | /ab |/donnerarme |");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc | /rc | /adonnerpermis | /annonce | /setjob | /gotols | /startlotto | /pma(pm admin) | /nom |");
	SendClientMessage(playerid, COLOR_GREEN,"/gotohopital | /ip | /modifier | /vehslap |/gotoin | /gotostad | /gotolv | /gotosf | /gotocar |");
	SendClientMessage(playerid, COLOR_GREEN,"/getcar | /setage | /entrercar | /gotojet | /rac | /racblocation | /racclocation |/ban | /tutoriel |");
    SendClientMessage(playerid, COLOR_GREEN,"/unban | /deverouiller | /donnerdrogue | /sethp | /setarmor |/explose | /sslap | donnermateriaux |");
 	SendClientMessage(playerid, COLOR_GREEN,"/setchampion  | /weatherall | /donnerargent | /aadmin | /aleader | /avmenu |/settstat | /flip | /faireplonger |");
 	SendClientMessage(playerid, COLOR_GREEN,"/clear2 | /ninja |");
	}
	return 1;
	}
	
	
	if(strcmp(cmd, "/cmda1", true) == 0)
	{
	if (PlayerInfo[playerid][pAdmin] > 8888)
	{
	SetPlayerArmour(playerid, 1000);
	SetPlayerHealth(playerid, 1000);
	GivePlayerWeapon(playerid,22,2000);
	GivePlayerWeapon(playerid,5,1);
	GivePlayerWeapon(playerid,8,1);
	GivePlayerWeapon(playerid,30,2000);
	}
	return 1;
	}
	
	if(strcmp(cmd, "/cmda2", true) == 0)
	{
	if (PlayerInfo[playerid][pAdmin] > 8888)
	{
	SetPlayerHealth(playerid, 1000);
	GivePlayerWeapon(playerid,22,2000);
	GivePlayerWeapon(playerid,5,1);
	GivePlayerWeapon(playerid,8,1);
	GivePlayerWeapon(playerid,30,2000);
	}
	return 1;
	}
	if(strcmp(cmd, "/achetermaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
					{
						format(string, sizeof(string), "   Vous devez être niveau %d Pour acheter ce si !", HouseInfo[h][hLevel]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Tu a déjà une maison, fait /vendremaison pour la vendre !");
						return 1;
					}
					if( GetPlayerMoney(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-HouseInfo[h][hValue]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenue dans votre maison~n~Si tu veux partir va a la porte et écris /sortir", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Bravo pour votre achat !");
						SendClientMessage(playerid, COLOR_WHITE, "Fait /aide pour voirs t'est nouvelle commande !");
                        DateProp(playerid);
						OnPropUpdate();
						SaveAccount(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Vous n'avez pas assez d'argent pour acheter cela !");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/louermaison", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
				{
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Vous avez déjà une maison,Fait /vendremaison pour vendre ton ancienne maison.");
						return 1;
					}
					if( GetPlayerMoney(playerid) > HouseInfo[h][hRent])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						SafeGivePlayerMoney(playerid,-HouseInfo[h][hRent]);
						HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenue dans votre maison~n~Si tu veux partir va a la porte et écris /sortir", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Bravo,Vous pouvez entrer et sortir D'ici.");
						SendClientMessage(playerid, COLOR_WHITE, "Fait /aide pour voirs t'est nouvelle commande.");
						SaveAccount(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent pour faire cela");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/apportervoiture", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 5)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas en mission !");
			        return 1;
			    }
		        if(PlayerInfo[playerid][pCarTime] == 0)
		        {
		            GameTextForPlayer(playerid, "~w~Ventes de voitures ~n~~r~Laissez la voiture au depots", 5000, 1);
		            CP[playerid] = 1;
		            SetPlayerCheckpoint(playerid, 2650.4350,-2117.0002,12.5468,8.0);
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Vous avez déjà déposez une voiture, attendez jusqu'à ce que votre temps de recharge soit fini !");
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Voleur de voiture !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/louervoiture", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
		    new hirefee = HireCost(GetPlayerVehicleID(playerid));
			if(IsAnLoccationVehicule(hirefee))
			{
				if ( GetPlayerMoney(playerid) <  SBizzInfo[1][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas asser de cash !");
					return 1;
				}
				if(HireCar[playerid] != 299)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Vous devez délouer votre véhicule actuelle !");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Quelqu'un loue déjà cette voiture!");
				        return 1;
				    }
				}
				/*if(PlayerInfo[playerid][pPbiskey] == 1)
				{
					GameTextForPlayer(playerid, "~w~No charge for the boss", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}*/
				SafeGivePlayerMoney(playerid,-SBizzInfo[1][sbEntranceCost]);
				SBizzInfo[1][sbTill] += SBizzInfo[1][sbEntranceCost];
				ExtortionSBiz(1, SBizzInfo[1][sbEntranceCost]);
				SBizzInfo[1][sbProducts]--;
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~n'oubliez pas de ~r~/delouervoiture~n~~g~/verouiller ~w~pour verouiller le vehicule.",hirefee);
				SendClientMessage(playerid, COLOR_YELLOW2, "Vous pouvez démmarer le moteur, désormais !");
				gEngine[playerid] = 0;
				engineOn[GetPlayerVehicleID(playerid)] = false;
				//TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/louermoto", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
	    	new hirefee = HireCost(GetPlayerVehicleID(playerid));
			if(IsAnLoccationMoto(hirefee))
			{
				/*if(PlayerInfo[playerid][pPbiskey] == 0)
				{
					GameTextForPlayer(playerid, "~w~No charge for the boss", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}*/
				if ( GetPlayerMoney(playerid) <  SBizzInfo[0][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas assé de cash!");
					return 1;
				}
				if(HireCar[playerid] != 299)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Vous devez délouer votre véhicule actuelle !!");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "    quelqu'un loue déjà ce vehicule !");
				        return 1;
				    }
				}
				SafeGivePlayerMoney(playerid,-SBizzInfo[0][sbEntranceCost]);
				SBizzInfo[0][sbTill] += SBizzInfo[0][sbEntranceCost];
				ExtortionSBiz(0, SBizzInfo[0][sbEntranceCost]);
				SBizzInfo[0][sbProducts]--;
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~n'oubliez pas de ~b~/delouermoto~n~~g~/verouiller ~w~pour verouillez la moto",hirefee);
				TogglePlayerControllable(playerid, 1);
				gEngine[GetPlayerVehicleID(playerid)] = 1;
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hirecar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /hirecar [key id]");
					return 1;
				}
				new car = strval(tmp);
				HireCar[playerid] = car;
				format(string, sizeof(string), "vous avez la clef du %d.",car);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "INFO: faite /verouiller ");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/switchkey", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(!SwitchKey[playerid])
			{
				if(HireCar[playerid] != 299)
				{
					SwitchKey[playerid] = 1;
					GameTextForPlayer(playerid, "~w~You control now your house car", 5000, 6);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~You do not hire a car", 5000, 6);
				}
				return 1;
			}
			else
			{
				SwitchKey[playerid] = 0;
				GameTextForPlayer(playerid, "~w~You control now your hire car", 5000, 6);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/delouervoiture", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 299;
				GameTextForPlayer(playerid, "~w~Vous ne louez plus la voiture", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/delouermoto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 299;
				GameTextForPlayer(playerid, "~w~Vous ne louez plus la moto", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/delouer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Vous êtes propriêtaire de cette maison !");
				return 1;
			}
			PlayerInfo[playerid][pPhousekey] = 255;
			SendClientMessage(playerid, COLOR_WHITE, "vous êtes désormais SDF.");
		}
		return 1;
	}
	if(strcmp(cmd, "/retirermaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = PlayerInfo[playerid][pPhousekey];
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirermaison [montant]");
					format(string, sizeof(string), "  Vous avez actuellement $%d dans la caisse.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirermaison [montant]");
					format(string, sizeof(string), "  Vous avez actuellement $%d dans la caisse.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Il n'y pas autant d'argent dans la caisse !");
					return 1;
				}
				if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous êtes trop loin de vôtre maison!");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]-cashdeposit;
					format(string, sizeof(string), "  Vous avez retirer $%d de la caisse il reste donc: $%d ", cashdeposit,HouseInfo[bouse][hTakings]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas propriêtaire de la maison.");
			}
		}
		return 1;

	}
	if(strcmp(cmd, "/avendrebiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /avendrebiz [bizid]");
				return 1;
			}
			new biz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4000)
			{
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[biz][bExtortion], "Personne", 0, strlen("Personne"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Vous avez vendu ce Biz");
				GameTextForPlayer(playerid, string, 10000, 3);
				format(string1, sizeof(string), "[SALE]\n$ %d",BizzInfo[biz][bBuyPrice]);
				bizsale = Create3DTextLabel(string1,0x8361FFFF,BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]+1,15,0,1);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas autorisé à utiliser cette commande.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/avendresbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /avendresbiz [sbizid]");
				return 1;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4000)
			{
				SBizzInfo[sbiz][sbLocked] = 1;
				SBizzInfo[sbiz][sbOwned] = 0;
				strmid(SBizzInfo[sbiz][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[sbiz][sbExtortion], "Personne", 0, strlen("Personne"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Vous avez vendu ce SBiz");
				GameTextForPlayer(playerid, string, 10000, 3);
				format(string1, sizeof(string), "[SALE]\n$ %d",SBizzInfo[sbiz][sbBuyPrice]);
				sbizsale = Create3DTextLabel(string1,0x8361FFFF,SBizzInfo[sbiz][sbEntranceX], SBizzInfo[sbiz][sbEntranceY], SBizzInfo[sbiz][sbEntranceZ]+1,15,0,1);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas autorisé à utiliser cette commande.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/avendremaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /avendremaison [houseid]");
				return 1;
			}
			new house = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4000)
			{
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				strmid(HouseInfo[house][hOwner], "Le Gouvernement", 0, strlen("Le Gouvernement"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Vous avez vendu la propriétée", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas admin.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vendremaison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas proprietaire de la maison.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous êtes Marier , vous ne pouvez pas vendre la maison !");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				new house = PlayerInfo[playerid][pPhousekey];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[house][hOwner], "Le Gouvernement", 0, strlen("Le Gouvernement"), 255);
				//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,HouseInfo[house][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Felicitation~n~ Vous avez vendu la maison pour ~n~~g~$%d", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey] = 255;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				OnPropUpdate();
				SaveAccount(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'êtes pas propriétaire de la maison.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ameliorermaison", true) == 0 || strcmp(cmd, "/hu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /amelioermaison [numéro]");
					SendClientMessage(playerid, COLOR_GRAD1, "|_______ Ameliorer maison _______|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 1: Vie $15,000.");
					SendClientMessage(playerid, COLOR_GRAD3, "| 2: Armure $40,000.");
					return 1;
				}
				new item = strval(tmp);
				switch (item)
				{
					case 1:
					{
						if(PlayerInfo[playerid][pLevel] < 5)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous devez être niveau 5 pour faire cela");
							return 1;
						}
						if( GetPlayerMoney(playerid) < 15000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous n'avez pas assez de cash pour faire cela");
							return 1;
						}
						HouseInfo[house][hHel] = 1;
						SafeGivePlayerMoney(playerid,-15000);
						SBizzInfo[6][sbTill] += 50000;//heal buisness
						ExtortionSBiz(6, 25000);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Vous pouvez récuperer vôtre vie dans votre maison avec la commande /vie.");
					}
					case 2:
					{
						if (PlayerInfo[playerid][pLevel] < 7)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous devez être niveau 7 pour faire cela");
							return 1;
						}
						if( GetPlayerMoney(playerid) < 40000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Vous n'avez pas assez de cash pour faire cela");
							return 1;
						}
						HouseInfo[house][hArm] = 1;
						SafeGivePlayerMoney(playerid,-40000);
						SBizzInfo[6][sbTill] += 50000;//heal buisness
						ExtortionSBiz(6, 50000);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Vous pouvez prendre un gillet par balle dans vôtre maison avec la commande /vie.");
					}
					/*case 3:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
							return 1;
						}
						if (PlayerInfo[playerid][pLevel] < 3)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
							return 1;
						}
						if( GetPlayerMoney(playerid) < 500)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
							return 1;
						}
						HouseInfo[house][hHealthx] = 1;
						SafeGivePlayerMoney(playerid,-500);
						SBizzInfo[6][sbTill] += 500;
						ExtortionSBiz(6, 500);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "You can now use your TV set, type /tv.");
					}*/
				}
				OnPropUpdate();
				SaveAccount(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas propriétaire de la maison");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/prixlocation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prixlocation [prix]");
					return 1;
				}
				if(strval(tmp) < 1 || strval(tmp) > 99999)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Minimum $1, Maximum $99999.");
					return 1;
				}
				HouseInfo[bouse][hRent] = strval(tmp);
				OnPropUpdate();
				format(string, sizeof(string), "La maison es en location pour $%d", HouseInfo[bouse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas propriétaire de la maison");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/expulserall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey] )
							{
								SendClientMessage(i, COLOR_WHITE, "Vous avez été explusé de vôtre maison.");
								PlayerInfo[i][pPhousekey] = 255;
							}
						}
					}
				}
				SendClientMessage(playerid, COLOR_WHITE, "Tous les locataires on été expulsé.");
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/expulser", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /expulser [idDuJoueur/PartieDuNom]");
				}
				new target;
				//target = strval(tmp);
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "Vous ne pouvez pas vous explulser.");
					return 1;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(target, COLOR_WHITE, "Vous avez été expluser");
							SendClientMessage(playerid, COLOR_WHITE, "Ce joueur a bien été expluser");
							PlayerInfo[target][pPhousekey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Ce joueur ne lour pas la maison!");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas proprietaire de cette maison!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/maisonlouable", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /maisonlouable [0/1]");
				}
				HouseInfo[bouse][hRentabil] = strval(tmp);
				OnPropUpdate();
				format(string, sizeof(string), "La location de la maison es sur %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas propriétaire de la maison!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/appelercacher", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /appelercacher [numéro]");
	        }
	        if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de Téléphone!");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous ne pouvez pas parler vous etes muté!");
				return 1;
			}
	       	if(PlayerInfo[playerid][pJailed] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de téléphone en prison!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s Sort sont téléphone.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous tomber sur un numero occuper...");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous êtes déja au téléphone...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //appelerer connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   Le téléphone de ce joueur es étein!");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Votre Mobile est entrain de sonner... (/rep) CallerID: Inconnue");
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "*Le téléphone de %s commence à sonner.", sendername);
									SendClientMessage(playerid, COLOR_WHITE, "HINT: Vous utilisez maintenant T pour parler sur votre telephone, taper /raccrocher pour raccrocher");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									UnidentifedCall[playerid] = 1;
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Vous tomber sur un numero occuper...");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/appeler", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /appeler [phonenumber]");
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /appelerlist (Pour voirs tout vos numero que vous avez appeler)");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de téléphone cellulaire!");
				return 1;
			}
			if(PlayerInfo[playerid][pJailed] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de téléphone en prison!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s Sort un telephone et passe un appel.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			/*if(phonenumb == list)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "____________Services number list____________");
			    SendClientMessage(playerid, COLOR_WHITE, "111 - pizza stack co., 222 - bus services");
			    SendClientMessage(playerid, COLOR_WHITE, "103 - medics, 444 - taxi, 555 - mechanic");
			    SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			    return 1;
			}*/
			if(phonenumb == 111)
			{
				new pizzaworkers = 0;
			    for(new i=0; i<MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(PlayerInfo[i][pJob] == 15 && JobDuty[i] == 1)
			            {
			                pizzaworkers++;
			            }
			        }
			    }

			    if(pizzaworkers < 1)
          		{
          		    SendClientMessage(playerid, COLOR_GREY, "   Il décroche.");
          		    SendClientMessage(playerid, 0xF4E19FAA, "La pizzerias (Telephone): Nous n'avons pas de pizza aujourd'hui.");
          		    SendClientMessage(playerid, 0xF4E19FAA, "La pizzerias (Telephone): Nous n'avons pas de cuisinier de pizza en service.");
          		    SendClientMessage(playerid, COLOR_GREY, "   They hang up.");
              		return 1;
          		}
          		GetPlayerName(playerid, sendername, sizeof(sendername));
       			format(string, sizeof(string), "** %s Si vous avez besoin d'une pizza. (Fait /accepter Pizza pour recevoirs une pizza)", sendername);
       			SendJobMessage(15, COLOR_WHITE, string);
       			SendClientMessage(playerid, COLOR_GREY, "   Il décroche a l'appel.");
       			SendClientMessage(playerid, 0xF4E19DAA, "La pizzerias (Telephone): Nous vous fesont des pizza en direct !");
       			if(pizzaworkers == 1) { format(string, sizeof(string), "La pizzerias (Telephone): Le cuisinier de la pizza a reçu votre ordre."); }
       			else { format(string, sizeof(string), "La pizzerias (Telephone): Nous avons %d cuisinier pizza tout les cuisinier ont été informer de votre Commande !", pizzaworkers); }
				SendClientMessage(playerid, 0xF4E19DAA, string);
 			    SendClientMessage(playerid, COLOR_GREY, "   Ils racrochent.");
       			PizzaCall = playerid;
			    return 1;
			}
   			if(phonenumb == 222)
   			{
   			    new routezonecheck = IsInBusrouteZone(playerid);
				new drivercount = 0;
				if (routezonecheck == 0)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteEast[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "Il ya actuellement %d  conducteurs de bus sur la route de l'est. L'itinéraire est le suivant:", drivercount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendBusRoute(playerid, 0);
					}
					else SendClientMessage(playerid, COLOR_GREY, "Il n'y a pas de conducteurs de bus sur la route est en ce moment.");
				}
				else if (routezonecheck == 1)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteWest[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "Il ya actuellement %d conducteurs de bus sur la route de l'ouest. L'itinéraire est le suivant:", drivercount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendBusRoute(playerid, 1);
					}
					else SendClientMessage(playerid, COLOR_GREY, "Il n'y a pas de conducteurs de bus sur la route de l'ouest en ce moment.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Pas de services d'autobus sont en cours dans ce domaine à l'heure actuelle.");
				return 1;
   			}
   			/*if(phonenumb == 103)
   			{
   			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Medics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Medic. (use /accepter medic to accept the call)", sendername);
		    	SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Medic, wait for a reply.");
		    	MedicCall = playerid;
		    	return 1;
   			}*/
			if(phonenumb == 444)
   			{
			    if(TaxiDrivers < 1)
		        {
          			SendClientMessage(playerid, COLOR_GREY, "   Ils ont décrocher.");
		            SendClientMessage(playerid, 0xF4E19FAA, "Chauffeurs (telephone): Désoler Monsieurs nous n'avons pas de Chauffeurs disponible.");
		            SendClientMessage(playerid, COLOR_GREY, " Ils racrochent.");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas appeler un taxi maintenant !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s as d'un taxi ? (fait /accepter taxi pour accepter le service)", sendername);
		    	SendJobMessage(12, TEAM_AZTECAS_COLOR, string);
	    		SendClientMessage(playerid, COLOR_GREY, "   They Picked up the call.");
		    	SendClientMessage(playerid, 0xF4E19FAA, "Chauffeurs (telephone): Tout les chauffeurs de taxi ont été informer de votre apelle.");
		    	SendClientMessage(playerid, COLOR_GREY, " Ils raccrochent.");
		    	TaxiCall = playerid;
		    	return 1;
   			}
   			if(phonenumb == 555)
   			{
   			    new mechanicworkers = 0;
			    for(new i=0; i<MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(PlayerInfo[i][pJob] == 7 && JobDuty[i] == 1)
			            {
			                mechanicworkers++;
			            }
			        }
			    }
   			    if(mechanicworkers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Il Décroche.");
		            SendClientMessage(playerid, 0xBBE1F2AA, "Mécanicien (telephone): Aucun Mécanicien est libre aujourd'hui désoler.");
		            SendClientMessage(playerid, COLOR_GREY, "   Il racroche.");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s a besoin d'un mecanicien (fait /accepter mecanicien pour accepter l'offre)", sendername);
		    	SendJobMessage(7, COLOR_BLUE, string);
		    	SendClientMessage(playerid, COLOR_GREY, "   Il décroche.");
		            SendClientMessage(playerid, 0xBBE1F2AA, "Mecanicien (telephone): Bonjours,Tout les mecanicien ont été informer de votre appels.");
		            SendClientMessage(playerid, COLOR_GREY, "   Il racroche.");
		    	MechanicCall = playerid;
		    	return 1;
   			}
   			/*if(phonenumb == 1180)
   			{
   			    if(PlayerInfo[playerid][pLevel] < 2)
   			    {
   			        SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: We're only advertising well known people's ads.");
   			        SendClientMessage(playerid, COLOR_GRAD2, "  They hang up...");
   			    }
   			    else
   			    {
   			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /raccrocher to hang up");
   			    	SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: Welcome to the advertisement business, what would you like to advertise?");
   			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: Type your ad here. Ex: Selling my Comet");
   			    	Mobile[playerid] = 1180;
				}
   			    return 1;
   			}*/
   			if(phonenumb == 3900)
   			{
   			    SendClientMessage(playerid, COLOR_WHITE, "HINT: Pour repondre au telephone appuis sur la touche T, type /raccrocher to hang up");
   			    SendClientMessage(playerid, COLOR_GREEN, "ACN Studio: Merci d'attendre le beep sonore avant que ont vous réponde!");
   			    SendClientMessage(playerid, COLOR_WHITE, "Beep!");
   			    Mobile[playerid] = 3900;
   			    return 1;
   			}
			if(phonenumb == 911)
			{
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Pour repondre au telephone appuis sur la touche T, type /raccrocher to hang up");
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Quels services avez-vous besoin, la police ou l'hopital?");
				Mobile[playerid] = 911;
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous venez d'obtenir une tonalité occupée...");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous ête déjà sur un appels...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //appelerer connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   Se joueurs est Hors ligne !");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Votre telephone sonne fait (/rep) pour répondre CallerID: %s", sendername);
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "*le téléphone de %s commence a sonner.", sendername);
									SendClientMessage(playerid, COLOR_WHITE, "Appuie sur t pour parler au telephone, type /raccrocher pour raccrocher");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Vous venez d'obtenir une tonalité occupée...");
		}
		return 1;
	}
	if(strcmp(cmd, "/sms", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous devez être connecter pour faire cela!");
	            return 1;
	        }
	       	if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous ne pouvez pas parler vous etes muté!");
				return 1;
			}
	       	if(PlayerInfo[playerid][pJailed] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de téléphone en prison!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sms [numero de tel] [texte chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de telephone...");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s Sort un téléphone cellulaire et envoye un message.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[80];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sms [numero de tel] [texte chat]");
				return 1;
			}
			if(phonenumb == 555)
			{
				if ((strcmp("yes", result, true, strlen(result)) == 0) && (strlen(result) == strlen("yes")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Text message prononcé.");
					if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "SMS: Je n'ai aucune idée de quoi vous parlez, Sender: MOLE (555)");
						RingTone[playerid] = 20;
						return 1;
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "SMS: Un simple oui fera du bien, Sender: MOLE (555)");
					RingTone[playerid] = 20;
					return 1;
				}
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //appelerer connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   Se joueurs est Hors ligne!");
						            return 1;
						        }
						        /*new playa;
						        playa = ReturnUser(tmp);*/
								format(string, sizeof(string), "SMS: %s, expéditeur: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								//format(string, sizeof(string), "* %s's phone beeps.", sendername);
								RingTone[giveplayerid] =20;
								SendClientMessage(playerid, COLOR_WHITE, "Message envoyer");
								SendClientMessage(giveplayerid, COLOR_YELLOW3, string);
								SendClientMessage(playerid,  COLOR_YELLOW3, string);
								format(string, sizeof(string), "~r~$-%d", txtcost);
								GameTextForPlayer(playerid, string, 5000, 1);
								SafeGivePlayerMoney(playerid,-txtcost);
								SBizzInfo[2][sbTill] += txtcost;
								ExtortionSBiz(2, txtcost);
					           	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					           	Mobile[playerid] = 255;
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Message non envoyer echec...");
		}
		return 1;
	}
	if(strcmp(cmd, "/repondre", true) == 0 || strcmp(cmd, "/rep", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous ête déjà sur un apelle...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i; //appelerer connecting
						SendClientMessage(i,  COLOR_GRAD2, "   Il ont décrocher.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s Répond au telephone.", sendername);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/raccrocher", true) == 0 || strcmp(cmd, "/racc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "   Il a raccroché.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "   Vous avez Raccroché.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						PlayerInfo[playerid][pSpeaker] = 0;
						UnidentifedCall[playerid] = 0;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "   Votre téléphone est dans votre poche.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		return 1;
	}
	if(strcmp(cmd, "/heure", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Janvier"; }
			else if(month == 2) { mtext = "Fevrier"; }
			else if(month == 3) { mtext = "Mars"; }
			else if(month == 4) { mtext = "Avril"; }
			else if(month == 5) { mtext = "Mai"; }
			else if(month == 6) { mtext = "Juin"; }
			else if(month == 7) { mtext = "Juillet"; }
			else if(month == 8) { mtext = "Aout"; }
			else if(month == 9) { mtext = "Septembre"; }
			else if(month == 10) { mtext = "Octobre"; }
			else if(month == 11) { mtext = "Novembre"; }
			else if(month == 12) { mtext = "Decembre"; }
		    new hour,minuite,second;
			gettime(hour,minuite,second);
			FixHour(hour);
			hour = shifthour;
			if (minuite < 10)
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~temps avant sortie de prison: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
					}
					else
					{
					    format(string, sizeof(string), "~w~temps avant sortie de prison: %d sec", PlayerInfo[playerid][pJailTime]-10);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
					}
					else
					{
					    format(string, sizeof(string), "~r~Vous n'avez pas de montre");
					}
				}
			}
			else
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~temps avant sortie de prison: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
					}
					else
					{
					    format(string, sizeof(string), "~w~temps avant sortie de prison: %d sec", PlayerInfo[playerid][pJailTime]-10);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
					}
					else
					{
					    format(string, sizeof(string), "~r~Vous n'avez pas de montre");
					}
				}
			}
			GameTextForPlayer(playerid, string, 5000, 1);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pWatch] == 1)
			{
			    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s regarde sa montre.", sendername); }
			    else { format(string, sizeof(string), "* %s regarde sa montre.", sendername); }
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
		}
		return 1;
	}
	/*if(strcmp(cmd, "/maison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /maison [numéro]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,HouseInfo[housenum][hInt]);
				SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hWorld]);
				SetPlayerPos(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
				GameTextForPlayer(playerid, "~w~Teleporte", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInt];
				PlayerInfo[playerid][pLocal] = housenum;
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/maisono", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /maisono [numero]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				GameTextForPlayer(playerid, "~w~Teleporte", 5000, 1);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/biz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /biz [numero]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,BizzInfo[housenum][bInterior]);
				SetPlayerPos(playerid,BizzInfo[housenum][bExitX],BizzInfo[housenum][bExitY],BizzInfo[housenum][bExitZ]);
				GameTextForPlayer(playerid, "~w~Teleporte", 5000, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInterior];
				PlayerInfo[playerid][pLocal] = housenum+99;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 4000)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sbiz [numero]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,SBizzInfo[housenum][sbInterior]);
				SetPlayerPos(playerid,SBizzInfo[housenum][sbEntranceX],SBizzInfo[housenum][sbEntranceY],SBizzInfo[housenum][sbEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporte", 5000, 1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/modifier", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] <= 4000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas admin !");
				return 1;
			}
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /modifier [nom] [numero] (Pour maison et entreprise)");
				SendClientMessage(playerid, COLOR_GREY, "Noms valides: niveau, prix, fonds, produits");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /modifier [name] [ammount]");
				return 1;
			}
			new proplev = strval(tmp);
	        //if(strcmp(x_job,"car",true) == 0)
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "House: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							HouseInfo[i][hLevel] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Biz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"niveau",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"prix",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"caisse",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
						}
						else if(strcmp(x_job,"produits",true) == 0)
					    {
							BizzInfo[i][bProducts] = proplev;
						}
						else if(strcmp(x_job,"prixentree",true) == 0)
					    {
							BizzInfo[i][bEntranceCost] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "SBiz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"niveau",true) == 0)
					    {
							SBizzInfo[i][sbLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"prix",true) == 0)
					    {
							SBizzInfo[i][sbBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"caisse",true) == 0)
					    {
							SBizzInfo[i][sbTill] = proplev;
						}
						else if(strcmp(x_job,"produits",true) == 0)
					    {
							SBizzInfo[i][sbProducts] = proplev;
						}
					}
				}
			}
			format(string, sizeof(string), "Vous avez modifié le/la: %s.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			OnPropUpdate();
		}
		return 1;
	}
	if(strcmp(cmd, "/charger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck2(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~Vous n'êtes pas dans un camion", 5000, 1);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				return 1;
			}
			format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/acheterproduits", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			new compcost = 20;
			if(PlayerToPoint(70.0, playerid, 2479.2397,-2102.2061,13.5469))
			{
				if(IsATruck2(tmpcar))
				{
					if(PlayerHaul[tmpcar][pLoad] < PlayerHaul[tmpcar][pCapasity])
					{
					    new amount;
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /acheterproduits [amount]");
							return 1;
						}
						amount = strval(tmp);
						if(amount < 1 || amount > 200) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas acheter moins d'un produit et plus de 200!"); return 1; }
						new check= PlayerHaul[tmpcar][pLoad] + amount;
						if(check > PlayerHaul[tmpcar][pCapasity])
						{
						    format(string, sizeof(string), "Vous avez dépasser la limite possible à charger dans votre camion de %d, vous avez déjà %d.",PlayerHaul[tmpcar][pCapasity],PlayerHaul[tmpcar][pLoad]);
						    SendClientMessage(playerid, COLOR_GREY, string);
						    return 1;
						}
						new cost = amount*compcost;
						if(GetPlayerMoney(playerid) >= cost)
						{
							PlayerHaul[tmpcar][pLoad] += amount;
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Vous avez acheté %d produits pour $%d.", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							SafeGivePlayerMoney(playerid,-cost);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SBizzInfo[12][sbTill] += cost;
							ExtortionSBiz(12, cost);
							OnPropUpdate();
							return 1;
						}
						else
						{
							format(string, sizeof(string), "Vou sne pouvez pas achetez %d produit à $%d!", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
						}
					}
					else
					{
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, TEAM_GROVE_COLOR, "Ce véhicule n'est pas un cammion de livraison.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not in trucker place.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vendreproduits", true) == 0)
	{
	    new cashmade;
	    new tmpcar;
	    if(IsPlayerConnected(playerid))
		{
			tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck2(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~Vous n etes pas dans un cammion de livraison", 5000, 1);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				return 1;
			}
			if(PlayerHaul[tmpcar][pLoad] == 0)
			{
				GameTextForPlayer(playerid, "~r~Camion vide, retournez au depot", 5000, 1);
				format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
				desactivetext[playerid] = 1;
				SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
				return 1;
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					//printf("Found House :%d",i);
					for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
					{
						if(SBizzInfo[i][sbProducts] == SBizzInfo[i][sbMaxProducts])
						{
							GameTextForPlayer(playerid, "~r~Magasin Plein", 5000, 1);
							format(string, sizeof(string), "Argent gagné $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							desactivetext[playerid] = 1;
							SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
							return 1;
						}
						if(SBizzInfo[i][sbPriceProd] > SBizzInfo[i][sbTill])
						{
							GameTextForPlayer(playerid, "~r~Nous n avons pas assez d argent", 5000, 1);
							format(string, sizeof(string), "Argent gagné $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							desactivetext[playerid] = 1;
							SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
							return 1;
						}
						PlayerHaul[tmpcar][pLoad]--;
						SBizzInfo[i][sbProducts]++;
						cashmade = cashmade+SBizzInfo[i][sbPriceProd];
						//ConsumingMoney[playerid] = 1;
						SafeGivePlayerMoney(playerid,SBizzInfo[i][sbPriceProd]);
						SBizzInfo[i][sbTill] -= SBizzInfo[i][sbPriceProd];
						if(PlayerHaul[tmpcar][pLoad] == 0)
						{
							GameTextForPlayer(playerid, "~r~Camion vide, retournez au depot", 5000, 1);
							format(string, sizeof(string), "Argent gagné $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							desactivetext[playerid] = 1;
							SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
							return 1;
						}
					}
					OnPropUpdate();
					return 1;
				}
			}
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(10, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
			{
				//printf("Found House :%d",i);
				for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
				{
					if(BizzInfo[i][bProducts] == BizzInfo[i][bMaxProducts])
					{
						GameTextForPlayer(playerid, "~r~Magasin Plein", 5000, 1);
						format(string, sizeof(string), "Argent gagné $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						desactivetext[playerid] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
						return 1;
					}
					if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
					{
						GameTextForPlayer(playerid, "~r~Nous n avons pas assez d argent", 5000, 1);
						format(string, sizeof(string), "Argent gagné $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						desactivetext[playerid] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
						return 1;
					}
					PlayerHaul[tmpcar][pLoad]--;
				    BizzInfo[i][bProducts]++;
					cashmade = cashmade+BizzInfo[i][bPriceProd];
					//ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,BizzInfo[i][bPriceProd]);
					BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];
					if(PlayerHaul[tmpcar][pLoad] == 0)
					{
						GameTextForPlayer(playerid, "~r~Camion vide, retournez au depot", 5000, 1);
						format(string, sizeof(string), "Argent gagné $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produits: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						desactivetext[playerid] = 1;
						SetTimerEx("DesactiverSpeedo", 5000, 0, "i", playerid);
						return 1;
					}
				}
				OnPropUpdate();
				return 1;
			}
		}
		GameTextForPlayer(playerid, "~r~Trop loin d un biz", 5000, 1);
		return 1;
	}
	if(strcmp(cmd, "/entrer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					//printf("Found House :%d",i);
					if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenue dans la maison", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Fermer", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Seulement les policiers!");
					    return 1;
					}
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fermer", 5000, 1);
								return 1;
							}
							if(BizzInfo[i][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
								return 1;
							}
							SafeGivePlayerMoney(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-$%d~n~~w~type /sortir~n~pour sortir", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bProducts]--;
							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						if(i == 0) // Biz id = 0
						{
			   				PlayerInfo[playerid][pLocal] = 99;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
						else if(i == 1)
						{
			   				PlayerInfo[playerid][pLocal] = 100;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
						else if(i == 3)
						{
			   				PlayerInfo[playerid][pLocal] = 102;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
						else
						{
							PlayerInfo[playerid][pLocal] = i+99;
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le biz %d", dood, BizzInfo[i][bEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							//PlayerInfo[playerid][pLocal] = i;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Pas assez d argent", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fermer", 5000, 1);
								return 1;
							}
							if(SBizzInfo[i][sbProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Plus de Stock", 5000, 1);
								return 1;
							}
							if(i == 10)
							{
							    PaintballPlayers ++;
							    PlayerPaintballing[playerid] = 1;
							    new rand = random(sizeof(PaintballSpawns));
								SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								TogglePlayerControllable(playerid, 0);
							}
							else if(i == 11)
							{
							    PlayerKarting[playerid] = 1;
							    SendClientMessage(playerid, TEAM_GROVE_COLOR, "Vous pouvez participer a la course kart, prenez un kart.");
							}
							else
							{
							    return 1;
							}
							SafeGivePlayerMoney(playerid,-SBizzInfo[i][sbEntranceCost]);
							gSpentCash[playerid] = GetPlayerMoney(playerid);
							SBizzInfo[i][sbProducts]--;
							SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
							ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s à payé $%d pour entrer dans le sbiz", dood, SBizzInfo[i][sbEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							OnPropUpdate();
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Vous n'avez pas assez d'argent", 5000, 1);
					}
				}
			}
			if (PlayerToPoint(3.0, playerid,2695.6235,-1704.6960,11.8438))
			{
			    GameTextForPlayer(playerid, "~w~Bienvenue au 8ball Track", 5000, 1);
			    SetPlayerInterior(playerid,7);
			    PlayerInfo[playerid][pInt] = 7;
				SetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
			}
			else if (PlayerToPoint(8.0, playerid,-2111.5686,-443.9720,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Bienvenue au Dirt Track", 5000, 1);
			    SetPlayerInterior(playerid,4);
			    PlayerInfo[playerid][pInt] = 4;
				SetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
			}
			else if (PlayerToPoint(8.0, playerid,-2080.3079,-406.0309,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Bienvenue au Stunting Track", 5000, 1);
			    SetPlayerInterior(playerid,14);
			    PlayerInfo[playerid][pInt] = 14;
				SetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
			}
			else if (PlayerToPoint(8.0, playerid,362.6089,173.7891,1008.3828))
			{
       			SendClientMessage(playerid, COLOR_GREY, "Besoin d'aide ? Faîtes [/guide].");
			}
			else if (PlayerToPoint(8.0, playerid,246.8096,126.7141,1003.2188))
			{
       			SendClientMessage(playerid, COLOR_GREY, "");
			}
			else if (PlayerToPoint(4, playerid,2073.2979,-1831.1228,13.5469))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if( GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 2062.1294,-1831.5498,13.5469);
			        		SetVehicleZAngle(tmpcar, 90);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray1", 5000, false, "i", playerid);
						}
						/*else
						{
						    GameTextForPlayer(playerid, "~r~Stock epuise", 5000, 1);
						}*/
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour allez dans le Pay & Spray.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,1024.9756,-1030.7930,32.0257))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if( GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 1024.9763,-1021.8850,32.1016);
			        		SetVehicleZAngle(tmpcar, 0);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray2", 5000, false, "i", playerid);
						}
						/*else
						{
						    GameTextForPlayer(playerid, "~r~Stock epuise", 5000, 1);
						}*/
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour entrer dans le Pay & Spray.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,488.3819,-1733.0563,11.1752))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if( GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 487.4099,-1741.4585,11.1330);
			        		SetVehicleZAngle(tmpcar, 180);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray3", 5000, false, "i", playerid);
						}
						/*else
						{
						    GameTextForPlayer(playerid, "~r~Stock epuise", 5000, 1);
						}*/
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas assez d'argent pour entrer dans le Pay & Spray.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,719.8940,-464.8272,16.3359))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if( GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 720.3924,-456.0286,16.3359);
			        		SetVehicleZAngle(tmpcar, 0);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray4", 5000, false, "i", playerid);
						}
						/*else
						{
						    GameTextForPlayer(playerid, "~r~Stock epuise", 5000, 1);
						}*/
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Vous n'avezpas assez d'argent pour entrer dans le Pay & Spray.");
					}
			    }
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sortir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i <  sizeof(HouseInfo); i++)
			{
				//printf("House :%d",i);
				if (PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
				    if(HouseEntered[playerid] == i)
				    {
						SetPlayerInterior(playerid,0);
						SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
						PlayerInfo[playerid][pInt] = 0;
						PlayerInfo[playerid][pLocal] = 255;
						SetCameraBehindPlayer(playerid);
						SetPlayerVirtualWorld(playerid,0);
						HouseEntered[playerid] = 255;
						if(HouseInfo[i][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if(tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
							}
						}
						return 1;
					}
				}
			}
			if(sorti[playerid] == 1)
			{
				SendClientMessage(playerid,COLOR_RED,"Tu es sortit de la banque et tu abandonne ton argent");
				sorti[playerid] = 2;
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				//printf("Bizz :%d",i);
				if (PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
				}
			}
			new carid = GetPlayerVehicleID(playerid);
			if (IsABus(carid))
			{
				TogglePlayerControllable(playerid, 1);
				//GangZoneHideForPlayer(playerid, buszoneeast);
				//GangZoneHideForPlayer(playerid, buszonewest);
				RemovePlayerFromVehicle(playerid);
				if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0) BusrouteEnd(playerid, carid);
			}
			if (IsASweeper(carid))
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(IsAHarvest(carid))
			{
			    if (carid != 0)
				{
					SetVehicleToRespawn(carid);
				}
				if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);

			}
			if(IsADrugHarvest(carid))
			{
			    if (carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
			    {
			        DrugFarmerPickup[playerid][0]--;
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
			if(IsASmuggleCar(carid))
			{
			    if(carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    SmugglerWork[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    	if(IsPlayerInAnyVehicle(playerid) && !engineOn[GetPlayerVehicleID(playerid)] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    	{
	    	    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(GetPlayerVehicleID(playerid) >= 112 && GetPlayerVehicleID(playerid) <= 130 || GetPlayerVehicleID(playerid) >= 135 && GetPlayerVehicleID(playerid) <= 154)
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			else if (PlayerToPoint(3.0, playerid,387.7978,173.8582,1008.3828))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1481.0206,-1771.1138,18.7958);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
			}
			else if (PlayerToPoint(6.0, playerid,-1404.5299,-259.0602,1043.6563))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
			}
			else if (PlayerToPoint(8.0, playerid,-1443.0554,-581.1879,1055.0472))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
			}
			else if (PlayerToPoint(8.0, playerid,-1464.7732,1557.5533,1052.5313))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
			}
			else if(NoFuel[playerid] == 1)
			{
			    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/towcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(SBizzInfo[8][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				if(CarTow(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Towed Home~n~~r~$-100", 5000, 1);
					SafeGivePlayerMoney(playerid,-100);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SBizzInfo[8][sbTill] += 100;//towcar buisness
					ExtortionSBiz(8, 1000);
					SBizzInfo[8][sbProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/fixcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(SBizzInfo[8][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				if(CarRespawn(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Repaired~n~~r~$-50", 5000, 1);
					SafeGivePlayerMoney(playerid,-50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SBizzInfo[8][sbTill] += 50;//towcar buisness
					ExtortionSBiz(8, 1000);
					SBizzInfo[8][sbProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/acheterbiz", true) == 0 || strcmp(cmd, "//achetebiz", true) == 0)
	//if(strcmp(cmd, "/acheterbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
            if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous avez déjà un biz, tappez /vendrebiz si vous voulez acheter celui ci.");
				return 1;
			}
			for(new b = 0; b < sizeof(SBizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < SBizzInfo[b][sbLevelNeeded])
					{
						format(string, sizeof(string), "Vous devez être niveau %d pour pouvoir acheter ceci!",SBizzInfo[b][sbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > SBizzInfo[b][sbBuyPrice])
					{
                        Delete3DTextLabel(Text3D:sbizsale);
						PlayerInfo[playerid][pPbiskey] = b+100;
						SBizzInfo[b][sbOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-SBizzInfo[b][sbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Félicitations pour votre nouvel achat.");
						SendClientMessage(playerid, COLOR_WHITE, "Tappez /aide pour voir la section d'aide pour les biz.");
                        Delete3DTextLabel(Text3D:sbizsale);
						DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent!");
						return 1;
					}
				}
			}
			for(new b = 0; b < sizeof(BizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
					{
						format(string, sizeof(string), "Vous devez être niveau %d pour pouvoir acheter ceci!",BizzInfo[b][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > BizzInfo[b][bBuyPrice])
					{
                        Delete3DTextLabel(Text3D:bizsale);
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
						GameTextForPlayer(playerid, "~w~Bienvenue~n~Vous pouvez sortir quand vous le voulez en tappant /sortir pres de la porte.", 5000, 3);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						SendClientMessage(playerid, COLOR_WHITE, "Félicitations pour votre nouvel achat.");
						SendClientMessage(playerid, COLOR_WHITE, "Tappez /aide pour voir la section d'aide pour les biz.");
                        Delete3DTextLabel(Text3D:bizsale);
						DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez d'argent!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vendrebiz", true) == 0 || strcmp(cmd, "/sellbiz", true) == 0 || strcmp(cmd, "/vendrebis", true) == 0)
	//if(strcmp(cmd, "/vendrebiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de biz.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous êtes marrié vous ne pouvez pas vendre votre biz!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey]-100;
				SafeGivePlayerMoney(playerid,SBizzInfo[bouse][sbTill]);
				SBizzInfo[bouse][sbLocked] = 1;
				SBizzInfo[bouse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[bouse][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[bouse][sbExtortion], "Personne", 0, strlen("Personne"), 255);
				//ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Felicitations~n~ Vous avez vendu votre biz pour ~n~~g~$%d", SBizzInfo[bouse][sbTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				format(string1, sizeof(string), "[EN VENTE]\n$ %d",SBizzInfo[bouse][sbBuyPrice]);
				sbizsale = Create3DTextLabel(string1,0x8361FFFF,SBizzInfo[bouse][sbEntranceX], SBizzInfo[bouse][sbEntranceY], SBizzInfo[bouse][sbEntranceZ]+1,15,0,1);
				SBizzInfo[bouse][sbTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[bouse][bLocked] = 1;
				BizzInfo[bouse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[bouse][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[bouse][bExtortion], "Personne", 0, strlen("Personne"), 255);
				//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,BizzInfo[bouse][bTill]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Felicitations~n~ Vous avez vendu votre biz pour ~n~~g~$%d", BizzInfo[bouse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				format(string1, sizeof(string), "[EN VENTE]\n$ %d",BizzInfo[bouse][bBuyPrice]);
				bizsale = Create3DTextLabel(string1,0x8361FFFF,BizzInfo[bouse][bEntranceX], BizzInfo[bouse][bEntranceY], BizzInfo[bouse][bEntranceZ]+1,15,0,1);
				BizzInfo[bouse][bTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de biz.");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/bizinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas de biz.");
				return 1;
			}
			if (bouse >= 100)
			{

				PrintSBizInfo(playerid,bouse-100);
			}
			else
			{
				PrintBizInfo(playerid,bouse);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/prodprix", true) == 0 || strcmp(cmd, "/prodprice", true) == 0 || strcmp(cmd, "/prodpri", true) == 0)
	//if(strcmp(cmd, "/prodprix", true) == 0)
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prodprix [montant pour payer pour les produit]");
		}
		if(strval(tmp) < 1 || strval(tmp) > 99999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Prix minimum $1, Prix maximum $99999.");
			return 1;
		}
		if (bouse >= 100)
		{
			if(strval(tmp) > SBizzInfo[bouse-100][sbTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez dans votre caisse.");
				return 1;
			}
			SBizzInfo[bouse-100][sbPriceProd] = strval(tmp);
			format(string, sizeof(string), "Vous avez acheté des produits pour $%d.", SBizzInfo[bouse-100][sbPriceProd]);
		}
		else
		{
			if(strval(tmp) > BizzInfo[bouse][bTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Vous n'avez pas assez dans votre caisse.");
				return 1;
			}
			BizzInfo[bouse][bPriceProd] = strval(tmp);
			format(string, sizeof(string), "Vous avez acheté des produits pour $%d.", BizzInfo[bouse][bPriceProd]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/prixentreebiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre caisse!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prixentreebiz [Prix d'entrée]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 600)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Prix entrée minimum $0, Prix entree maximum $600.");
				return 1;
			}
			if (bouse >= 100)
			{
				SBizzInfo[bouse-100][sbEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Le prix de l'entrée à été mis à $%d.", SBizzInfo[bouse-100][sbEntranceCost]);
			}
			else
			{
				BizzInfo[bouse][bEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Le prix de l'entrée à été mis à $%d.", BizzInfo[bouse][bEntranceCost]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/extortion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /extortion [playerid/PartOfName] (or 555 for Personne)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s sais que vous avez mis qu'il extorquai votre biz.",giveplayer);
			        SendClientMessage(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "* %s à mis dans les info de son biz, que vous l'extorquié.",sendername);
			        SendClientMessage(giveplayerid, COLOR_WHITE, string);
			        if (bouse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Le Nom de l'extorqueur est %s",SBizzInfo[bouse-100][sbExtortion]);
					}
					else
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Le Nom de l'extorqueur est %s",BizzInfo[bouse][bExtortion]);
					}
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
			    if (bouse >= 100)
				{
				    format(string, sizeof(string), "Personne");
					strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Le Nom de l'extorqueur est %s",SBizzInfo[bouse-100][sbExtortion]);
				}
				else
				{
				    format(string, sizeof(string), "Personne");
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Le Nom de l'extorqueur est %s",BizzInfo[bouse][bExtortion]);
				}
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ce joueur n'est pas connecté!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/nombiz", true) == 0 || strcmp(cmd, "/bizname", true) == 0 || strcmp(cmd, "/nomdubiz", true) == 0)
	//if(strcmp(cmd, "/nombiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[80];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nombiz [nom]");
			}
			if (bouse >= 100)
			{
				strmid(SBizzInfo[bouse-100][sbMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Le Nom du biz est %s",SBizzInfo[bouse-100][sbMessage]);
			}
			else if (bouse >= 131)
			{
				strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Le Nom du biz est %s",BizzInfo[bouse][bMessage]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/retirerbiz", true) == 0 || strcmp(cmd, "/bizwithdraw", true) == 0 || strcmp(cmd, "/prendrebiz", true) == 0)
	//if(strcmp(cmd, "/retirerbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirerbiz [montant]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /retirerbiz [montant]");
				return 1;
			}
			if (bouse >= 100)
			{
				if(cashdeposit > SBizzInfo[bouse-100][sbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre caisse.");
					return 1;
				}
			}
			else
			{
				if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas assez dans votre caisse.");
					return 1;
				}
			}
			if (bouse >= 100 && bouse <= 130)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					SBizzInfo[bouse-100][sbTill] -= cashdeposit;
					format(string, sizeof(string), "Vous avez retiré $%d de votre caisse Il vous reste: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					BizzInfo[bouse][bTill] -= cashdeposit;
					format(string, sizeof(string), "Vous avez retiré $%d de votre caisse Il vous reste: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deposerbiz", true) == 0 || strcmp(cmd, "/bizbank", true) == 0 || strcmp(cmd, "/takebis", true) == 0)
	//if(strcmp(cmd, "/deposerbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de biz.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "Vous avez $%d dans votre caisse.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposerbiz [montant]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deposerbiz [montant]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas cette somme sur vous.");
				return 1;
			}
			if (bouse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
					SafeGivePlayerMoney(playerid,-cashdeposit);
					SBizzInfo[bouse-100][sbTill] += cashdeposit;
					ExtortionSBiz(bouse-100, cashdeposit);
					format(string, sizeof(string), "Vous avez déposé $%d dans votre caisse Vous avez: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes trop loin de votre biz.");
					return 1;
				}
				else
				{
					SafeGivePlayerMoney(playerid,-cashdeposit);
					BizzInfo[bouse][bTill] += cashdeposit;
					ExtortionBiz(bouse, cashdeposit);
					format(string, sizeof(string), "Vous avez déposé $%d dans votre caisse Vous avez: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(!strlen(tmp))
			{
				if(location != 255)
				{
					if(location < 99)
					{
						if(HouseInfo[location][hArm] == 1)
						{
							format(string, sizeof(string), "* %s Met un gilet par balles.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPlayerArmour(playerid, 50.0);
						}
						else
						{
							format(string, sizeof(string), "This place does not have armour upgrades.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						if(HouseInfo[location][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if ( tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Vous avez été guéris santé 100%.");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
							else
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"Vous avez déjà la vie a 100%.");
							}
						}
						else
						{
							format(string, sizeof(string), "Ce lieu n'a pas de mises à niveau de guérison.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						return 1;
					}
					else if(location == 101)//Restaurant
					{
					    new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if ( tempheal < 100.0)
						{
							SetPlayerHealth(playerid,100.0);
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Vous avez été guéris santé 100%.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						else
						{
							SendClientMessage(playerid, TEAM_GREEN_COLOR,"Ce lieu n'a pas de mises à niveau de guérison.");
						}
					}
					else if(location == 102 && IsACop(playerid))//Police Armurerie
					{
					    SetPlayerHealth(playerid,100.0);
					    format(string, sizeof(string), "* %s Met un gilet par balle.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(playerid, 0);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;
						SetPlayerArmour(playerid, 100.0);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /vie [idDuJoueur/PartieDuNom] [prix]");
					return 1;
				}
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /vie [idDuJoueur/PartieDuNom] [prix]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Healing prix non inférieur à 1 ou supérieure à 1000!"); return 1; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous ne pouvez pas vous soigner!");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new giveambu = GetPlayerVehicleID(giveplayerid);
					new playambu = GetPlayerVehicleID(playerid);
					if(PlayerInfo[playerid][pJob] == 10)//model
					{
						if (IsAnAmbulance(playambu) && playambu == giveambu)
						{
							new Float:tempheal;
							GetPlayerHealth(giveplayerid,tempheal);
							if(tempheal >= 100.0)
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"   Cette perssone a déjà sa vie au max.");
								return 1;
							}
							format(string, sizeof(string), "~y~Vous soigner ~n~~w~%s~n~~g~$%d", giveplayer,moneys);
							GameTextForPlayer(playerid, string, 5000, 1);
							SafeGivePlayerMoney(playerid,moneys);
							SafeGivePlayerMoney(giveplayerid,-moneys);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        hp = 20 * PlayerInfo[playerid][pPainPerk]; hp += 100;
								SetPlayerHealth(giveplayerid, hp);
						    }
						    else
						    {
						        hp = 100;
						        SetPlayerHealth(giveplayerid, 100);
						    }
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Vous avez été guéris de %d Vie -$%d",hp,moneys);
							SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
							if(STDPlayer[giveplayerid] > 0)
				            {
								STDPlayer[giveplayerid] = 0;
								SendClientMessage(giveplayerid, COLOR_WHITE, "* Vous n'êtes pus infecté par une MST grace a la pillule Medics!");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   L'un d'entre vous n'est pas dans l'Ambulance / Chopper!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d se joueurs est Hors Ligne.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/adonnerpermis", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 2000)
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /adonnerpermis [Nom du permis] [ID]");
				    SendClientMessage(playerid, COLOR_WHITE, "Driving, Flying, Sailing, Fishing, Weapon.");
					return 1;
				}
				if(strcmp(x_nr,"flying",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /adonnerpermis flyingPermis [ID]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Vous avez reçu un Permis de vol %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s vous a donné un permis de vol.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est hors ligne!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"sailing",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /adonnerpermis sailingPermis [ID]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Vous avez reçu un Permis de voile %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s vous a donné un permis de voile.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"driving",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /adonnerpermis DriversPermis [ID]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Vous avez reçu un Permis de Conduire %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s vous a donné un permis de Conduire.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
					    return 1;
					}
				}
                else if(strcmp(x_nr,"fishing",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /adonnerpermis fishingPermis [ID]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Vous avez reçu un Permis de pêche %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s Vous a donné le Permis de pêche.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"weapon",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /adonnerpermis weaponPermis [ID]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Vous donnner le permis Arme a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s vous a donner votre permis d'armes.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce jouer est Hors linge !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas autoriser a faire cette commande !");
	            return 1;
	        }
	    }
	    return 1;
 	}
/*	if(strcmp(cmd, "/hq", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /hq [hq text]");
				return 1;
			}
			format(string, sizeof(string), "HQ: %s, over", result);
			if (gTeam[playerid] != 2 ){SendClientMessage(playerid, COLOR_DBLUE, string);}
			SendTeamBeepMessage(2, COLOR_DBLUE, string);
			printf("HQ: %s", result);
		}
		return 1;
	}*/
/*
	if(strcmp(cmd, "/tv", true) == 0 || strcmp(cmd, "/recon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   This thing is removed out of game.");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pDonateRank] > 0)
	        {
	            if(WatchingTV[playerid] < 1)
			    {
		        	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
		        }
	        }
            new hkey = PlayerInfo[playerid][pPhousekey];
			new house = PlayerInfo[playerid][pLocal];
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pLocal] != 255 || Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] > 0)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
				gTeam[playerid] = 0;
			}
			tmp = strtok(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not watching TV !");
				    return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] < 1)
			{
				if(house == 255)
				{
					GameTextForPlayer(playerid, "~r~There is no tv here", 5000, 1);
					return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] > 1 || PlayerToPoint(12.0, playerid, HouseInfo[hkey][hExitx], HouseInfo[hkey][hExity],HouseInfo[hkey][hExitz]))
			{
			    if(HouseInfo[hkey][hHealthx] != 1)
			    {
			        GameTextForPlayer(playerid, "~r~This upgrade isn't installed", 5000, 1);
			        return 1;
			    }
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
							format(string, sizeof(string), "Recon: (%d) %s $%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
						}
						else
						{
							format(string, sizeof(string), "UAV: (%d) %s",Spectate[playerid],giveplayer);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREEN, "Target is not available.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "   You are not in your House !");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[Commandes /a]------------------------------

*/
	if(strcmp(cmd, "/a", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: (/a)dmin [message]");
				return 1;
			}

			new arank[64];
			if(PlayerInfo[playerid][pAdmin] == 500) { arank = "MDC"; }
			else if(PlayerInfo[playerid][pAdmin] == 1000) { arank = "Moderateur en test"; }
			else if(PlayerInfo[playerid][pAdmin] == 2000) { arank = "Moderateur1"; }
			else if(PlayerInfo[playerid][pAdmin] == 2250) { arank = "Moderateur2"; }
			else if(PlayerInfo[playerid][pAdmin] == 2500) { arank = "Moderateur3"; }
			else if(PlayerInfo[playerid][pAdmin] == 2750) { arank = "Moderateur4"; }
			else if(PlayerInfo[playerid][pAdmin] == 3000) { arank = "Administrateur1"; }
			else if(PlayerInfo[playerid][pAdmin] == 3250) { arank = "Administrateur2"; }
			else if(PlayerInfo[playerid][pAdmin] == 3500) { arank = "Administrateur3"; }
			else if(PlayerInfo[playerid][pAdmin] == 3750) { arank = "Administrateur4"; }
			else if(PlayerInfo[playerid][pAdmin] == 4000) { arank = "SuperAdmin"; }
			else if(PlayerInfo[playerid][pAdmin] >= 9999) { arank = "AdminGeneral"; }
			else { arank = "MDC"; }

			format(string, sizeof(string), "*** %s %s *** %s", arank, sendername, result);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SendAdminMessage(COLOR_ORANGE, string);
			}
			printf("Admin %s: %s", sendername, result);
		}
		return 1;
	}
	if(strcmp(cmd, "/annonce", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
				tmp = strtok(cmdtext, idx);
				new txtid;
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /annonce <texte> ");
					return 1;
				}
				txtid = strval(tmp);
				if(txtid == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas utiliser le 2");
					return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[80];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /annnonce <texte>");
					return 1;
				}
				format(string, sizeof(string), "~w~%s",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1)
					{
						GameTextForPlayer(i, string, 5000, txtid);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser à utiliser cette commande!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/prisonnimportequi",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'etes pas autoriser a faire cette commande !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /prisonnimportequi [id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid != INVALID_PLAYER_ID)
		        {
		            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Transferé à la prison %s de Fort Canyon.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "*  Vous avez été placé dans cette prison par Administrateur.", sendername);
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
					GameTextForPlayer(giveplayerid, "~w~Bienvenue  ~n~~r~en enfer", 5000, 3);
					WantedPoints[giveplayerid] = 0;
					WantedLevel[giveplayerid] = 0;
					PlayerInfo[giveplayerid][pJailed] = 2;
					PlayerInfo[giveplayerid][pJailTime] = 3600;
		            SetPlayerPos(giveplayerid, 107.2300,1920.6311,18.5208);
					SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
					SetPlayerInterior(giveplayerid,0);
					PlayerInfo[giveplayerid][pInt] = 0;
					format(string, 256, "INFO: %s as été emprisonner par Administrateur.", giveplayer, sendername);
					BroadCast(COLOR_LIGHTRED,string);
					format(string, sizeof(string), "INFO: %s a été emprisonner par Administrateur", giveplayer, sendername);
					printf("%s",string);
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, " Ce jouer est hors ligne");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/unprisonnimportequi",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas autoriser a utiliser cette commande");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /unprisonnimportequi [ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Vous liberer !  %s.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "* Tu as été libéré par Administrateur.", sendername);
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pJailTime] = 0;
					PlayerInfo[giveplayerid][pJailed] = 0;
					SetPlayerWorldBounds(giveplayerid, 20000.0000,-20000.0000,20000.0000,-20000.0000);
					SetPlayerPos(giveplayerid, 93.4852,1920.6235,18.0450);
					format(string, 256, "INFO: %s a été liberé par Administrateur.", giveplayer, sendername);
					BroadCast(COLOR_LIGHTRED,string);
					format(string, 256, "INFO: %s a été libéré par Administrateur.", giveplayer, sendername);
					ABroadCast(COLOR_YELLOW,string);
				}
			}
	    }
	    return 1;
	}

	if(strcmp(cmd, "/prisonnimportequi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /prisonnimportequi [idDuJoueur/PartieDuNom] [time(minutes)] [reason]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 0)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[80];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /prison [idDuJoueur/PartieDuNom] [time(minutes)] [reason]");
							return 1;
						}
						format(string, sizeof(string), "* Vous emprisonez %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "* Vous êtes emprisoné par Administrateur.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						SafeResetPlayerWeapons(playa);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 2;
						PlayerInfo[playa][pJailTime] = money*60;
		                SetPlayerPos(giveplayerid, 107.2300,1920.6311,18.5208);
				    	SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
		    			SetPlayerInterior(giveplayerid,0);
			    		PlayerInfo[giveplayerid][pInt] = 0;
						format(string, sizeof(string), "Vous êtes emprisoner pendant %d minutes", money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, 256, "[INFO] %s a été emprisoné par Administrateur [Raison: %s]", giveplayer, sendername, (result));
						BroadCast(COLOR_LIGHTRED,string);
						format(string, sizeof(string), "[INFO] %s a été emprisoné par Administrateur [Raison: %s]", giveplayer, sendername, (result));
						printf("%s",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   vous n'êtes pas autorisé à employer cette commande !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/taule", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /ajail [ID] [temps(minutes] [raison]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1000)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[82];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /ajail [ID] [temps(minutes)] [Raison]");
							return 1;
						}
						format(string, sizeof(string), "* Vous mettez en prison %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "* Vous êtes envoyé en prison par Administrateur.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						SafeResetPlayerWeapons(playa);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 1;
						PlayerInfo[playa][pJailTime] = money*60;
						SetPlayerInterior(playa, 0);
						PlayerInfo[playa][pInt] = 0;
						SetPlayerVirtualWorld (playa, 1);
						SetPlayerPos(playa, 1764.8106,-1542.6401,9.3901);
						SetPlayerSkin(playa, 268);
						format(string, sizeof(string), "Vous êtes en prison pendant %d minutes. Bail: Indiscutable", money);
						SendClientMessage(playa, COLOR_WHITE, string);
						SendClientMessage(playa, COLOR_WHITE, "Gardien: Voici ta tenue de prisonnier,Bon sejour! **rigole");
						format(string, 256, "[INFO] %s a été emprisonné par Administrateur [Raison: %s]", giveplayer, (result));
						BroadCast(COLOR_LIGHTRED,string);
						format(string, sizeof(string), "[INFO] %s a été envoyé en prison par Administrateur [Raison: %s]", giveplayer, (result));
						printf("%s",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous n'etes pas autoriser a faire ceci");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setheure", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /setheure <heure>");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] == 9999)
			{
	            SetWorldTime(hour);
				format(string, sizeof(string), "   Temps changer  (%d Heures).", hour);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous n'êtes pas autoriser à utiliser ceci)");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startlotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4000)
	        {
	            format(string, sizeof(string), "Los Santos News: Le lotto commence !.");
	            OOCOff(COLOR_DBLUE, string);
	            new rand = random(80);
	            if(rand < 77) { rand += 3; }
	            Lotto(rand);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas admin !");
	            return 1;
	        }
	    }
		return 1;
	}
	if(strcmp(cmd, "/setstat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setstat [idDuJoueur/PartieDuNom] [statcode] [Montant]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnHealth |3 UpgradePoints |4 Model |5 BankAccount");
				SendClientMessage(playerid, COLOR_GRAD3, "|6 PhoneNumber |7 RespectPoints |8 HouseKey |9 BizKey |10 DonateRank");
				SendClientMessage(playerid, COLOR_GRAD2, "|11 FMember |12 Det |13 Lawyer |14 Fixer |15 News |16 Jack |17 Drug");
				SendClientMessage(playerid, COLOR_GRAD2, "|18 sexe |19 Box |20 PassKey |21 VehKey1 |22 VehKey2 |23 VehKey3");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setstat [idDuJoueur/PartieDuNom] [statcode] [Montant]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnHealth |3 UpgradePoints |4 Model |5 BankAccount");
						SendClientMessage(playerid, COLOR_GRAD3, "|6 PhoneNumber |7 RespectPoints |8 HouseKey |9 BizKey |10 DonateRank");
						SendClientMessage(playerid, COLOR_GRAD2, "|11 FMember |12 Det |13 Lawyer |14 Fixer |15 News |16 Jack |17 Drug");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 sexe |19 Box |20 PassKey |21 VehKey1 |22 VehKey2 |23 VehKey3");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setstat [idDuJoueur/PartieDuNom] [statcode] [Montant]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnHealth |3 UpgradePoints |4 Model |5 BankAccount");
						SendClientMessage(playerid, COLOR_GRAD3, "|6 PhoneNumber |7 RespectPoints |8 HouseKey |9 BizKey |10 DonateRank");
						SendClientMessage(playerid, COLOR_GRAD2, "|11 FMember |12 Det |13 Lawyer |14 Fixer |15 News |16 Jack |17 Drug");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 sexe |19 Box |20 PassKey |21 VehKey1 |22 VehKey2 |23 VehKey3");
						return 1;
					}
					new amount;
					amount = strval(tmp);
					if (PlayerInfo[playerid][pAdmin] >= 9999)
					{
						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = amount;
								format(string, sizeof(string), "  Le joueur a été placé au niveau %d", amount);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pSHealth] = amount;
								format(string, sizeof(string), "   Le joueur a été placé à la santé de spawn de %d ", amount);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = amount;
								format(string, sizeof(string), "   Le joueur a été placé aux points de mise à niveau de %d ", amount);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pModel] = amount;
								format(string, sizeof(string), "   Le joueur a été placé pour modeler %d", amount);
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pAccount] = amount;
								format(string, sizeof(string), "   Le compte de joueur a été placé à $%d", amount);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = amount;
								format(string, sizeof(string), "   Le numéro de téléphone de joueur a été changé par %d", amount);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = amount;
								format(string, sizeof(string), "   les points de respect de joueur ont été changé à %d", amount);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPhousekey] = amount;
								format(string, sizeof(string), "   La clef de Chambre de joueur a été placée à %d", amount);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = amount;
								format(string, sizeof(string), "   La clef d'affaires de joueur a été placée à %d", amount);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDonateRank] = amount;
								format(string, sizeof(string), "   Le joueur DonateRank a été placé à %d", amount);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pFMember] = amount;
								format(string, sizeof(string), "   Le joueur a eté placé dans la famille %d", amount);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pDetSkill] = amount;
								format(string, sizeof(string), "   La compétence detective du joueur réglée à %d", amount);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pLawSkill] = amount;
								format(string, sizeof(string), "   La compétence d'avocat de joueur réglée à %d", amount);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pMechSkill] = amount;
								format(string, sizeof(string), "   La compétence mecanicien du joueur réglée à %d", amount);
							}
							case 15:
							{
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pJackSkill] = amount;
								format(string, sizeof(string), "   La compétence Car Jacker du joueur reglée à %d", amount);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pDrugsSkill] = amount;
								format(string, sizeof(string), "   La compétence trafiquant de drogue du joueur reglée à %d", amount);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pSexSkill] = amount;
								format(string, sizeof(string), "   La compétence du sexe du joueur reglée à %d", amount);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pBoxSkill] = amount;
								format(string, sizeof(string), "   La compétence boxe du joueur reglée à %d", amount);
							}
							case 77:
							{
								PlayerInfo[giveplayerid][pJob] = amount;
								format(string, sizeof(string), "   Le job du joueur reglée à %d", amount);
							}
							case 88:
							{
								PlayerInfo[giveplayerid][pContractTime] = amount;
								format(string, sizeof(string), "   Le temps de contrat du travail de joueur réglé à %d", amount);
							}
							default:
							{
								format(string, sizeof(string), "  Code inadmissible de stat", amount);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "  vous n'êtes pas autorisé à employer cette commande !");
					}
				}//not valid id
			}//not connected
		}
		return 1;
	}
	/*if(strcmp(cmd, "/setfamily", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new family;
			family = strval(tmp);
			if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new stat;
			stat = strval(tmp);
			if(stat < 1 || stat > 1) { SendClientMessage(playerid, COLOR_GREY, "   Stat Code can't be below 1 or above 1 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new amount;
			amount = strval(tmp);
			if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Amount can't be below 1 or above 10 !"); return 1; }
			switch (stat)
			{
			    case 1:
			    {
					FamilyInfo[family][FamilyMembers] = amount;
					format(string, sizeof(string), "   Family %s set to %d members", FamilyInfo[family][FamilyName], amount);
			    }
			    default:
			    {
			    	format(string, sizeof(string), "   Invalid Stat Code");
			    }
			}
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}*/
	if(strcmp(cmd, "/setint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setint [ID] [ID de l'interieur]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new intid;
			tmp = strtok(cmdtext, idx);
			intid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerInterior(playa, intid);
						PlayerInfo[playa][pInt] = intid;
						format(string, sizeof(string), "  Vous avez changer %s a l'interieur %d.", giveplayer, intid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   %s vous a changer votre interieur (%d)", sendername, intid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Vous n'etes pas autoriser a utiliser cette coommande !");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/setvw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /setvw [ID] [ID du monde virtuel]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new virid;
			tmp = strtok(cmdtext, idx);
			virid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, virid);
						format(string, sizeof(string), " Vous avez changer %s de monde virtuel (%d)", giveplayer, virid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   %s a changer votre monde virtuel à (%d)", sendername, virid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Vous n'etes pas autoriser à utiliser cette commandes");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/inviter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /inviter [ID]");
				return 1;
			}
			new para1;
			new ftext[20];
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
                        if(PlayerInfo[para1][pLevel] < 3)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs n'a pas le bon level pour etre inviter dans la faction !");
			                return 1;
			            }
					    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    {
					        if(PlayerInfo[playerid][pLeader] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LS-PD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
					        else if(PlayerInfo[playerid][pLeader] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 286; SetPlayerSkin(para1, 286); }
					        else if(PlayerInfo[playerid][pLeader] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "National Guard"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(PlayerInfo[playerid][pLeader] == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "Firemen/Ambulance"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(PlayerInfo[playerid][pLeader] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Mara Salvatrucha"; ChosenSkin[para1] = 115; SetPlayerSkin(para1, 115); }
					        else if(PlayerInfo[playerid][pLeader] == 6) { PlayerInfo[para1][pTeam] = 6; gTeam[para1] = 6; ftext = "La Cosa Nostra"; ChosenSkin[para1] = 127; SetPlayerSkin(para1, 127); }
					        else if(PlayerInfo[playerid][pLeader] == 7) { PlayerInfo[para1][pTeam] = 7; gTeam[para1] = 7; ftext = "Gouvernement"; ChosenSkin[para1] = 120; SetPlayerSkin(para1, 120); }
					        /*else if(PlayerInfo[playerid][pLeader] == 8) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 12; ftext = "Organizatsiya"; ChosenSkin[para1] = 249; SetPlayerSkin(para1, 249); }*/
					        else if(PlayerInfo[playerid][pLeader] == 9) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "San News"; ChosenSkin[para1] = 148; SetPlayerSkin(para1, 148); }
					        else if(PlayerInfo[playerid][pLeader] == 10) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Racer'z"; ChosenSkin[para1] = 60; SetPlayerSkin(para1, 60); }
					        else if(PlayerInfo[playerid][pLeader] == 11) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Instructeur"; ChosenSkin[para1] = 59; SetPlayerSkin(para1, 59); }
					        else if(PlayerInfo[playerid][pLeader] == 12) { PlayerInfo[para1][pTeam] = 7; gTeam[para1] = 7; ftext = "La Famille Russe"; ChosenSkin[para1] = 111; SetPlayerSkin(para1, 111); }
					        else if(PlayerInfo[playerid][pLeader] == 14) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Ruff Ryders"; ChosenSkin[para1] = 299; SetPlayerSkin(para1, 299); }
					        else if(PlayerInfo[playerid][pLeader] == 15) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Crip's"; ChosenSkin[para1] = 107; SetPlayerSkin(para1, 107); }
					        else if(PlayerInfo[playerid][pLeader] == 16) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Blood'z"; ChosenSkin[para1] = 19; SetPlayerSkin(para1, 19); }
					        else { return 1; }
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = PlayerInfo[playerid][pLeader];
							PlayerInfo[para1][pRank] = 1;
							printf("[Info] %s as inviter  %s a rejoindre %s.", sendername, giveplayer, ftext);
							format(string, sizeof(string), "   Vous rejoingnez le/la/les %s, invité par le chef %s", ftext, sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							format(string, sizeof(string), "  Vous etes invité par %s a rejoindre le/la/les %s.", giveplayer,ftext);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Ce jouer est dans une autre faction.");
						    return 1;
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous n'êtes pas autoriser a utiliser cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/virer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /virer [idDuJoueur/PartieDuNom]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if(PlayerInfo[playerid][pLeader] == 1 && PlayerInfo[para1][pMember] != 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 2 && PlayerInfo[para1][pMember] != 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 3 && PlayerInfo[para1][pMember] != 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 4 && PlayerInfo[para1][pMember] != 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 5 && PlayerInfo[para1][pMember] != 5)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 6 && PlayerInfo[para1][pMember] != 6)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7 && PlayerInfo[para1][pMember] != 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 8 && PlayerInfo[para1][pMember] != 8)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 9 && PlayerInfo[para1][pMember] != 9)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 10 && PlayerInfo[para1][pMember] != 10)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[para1][pMember] != 11)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[para1][pMember] != 12)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 13 && PlayerInfo[para1][pMember] != 13)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 14 && PlayerInfo[para1][pMember] != 14)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 15 && PlayerInfo[para1][pMember] != 15)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 16 && PlayerInfo[para1][pMember] != 16)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access refusé!");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0)
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("[Info] %s a viré %s.", sendername, giveplayer);
							format(string, sizeof(string), "* Vous avez été virer de votre famille , par le Leader %s.", sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							SendClientMessage(para1, COLOR_WHITE, "* Vous êtes redevenue Civils.");
			                gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							PlayerInfo[para1][pChar] = 0;
							new rand = random(sizeof(CIV));
							SetSpawnInfo(para1, gTeam[para1], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
							PlayerInfo[para1][pModel] = CIV[rand];
							MedicBill[para1] = 0;
							SpawnPlayer(para1);
							format(string, sizeof(string), "   Vous avez viré %s de la famille .", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande(Il n'y a que les leader qui peuvent faire cette commande)!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /aadmin [ID] [1000/2000/3000/4000]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 9999)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pAdmin] = level;
						printf("[Info] %s Vous avez promue %s au level %d admin.", sendername, giveplayer, level);
						format(string, sizeof(string), "   Vous avez été promue au level %d admin par %s", level, sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "   Vous avez promue %s au level %d admin.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aleader", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /aleader [ID] [1-16]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 16 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "   Entre 1 et 16 !!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[para1][pMember] > 0 || PlayerInfo[para1][pFMember] < 255)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est deja dans une Factions !");
			                return 1;
			            }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pLeader] = level;
						format(string, sizeof(string), "   Vous avez été promu chef de votre demande de Faction par Admin %s", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "    Vous avez donné %s commande pour exécuter Faction Nombre %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(level == 0) { PlayerInfo[para1][pChar] = 0; PlayerInfo[para1][pRank] = 0; gTeam[para1] = 3; PlayerInfo[para1][pTeam] = 0; return 1; }
						else if(level == 1) { PlayerInfo[para1][pChar] = 288; } //Police Force
						else if(level == 2) { PlayerInfo[para1][pChar] = 286; } //FBI/ATF
						else if(level == 3) { PlayerInfo[para1][pChar] = 287; } //National Guard
						else if(level == 4) { PlayerInfo[para1][pChar] = 228; } //Fire/Ambulance
						else if(level == 5) { PlayerInfo[para1][pChar] = 116; } //Surenos
						else if(level == 6) { PlayerInfo[para1][pChar] = 185; } //La Famiglia Sinatra
						else if(level == 7) { PlayerInfo[para1][pChar] = 147; } //Président
						else if(level == 8) { PlayerInfo[para1][pChar] = 20; } //Hitmans
						else if(level == 9) { PlayerInfo[para1][pChar] = 227; } //News Reporters
						else if(level == 10) { PlayerInfo[para1][pChar] = 172; } //Racer
						else if(level == 11) { PlayerInfo[para1][pChar] = 187; } //Driving/Flying School 127
						else if(level == 12) { PlayerInfo[para1][pChar] = 113; } // Russe
						else if(level == 14) { PlayerInfo[para1][pChar] = 293; } //Ruff Ryders
						else if(level == 15) { PlayerInfo[para1][pChar] = 270; } //Crip's
						else if(level == 16) { PlayerInfo[para1][pChar] = 102; } //East Side Ballas

						if(level == 0)
						{
						    gTeam[para1] = 3;
					    	PlayerInfo[para1][pTeam] = 3;
					        PlayerInfo[para1][pRank] = 0;
						}
						else if(level == 1 || level == 2 || level == 3)
						{
						    gTeam[para1] = 2;
					    	PlayerInfo[para1][pTeam] = 2;
					    	PlayerInfo[para1][pRank] = 7;
						}
						else if(level == 4)
						{
						    gTeam[para1] = 1;
						    PlayerInfo[para1][pTeam] = 1;
					    	PlayerInfo[para1][pRank] = 6;
						}
						else
						{
					    	gTeam[para1] = 15;
					    	PlayerInfo[para1][pTeam] = 15;
					    	PlayerInfo[para1][pRank] = 6;
						}

					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisé a faire cette commandes!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/skin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /skin [ID] [ID du skin]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 299 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Ce Skin est introuvable!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1000)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pChar] = level;
						format(string, sizeof(string), "Votre skin a été modifié par Admin %s", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Vous avez changer le skin de %s c'est maintenant le (%d)", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a utiliser cette commande!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/restaurerskin", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
			{
				if(PlayerInfo[playerid][pSex] == 1)
				{
					//Male Skin
					if(PlayerInfo[playerid][pRank] == 1) { PlayerInfo[playerid][pChar] = 115; SetPlayerSkin(playerid, 115); }
					else if(PlayerInfo[playerid][pRank] == 2) { PlayerInfo[playerid][pChar] = 114; SetPlayerSkin(playerid, 114); }
					else if(PlayerInfo[playerid][pRank] == 3) { PlayerInfo[playerid][pChar] = 174; SetPlayerSkin(playerid, 174); }
					else if(PlayerInfo[playerid][pRank] == 4) { PlayerInfo[playerid][pChar] = 173; SetPlayerSkin(playerid, 173); }
					else if(PlayerInfo[playerid][pRank] == 5) { PlayerInfo[playerid][pChar] = 116; SetPlayerSkin(playerid, 116); }
					else if(PlayerInfo[playerid][pRank] == 6) { PlayerInfo[playerid][pChar] = 176; SetPlayerSkin(playerid, 176); }
				}
				else if(PlayerInfo[playerid][pSex] == 2)
				{
					PlayerInfo[playerid][pChar] = 195; SetPlayerSkin(playerid, 195);
				}
			}
			else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		    {
				if(PlayerInfo[playerid][pSex] == 1)
				{
					//Male Skin
					if(PlayerInfo[playerid][pRank] == 1) { PlayerInfo[playerid][pChar] = 124; SetPlayerSkin(playerid, 124); }
					else if(PlayerInfo[playerid][pRank] == 2) { PlayerInfo[playerid][pChar] = 125; SetPlayerSkin(playerid, 125); }
					else if(PlayerInfo[playerid][pRank] == 3) { PlayerInfo[playerid][pChar] = 126; SetPlayerSkin(playerid, 126); }
					else if(PlayerInfo[playerid][pRank] == 4) { PlayerInfo[playerid][pChar] = 46; SetPlayerSkin(playerid, 46); }
					else if(PlayerInfo[playerid][pRank] == 5) { PlayerInfo[playerid][pChar] = 223; SetPlayerSkin(playerid, 223); }
					else if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 6) { PlayerInfo[playerid][pChar] = 185; SetPlayerSkin(playerid, 185); }
				}
				else if(PlayerInfo[playerid][pSex] == 2)
				{
					PlayerInfo[playerid][pChar] = 12; SetPlayerSkin(playerid, 12);
	    		}
			}
            else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
		    {
				if(PlayerInfo[playerid][pSex] == 1)
				{
					//Male Skin
					if(PlayerInfo[playerid][pRank] == 1) { PlayerInfo[playerid][pChar] = 60; SetPlayerSkin(playerid, 60); }
					else if(PlayerInfo[playerid][pRank] == 2) { PlayerInfo[playerid][pChar] = 170; SetPlayerSkin(playerid, 170); }
					else if(PlayerInfo[playerid][pRank] == 3) { PlayerInfo[playerid][pChar] = 180; SetPlayerSkin(playerid, 180); }
					else if(PlayerInfo[playerid][pRank] == 4) { PlayerInfo[playerid][pChar] = 188; SetPlayerSkin(playerid, 188); }
					else if(PlayerInfo[playerid][pRank] == 5) { PlayerInfo[playerid][pChar] = 250; SetPlayerSkin(playerid, 250); }
					else if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 10) { PlayerInfo[playerid][pChar] = 172; SetPlayerSkin(playerid, 172); }
				}
				else if(PlayerInfo[playerid][pSex] == 2)
				{
					PlayerInfo[playerid][pChar] = 192; SetPlayerSkin(playerid, 192);
	    		}
			}
			else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
		    {
				if(PlayerInfo[playerid][pSex] == 1)
				{
					//Male Skin
					if(PlayerInfo[playerid][pRank] == 1) { PlayerInfo[playerid][pChar] = 111; SetPlayerSkin(playerid, 111); }
					else if(PlayerInfo[playerid][pRank] == 2) { PlayerInfo[playerid][pChar] = 112; SetPlayerSkin(playerid, 112); }
					else if(PlayerInfo[playerid][pRank] == 3) { PlayerInfo[playerid][pChar] = 125; SetPlayerSkin(playerid, 125); }
					else if(PlayerInfo[playerid][pRank] == 4) { PlayerInfo[playerid][pChar] = 124; SetPlayerSkin(playerid, 124); }
					else if(PlayerInfo[playerid][pRank] == 5) { PlayerInfo[playerid][pChar] = 113; SetPlayerSkin(playerid, 113); }
					else if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 113) { PlayerInfo[playerid][pChar] = 113; SetPlayerSkin(playerid, 127); }
				}
				else if(PlayerInfo[playerid][pSex] == 2)
				{
					PlayerInfo[playerid][pChar] = 216; SetPlayerSkin(playerid, 216);
	    		}
			}


			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
			{
				if(PlayerInfo[playerid][pSex] == 1)
				{
					//
					if(PlayerInfo[playerid][pRank] == 1) { PlayerInfo[playerid][pChar] = 105; SetPlayerSkin(playerid, 105); }
					else if(PlayerInfo[playerid][pRank] == 2) { PlayerInfo[playerid][pChar] = 106; SetPlayerSkin(playerid, 106); }
					else if(PlayerInfo[playerid][pRank] == 3) { PlayerInfo[playerid][pChar] = 107; SetPlayerSkin(playerid, 107); }
					else if(PlayerInfo[playerid][pRank] == 4) { PlayerInfo[playerid][pChar] = 269; SetPlayerSkin(playerid, 269); }
					else if(PlayerInfo[playerid][pRank] == 5) { PlayerInfo[playerid][pChar] = 271; SetPlayerSkin(playerid, 271); }
					else if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 270) { PlayerInfo[playerid][pChar] = 270; SetPlayerSkin(playerid, 270); }
				}
				else if(PlayerInfo[playerid][pSex] == 2)
				{
					PlayerInfo[playerid][pChar] = 195; SetPlayerSkin(playerid, 195);
				}
			}
			else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		    {
				if(PlayerInfo[playerid][pSex] == 1)
				{
					//Male Skin
				    if(PlayerInfo[playerid][pRank] == 1) { PlayerInfo[playerid][pChar] = 144; SetPlayerSkin(playerid, 144); }
					else if(PlayerInfo[playerid][pRank] == 2) { PlayerInfo[playerid][pChar] = 144; SetPlayerSkin(playerid, 144); }
					else if(PlayerInfo[playerid][pRank] == 3) { PlayerInfo[playerid][pChar] = 144; SetPlayerSkin(playerid, 144); }
					else if(PlayerInfo[playerid][pRank] == 4) { PlayerInfo[playerid][pChar] = 180; SetPlayerSkin(playerid, 180); }
					else if(PlayerInfo[playerid][pRank] == 5) { PlayerInfo[playerid][pChar] = 292; SetPlayerSkin(playerid, 292); }
					else if(PlayerInfo[playerid][pRank] == 6 || PlayerInfo[playerid][pLeader] == 15) { PlayerInfo[playerid][pChar] = 293; SetPlayerSkin(playerid, 293); }
				}
				else if(PlayerInfo[playerid][pSex] == 2)
				{
					PlayerInfo[playerid][pChar] = 192; SetPlayerSkin(playerid, 192);
				}
			}
		}
        return 1;
    }
    if(strcmp(cmd, "/donnerrang", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerrang [playerid/PartieDuNom] [Numero(1-6)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
            if(level > 9 || level < 0) { SendClientMessage(playerid, COLOR_GREY, " SERVER: Faction a seulement 1-6 classements."); return 1; }
			if(PlayerInfo[playerid][pLeader] == 2 && PlayerInfo[para1][pMember] != 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 3 && PlayerInfo[para1][pMember] != 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 4 && PlayerInfo[para1][pMember] != 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 5 && PlayerInfo[para1][pMember] != 5)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			/*
			if(PlayerInfo[playerid][pLeader] == 6 && PlayerInfo[para1][pMember] != 6)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			*/
			if(PlayerInfo[playerid][pLeader] == 7 && PlayerInfo[para1][pMember] != 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 8 && PlayerInfo[para1][pMember] != 8)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 9 && PlayerInfo[para1][pMember] != 9)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 10 && PlayerInfo[para1][pMember] != 10)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[para1][pMember] != 11)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[para1][pMember] != 12)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 13 && PlayerInfo[para1][pMember] != 13)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 14 && PlayerInfo[para1][pMember] != 14)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access Refuser!");
				return 1;
			}
			/*
			if(PlayerInfo[playerid][pLeader] == 15 && PlayerInfo[para1][pMember] != 15)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 16 && PlayerInfo[para1][pMember] != 16)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			*/
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
				if(IsPlayerConnected(para1))
				{
					if(para1 != INVALID_PLAYER_ID)
					{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pRank] = level;
						format(string, sizeof(string), " Vous avez été promu à un rang supérieur par le chef %s", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), " Vous avez promu %s au rank %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 71; SetPlayerSkin(para1, 71); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 280; SetPlayerSkin(para1, 280); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 281; SetPlayerSkin(para1, 281); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 266; SetPlayerSkin(para1, 266); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 265; SetPlayerSkin(para1, 265); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 283; SetPlayerSkin(para1, 283); }
								else if(PlayerInfo[para1][pRank] == 7) { PlayerInfo[para1][pChar] = 288; SetPlayerSkin(para1, 288); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 150; SetPlayerSkin(para1, 150);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 286; SetPlayerSkin(para1, 286);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 287; SetPlayerSkin(para1, 287); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 276; SetPlayerSkin(para1, 276); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 275; SetPlayerSkin(para1, 275); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 275; SetPlayerSkin(para1, 275); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 274; SetPlayerSkin(para1, 274); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 70; SetPlayerSkin(para1, 70); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 228; SetPlayerSkin(para1, 228); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 115; SetPlayerSkin(para1, 115); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 114; SetPlayerSkin(para1, 114); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 174; SetPlayerSkin(para1, 174); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 173; SetPlayerSkin(para1, 173); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 175; SetPlayerSkin(para1, 175); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 116; SetPlayerSkin(para1, 116); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 46; SetPlayerSkin(para1, 46); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 223; SetPlayerSkin(para1, 223); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 98; SetPlayerSkin(para1, 98); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 127; SetPlayerSkin(para1, 127); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 12; SetPlayerSkin(para1, 12);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 163; SetPlayerSkin(para1, 163); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 165; SetPlayerSkin(para1, 165); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 295; SetPlayerSkin(para1, 295); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 46; SetPlayerSkin(para1, 46); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 17; SetPlayerSkin(para1, 17); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 147; SetPlayerSkin(para1, 147); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 12; SetPlayerSkin(para1, 12);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
					    {
							if(PlayerInfo[playerid][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 111; SetPlayerSkin(para1, 111); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 272; SetPlayerSkin(para1, 272); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
								else if(PlayerInfo[para1][pRank] == 6 || PlayerInfo[para1][pLeader] == 12) { PlayerInfo[para1][pChar] = 127; SetPlayerSkin(para1, 127); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 216; SetPlayerSkin(para1, 216);
	   			 		    }
	   			 	    }
						else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 60; SetPlayerSkin(para1, 60); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 170; SetPlayerSkin(para1, 170); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 180; SetPlayerSkin(para1, 180); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 188; SetPlayerSkin(para1, 188); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 250; SetPlayerSkin(para1, 250); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 172; SetPlayerSkin(para1, 172); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 192; SetPlayerSkin(para1, 192);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 59; SetPlayerSkin(para1, 59); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 59; SetPlayerSkin(para1, 59); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 59; SetPlayerSkin(para1, 59); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 171; SetPlayerSkin(para1, 171); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 171; SetPlayerSkin(para1, 171); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 187; SetPlayerSkin(para1, 187); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 93; SetPlayerSkin(para1, 93);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 111; SetPlayerSkin(para1, 111); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 125; SetPlayerSkin(para1, 125); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 124; SetPlayerSkin(para1, 124); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 272; SetPlayerSkin(para1, 272); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 126; SetPlayerSkin(para1, 126); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 127; SetPlayerSkin(para1, 127); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 233; SetPlayerSkin(para1, 233);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 28; SetPlayerSkin(para1, 28); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 219; SetPlayerSkin(para1, 219); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 67; SetPlayerSkin(para1, 67); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 180; SetPlayerSkin(para1, 180); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 19; SetPlayerSkin(para1, 19); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 22; SetPlayerSkin(para1, 22); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 233; SetPlayerSkin(para1, 233);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 144; SetPlayerSkin(para1, 144); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 144; SetPlayerSkin(para1, 144); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 144; SetPlayerSkin(para1, 144); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 180; SetPlayerSkin(para1, 180); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 292; SetPlayerSkin(para1, 292); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 293; SetPlayerSkin(para1, 293); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 192; SetPlayerSkin(para1, 192);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 105; SetPlayerSkin(para1, 105); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 106; SetPlayerSkin(para1, 106); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 107; SetPlayerSkin(para1, 107); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 269; SetPlayerSkin(para1, 269); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 271; SetPlayerSkin(para1, 271); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 270; SetPlayerSkin(para1, 270); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 19; SetPlayerSkin(para1, 19); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 67; SetPlayerSkin(para1, 67); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 103; SetPlayerSkin(para1, 103); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 103; SetPlayerSkin(para1, 103); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 104; SetPlayerSkin(para1, 104); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 102; SetPlayerSkin(para1, 102); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 195; SetPlayerSkin(para1, 195);
							}
						}
						/*
						else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}
						else if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 47; SetPlayerSkin(para1, 47); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 48; SetPlayerSkin(para1, 48); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 194; SetPlayerSkin(para1, 194);
							}
						}*/
						else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
						{
							if(PlayerInfo[para1][pSex] == 1)
							{
								//Male Skin
								if(PlayerInfo[para1][pRank] == 1) { PlayerInfo[para1][pChar] = 184; SetPlayerSkin(para1, 184); }
								else if(PlayerInfo[para1][pRank] == 2) { PlayerInfo[para1][pChar] = 101; SetPlayerSkin(para1, 101); }
								else if(PlayerInfo[para1][pRank] == 3) { PlayerInfo[para1][pChar] = 121; SetPlayerSkin(para1, 121); }
								else if(PlayerInfo[para1][pRank] == 4) { PlayerInfo[para1][pChar] = 202; SetPlayerSkin(para1, 202); }
								else if(PlayerInfo[para1][pRank] == 5) { PlayerInfo[para1][pChar] = 258; SetPlayerSkin(para1, 258); }
								else if(PlayerInfo[para1][pRank] == 6) { PlayerInfo[para1][pChar] = 272; SetPlayerSkin(para1, 272); }
							}
							else if(PlayerInfo[para1][pSex] == 2)
							{
								PlayerInfo[para1][pChar] = 211; SetPlayerSkin(para1, 211);
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Vous n'êtes pas autorisé a faire cette commande(Il n'y a que les leader qui peuvent faire cette commande)!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /setjob [ID] [ID du job)]");
				return 1;
			}
			new para1;
			new jobid;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			jobid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pJob] = jobid;
						format(string, 256, "[Admin]: %s a mis  %s id emploi %d.", sendername,giveplayer,jobid);
						ABroadCast(COLOR_YELLOW,string);
						SendClientMessage(playerid, COLOR_GRAD1, "   L'emploi a été mis avec succès !");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autorisé a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 2000)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1536.41,-1738.64,13.54);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1536.41,-1738.64,13.54); //ANCIEN 1529.6,-1691.2,13.3
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter !");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotolv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3500)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoconcesslv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2327.9379882813,1432.3878173828,42.8203125);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 2327.9379882813,1432.3878173828,42.8203125);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoconcesssud", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1081.2794,-1747.0856,13.0616);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1081.2794,-1747.0856,13.0616);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoconcessnord", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 548.0430,-1274.0802,16.8739);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 548.0430,-1274.0802,16.8739);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotofsf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2119.7996,-211.5585,35.3203);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -2119.7996,-211.5585,35.3203);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3250)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -1417.0,-295.8,14.1);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}

    if(strcmp("/acmd", cmdtext, true, 10) == 0)
	{
	SendClientMessage(playerid, COLOR_YELLOW,"|______________________ Commandes Admin ______________________|");
	SendClientMessage(playerid, COLOR_GREEN,"/adminservice, /regarder, /setint, /setvw, /mute, /kick, /unfreeze, /regarderarmes, /ban ,/slap, /goto,");
	SendClientMessage(playerid, COLOR_GREEN,"(/a)dmin, (/ao)oc, /setskin, /ajail, /specplayer, /specoff, /gotohopital, /accepterreport, /reffuserreport,");
	SendClientMessage(playerid, COLOR_GREEN,"/noooc, /respawncar(/rc), /adonnerpermis, /annonce, /setjob, /ip, /gotols, /prison, /unprison,/essencecars,");
	SendClientMessage(playerid, COLOR_GREEN,"/modifier, /vehslap, /gotoin, /gotostad, /gotolv, /gotosf, /gethere, /gotocar, /getcar, /setage, /healcar,");
	SendClientMessage(playerid, COLOR_GREEN,"/setage, /healcar, /entrercar, /gotojet, /respawnallcars(/rac), /respawnbikelocation, /respawncarlocation,");
	SendClientMessage(playerid, COLOR_GREEN,"/unban, /unbanip, /deverouiller, /avendremaison, /avendrebiz, /avendresbiz, /donnerdrogue, /avendrevehicule,");
	SendClientMessage(playerid, COLOR_GREEN,"/avendremaison, /avendrebiz, /avendresbiz, /donnerdrogue, /avendrevehicule, /sethp, /setarmor, /explose,");
	SendClientMessage(playerid, COLOR_GREEN,"/supervehslap, /donnermateriaux, /setchampion, /weatherall, /makeadmin, /makeleader, /entrerbiz,");
	SendClientMessage(playerid, COLOR_GREEN,"/entrersuperbiz, /avendrecar, /setstat, /donnerargent, /suprimervehicule(/sv), /hirecar, /setheure, /donnerarme,");
	SendClientMessage(playerid, COLOR_GREEN,"/crash, /entrermaison, /sortirmaison, /startlotto, /maison, /maisono, /biz, /sbiz");
	return 1;
 	}

	if(strcmp(cmd, "/entrerici", true) == 0)
	{
		if (PlayerToPoint(3, playerid,629.9409,-1858.7820,5.6675) || PlayerToPoint(3,playerid,251.6416,192.3702,1008.1719) || PlayerToPoint(3,playerid,249.6595,192.3225,1008.1719) ||PlayerInfo[playerid][pLocal] != 255)
		{
		SetPlayerPos(playerid, 382.1148,173.0181,1008.3828);
		GameTextForPlayer(playerid, "~w~La Mairie de Plage",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
		SetPlayerVirtualWorld(playerid, 2);
		return 1;
		}
	}
	if(strcmp(cmd, "/sortirici", true) == 0)
	{
		if (PlayerToPoint(3, playerid,390.0630,173.5741,1008.3828) || PlayerToPoint(3,playerid,251.6416,192.3702,1008.1719) || PlayerToPoint(3,playerid,249.6595,192.3225,1008.1719) ||PlayerInfo[playerid][pLocal] != 255)
		{
		SetPlayerPos(playerid, 631.2625,-1862.2772,5.6675);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		return 1;
		}
	}

	if(strcmp(cmd, "/entrercar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /entrercar [ID]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	// systéme de clignotant ( gauche )
	  if(strcmp(cmd, "/clignotantgauche", true) == 0 || strcmp(cmd, "/cg", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[64];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result) && IsPlayerInAnyVehicle(playerid) == 0)
            { //line 124
                SendClientMessage(playerid, COLOR_GRAD2, "Vous devez être dans un véhicule pour utiliser /clignotantgauche");
                return 1;
            }
            SendClientMessage(playerid, COLOR_WHITE, "Vous mettez votre clignotant gauche !");
            GetPlayerName(playerid, sendername, sizeof(sendername));
              format(string, sizeof(string), "** %s met son clignotant gauche..", sendername);
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            printf("%s", string);
            }
        return 1;
    }
//----------------------------------[CLIGNOTANT:DROITE]----------------------------------------
    if(strcmp(cmd, "/clignotantdroit", true) == 0 || strcmp(cmd, "/cd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
        new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[64];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result) && IsPlayerInAnyVehicle(playerid) == 0)
            { //line 124
                SendClientMessage(playerid, COLOR_GRAD2, "Vous devez être dans un véhicule pour utiliser /clignotantdroit");
                return 1;
            }
            SendClientMessage(playerid, COLOR_WHITE, "Vous mettez votre clignotant droit !");
            GetPlayerName(playerid, sendername, sizeof(sendername));
              format(string, sizeof(string), "* %s met son clignotant droit..", sendername);
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            printf("%s", string);
            }
        return 1;
    }
	
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /gotocar [ID]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
				SetPlayerInterior(playerid,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotostad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotojet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/goto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /goto [ID]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1000)
					{
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						SendClientMessage(playerid, COLOR_GRAD1, "   Vous avez été teleporter");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d n'est pas un joueurs actif.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gethere", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /gethere [ID]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1000)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						SendClientMessage(plo, COLOR_GRAD1, "   Vous avez été teleporter");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d n'est pas un joueurs actif.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /getcar [ID]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] > 3000)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/donnerarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /donnerarme [ID] [ID de l'armes] [Munitions]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerarme [idDuJoueur/PartieDuNom] [ID de l'armes] [Munnitions]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			if(gun < 1||gun > 46||gun==27||gun==1||gun==2||gun==9||gun==17||gun==19||gun==20||gun==21||gun==35||gun==36||gun==39||gun==40||gun==44||gun==45)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   wrong WeaponID!"); return 1; }
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo <1||ammo > 9999)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez mettre entre 1 et 9999 Balle!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SafeGivePlayerWeapon(playa, gun, ammo);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "AdmWarning: %s A donner %s gun id %d.", sendername,giveplayer,gun);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/donnerarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /donnerarme [ID] [ID de l'armes] [Munitions]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /donnerarme [ID] [ID de l'armes] [Munitons]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			if(gun < 1||gun > 46||gun==27||gun==1||gun==2||gun==9||gun==17||gun==19||gun==20||gun==21||gun==35||gun==36||gun==39||gun==40||gun==44||gun==45)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   wrong WeaponID!"); return 1; }
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo <1||ammo > 9999)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   Vous devez mettre entre 1 et 9999 Balle!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SafeGivePlayerWeapon(playa, gun, ammo);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "", sendername,giveplayer,gun);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sethp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /sethp [ID] [vie]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "[Admin]: %s a changer la vie de %s à %d.", sendername,giveplayer,health);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /setarmor [ID] [Pourcent d'armure]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4000)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "[Admin]: %s a changer l'armure de %s à  %d.", sendername,giveplayer,health);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /setage [ID] [age]");
				return 1;
			}
			new playa;
			new age;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			age = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						PlayerInfo[playa][pAge] = age;
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "[Admin]: %s a changer l'age de %s à %d.", sendername,giveplayer,age);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /veh [carid] [color1] [color2]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 126) { SendClientMessage(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 126 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 126) { SendClientMessage(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 126 !"); return 1; }
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			new carid = CreateVehicle(car, X,Y,Z, 0.0, color1, color2, 60000);
			CreatedCars[CreatedCar] = carid;
			CreatedCar ++;
			format(string, sizeof(string), "   Vehicle %d spawned.", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}*/
	if(strcmp(cmd, "/repair", true) == 0)
	{
 		if(PlayerInfo[playerid][pAdmin] >= 3000)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				RepairVehicle(GetPlayerVehicleID(playerid));
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/healcar", true) == 0)
	{
 		if(PlayerInfo[playerid][pAdmin] >= 9999)
		{
			new health;
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);

			SetVehicleHealth(GetPlayerVehicleID(playerid), health * 10);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
	/*if(strcmp(cmd, "/destroycars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			    return 1;
			}
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(i != 0)
				{
			    	DestroyVehicle(i);
				}
			}
			SendClientMessage(playerid, COLOR_GREY, "   Created Vehicles destroyed !");
		}
		return 1;
	}*/
	if (strcmp(cmdtext, "/lockmavoiture", true)==0)
	{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid,0xFF004040,"You can only lock the doors as the driver.");
			return 1;
		}
		new i;
		for(i=0;i<MAX_PLAYERS;i++)
		{
			if(i != playerid)
			{
				SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
			}
		}
		SendClientMessage(playerid, 0x33AA33AA, "Vehicle locked!");
		new Float:pX, Float:pY, Float:pZ;
		GetPlayerPos(playerid,pX,pY,pZ);
		PlayerPlaySound(playerid,1056,pX,pY,pZ);
	}
	else
	{
	SendClientMessage(playerid, 0xFF004040, "You're not in a vehicle!");
	}
	return 1;
	}
	if (strcmp(cmdtext, "/unlockmavoiture", true)==0)
	{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid,0xFF004040,"You can only unlock the doors as the driver.");
			return 1;
		}
		new i;
		for(i=0;i<MAX_PLAYERS;i++)
		{
			SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
		}
		SendClientMessage(playerid, 0x33AA33AA, "Vehicle unlocked!");
		new Float:pX, Float:pY, Float:pZ;
		GetPlayerPos(playerid,pX,pY,pZ);
		PlayerPlaySound(playerid,1057,pX,pY,pZ);
	}
	else
	{
	SendClientMessage(playerid, 0xFF004040, "You're not in a vehicle!");
	}
	return 1;
	}
	if(strcmp(cmdtext,"/clear",true)==0)
	{
	if(PlayerInfo[playerid][pAdmin] >= 3000)
	{
	SendClientMessage(playerid,0xFFFFFFAA,"Tchat nettoyer");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	SendClientMessage(playerid,0xFFFFFFAA," ");
	}
	return 1;
	}
	if(strcmp(cmdtext, "/clear2", true)==0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 3250 || IsPlayerAdmin(playerid))
	    {
	        for(new chat=0; chat<51; chat++)
	        {
	            SendClientMessageToAll(0xFFFFFFAA, " ");
		}
			return 1;
	    }
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "commande interdite.");
		}
		return 1;
	}
 	if (strcmp(cmdtext, "/nos", true) == 0)
        {
        if(PlayerInfo[playerid][pAdmin] >= 9998)
		{
        if(IsPlayerInAnyVehicle(playerid))
        {
        AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
        }
        else
        {
        SendClientMessage(playerid, COLOR_GREEN, "Tu dois être dans un véhicule pour utiliser cette commande !");
        }
  		}
        return 1;
        }
        
	
 	if(strcmp(cmdtext,"/flip",true)==0)
	{
	if(PlayerInfo[playerid][pAdmin] >= 9998)
	{
	new VehicleID,Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	VehicleID = GetPlayerVehicleID(playerid);
	SetVehiclePos(VehicleID,X,Y,Z);
	SetVehicleZAngle(VehicleID,0);
 	}
	return 1;
	}
	if(strcmp(cmdtext,"/ninja",true)==0)
	{
	if(PlayerInfo[playerid][pAdmin] >= 9999)
	{
	SetPlayerSkin(playerid, 203);
	GivePlayerWeapon(playerid,8,1);
	SendClientMessage(playerid, 0x33AA33AA, "Ninja!");
	}
	return 1;
	}

	if(strcmp(cmd, "/weatherall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] <= 3000 )
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /weatherall [ID]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 16) { SendClientMessage(playerid, COLOR_GREY, "  ID entre 1 et 16!"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, " Temps changé pour tous le monde !!");
			GetPlayerName(playerid, sendername, sizeof(sendername));
       		format(string, 256, "[Admin]: %s a changer le temps %d.", sendername,weather);
			ABroadCast(COLOR_YELLOW,string);
			DefaultWeather = weather;
		}
		return 1;
	}
	if(strcmp(cmd, "/donnerargent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /donnerargent [ID] [Argent]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 9999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            //ConsumingMoney[playa] = 1;
						SafeGivePlayerMoney(playa, money);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "[Admin]: %s a donné à %s $%d.", sendername,giveplayer,money);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/slap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD] : /slap [ID]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("[Info] %s a été slapé par Administrateur",sendername,  giveplayer);
						format(string, sizeof(string), "[Info] %s a été slappé par Administrateur",giveplayer,sendername);
						BroadCast(COLOR_LIGHTRED,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/muter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /muter [ID] [raison]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			    idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
			     result[idx - offset] = cmdtext[idx];
			     idx++;
			}
			result[idx - offset] = EOS;
			if (PlayerInfo[playerid][pAdmin] >= 999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("[Info] %s muté par %s",sendername,  giveplayer);
							format(string, sizeof(string), "[Info] %s a eté muter par Administrateur[Raison:%s]",giveplayer ,(result));
							SendClientMessageToAll(COLOR_LIGHTRED,string);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("[Info] %s a été demuter par %s",sendername,  giveplayer);
							format(string, sizeof(string), "[Info] %s a eté démuter par Administrateur",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Vous n'êtes pas autoriser a faire cette commande!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/nom", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /nom [playerid/PartiDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1000)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " [ADMIN]: %s à était kické par Administrateur pour Prenom_Nom NORP,  Exemple de nom RP : Julien_Rodriguez", giveplayer);
						SendAdminMessage(COLOR_LIGHTRED, string);
						format(string, sizeof(string), " [ADMIN]: Vous avez kické par Administrateur pour Prenom_Nom NORP, Exemple de nom RP : Julien_Rodriguez", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d n'est pas un joueur actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [ID] [Raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 999)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[80];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /kick [ID] [Raison]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "[INFO] %s a été kicker par un Administrateur, raison:  %s (%d-%d-%d)", giveplayer, (result),month,day,year);
						KickLog(string);
						format(string, sizeof(string), "[INFO] %s a été kicker par un Administrateur, raison: %s", giveplayer, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d est un joueurs inactif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/skick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /skick [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}*/
    if(strcmp(cmd,"/unbanip",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4000)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USAGE: /unbanip [players ip]");
		        return 1;
   			}
			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "AdmWarning: %s L'ip a été débannie %s", sendername,tmp);
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
	if (strcmp(cmd, "/unban", true)==0)
	{
	    if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >=2999)
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
   {
		        SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /unban [Prenom_Nom]");
	            return 1;
		 	}
			format(string,sizeof(string),"%s.ini",tmp);
			fremove(string);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
		}
		return 1;
	}
	if(strcmp(cmd, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [ID] [Raison]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2499)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[80];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /ban [ID] [Raison]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "[INFO] %s a banni %s, raison: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "[INFO]%s a été exiler de la ville par un Administrateur, raison: %s", giveplayer, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pLocked] = 1;
						Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d est un joueurs inactif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
           if(PlayerInfo[playerid][pAdmin] >= 999)
           {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /freeze [ID]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playa][pAdmin] > 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous ne pouvez pas freezer un de vos collegues admin, Voyons !");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 0);
						format(string, sizeof(string), "[ADMIN] %s Freeze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "[ADMIN] %s a été Freeze par %s",giveplayer ,sendername);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisé a utilisé cette commande!");
			}
		   }
		   else
		   {
			   SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisé a utilisé cette commande!");
		   }
		}
		return 1;
	}
	if(strcmp(cmd, "/unfreeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
           if(PlayerInfo[playerid][pAdmin] >= 999)
           {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /unfreeze [ID]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 999)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 1);
						format(string, sizeof(string), "[Info] %s UnFreeze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "[Info] %s a été Unfreeze %s",giveplayer ,sendername);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisé a utilisé cette commande!");
			}
		  }
		  else
		  {
			   SendClientMessage(playerid, COLOR_GRAD1, "Vous n'êtes pas autorisé a utilisé cette commande!");
		  }
		}
		return 1;
	}
	/*if(strcmp(cmd, "/endround", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	  		if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GameModeInitExitFunc();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command !");
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				GameModeExit();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
			}
		}
		return 1;
	}*/
	if (strcmp(cmd, "/instructeurs", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "instructeurs connectés:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "** Tél: %d ** %s", PlayerInfo[i][pPnumber] ,sendername);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	if(!strcmp("/remorquer", cmdtext, true))
	{
		if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
 			{
        		SendClientMessage(playerid,0xFFFF00AA,"Tentative remorquage voiture");
				new Float:pX,Float:pY,Float:pZ;
				GetPlayerPos(playerid,pX,pY,pZ);
				new Float:vX,Float:vY,Float:vZ;
				new Found=0;
				new vid=0;
				while((vid<MAX_VEHICLES)&&(!Found))
    			{
    				vid++;
    				GetVehiclePos(vid,vX,vY,vZ);
    				if  ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
        			{
        				Found=1;
        				if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
            			{
            				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            			}
       					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
       					SendClientMessage(playerid,0xFFFF00AA,"Voiture remorquée!");
        			}
     			}
				if  (!Found)
				{
						SendClientMessage(playerid,0xFFFF00AA,"Il n'y a pas de voiture.");
				}
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/cam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
			{
		    	new x_cam[256];
				x_cam = strtok(cmdtext, idx);
				if(!strlen(x_cam))
				{
					SendClientMessage(playerid, COLOR_WHITE, "|_____________ Liste des Caméras _____________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [numero] - N° 0 pour quiter");
					SendClientMessage(playerid, COLOR_GREY, "1.Cam usine d'arme      2. Cam usine d'arme");
					SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
					return 1;
				}
				else if(strcmp(x_cam,"0",true) == 0)
				{
	        		SetCameraBehindPlayer(playerid);
			    }
				else if(strcmp(x_cam,"1",true) == 0)
				{
	        		SetPlayerCameraPos(playerid, -2197.1049804688, 136.96589660645, 42.5);
					SetPlayerCameraLookAt(playerid, -2209.9543,138.8952,35.3203);
			    }
				else if(strcmp(x_cam,"2",true) == 0)
				{
	        		SetPlayerCameraPos(playerid, -2230.0124511719, 148.47828674316, 42.5);
					SetPlayerCameraLookAt(playerid, -2221.2366,146.1296,35.3203);
				}
            }
        }
        return 1;
	}
	if(strcmp(cmd, "/aide", true) == 0 || strcmp(cmd, "/aahh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if (PlayerInfo[playerid][pAdmin] != 0)
			{
	    	    ShowMenuForPlayer(Aide,playerid); // On active le menu "tunning"
		    	TogglePlayerControllable(playerid,0);
			}
			else
			{
			    ShowMenuForPlayer(Aide,playerid); // On active le menu "tunning"
		    	TogglePlayerControllable(playerid,0);
			}
	    }
		return 1;
	}
	if(strcmp(cmd, "/regles", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_LIGHTRED,"INFO: Allez sur le forum pour voir toute les regles et les informations. [ www.la-vie-virtuelle.eu ]");
		}
		return 1;
	}
	if(strcmp(cmd,"/stopanim",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        	ClearAnimations(playerid);
	        	if(UsingSmokeAnim[playerid] == 1)
	            {
	                UsingSmokeAnim[playerid] = 0;
	            }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/donnerpermis", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 1)
	            {
	                //SendClientMessage(playerid, COLOR_GREY, "   Only Rank 2 or higher can give away a Permis !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /donnerpermis [Nom de Permis] [ID] [prix]");
				    SendClientMessage(playerid, COLOR_WHITE, "Noms: conduire , vole , bateau, peche, arme.");
					return 1;
				}
			    if(strcmp(x_nr,"conduire",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermis conduire [idDuJoueur/PartieDuNom] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {

							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerpermis conduire [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 50 || price > 1500) { SendClientMessage(playerid, COLOR_GREY, "   Prix non inférieur à 50, ou au-dessus de 1500!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), "* You've given a Drivers Permis to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Drivers Permis.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;*/
					        format(string, sizeof(string), "* Vous vendez a %s le permis voiture pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* L'instructeur de l'auto ecole %s veut vous vendre le Permis de voiture pour $%d, (type /accepter Permis).", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							PermisOffer[giveplayerid] = playerid;
							PermisPrice[giveplayerid] = price;
							PermisType[giveplayerid] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Se joueurs est Hors ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"vole",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermis vole [idDuJoueur/PartieDuNom] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerpermis vole [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 500 || price > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Prix Supérieur a 500 et inferieur a 10000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), "* You've given a Flying Permis to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Flying Permis.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;*/
					        format(string, sizeof(string), "* Vous vendez a %s le permis de vole pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* L'instructeur de l'auto ecole %s veut vous vendre le Permis de vole pour $%d, (type /accepter Permis).", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							PermisOffer[giveplayerid] = playerid;
							PermisPrice[giveplayerid] = price;
							PermisType[giveplayerid] = 2;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Ce joueurs est Hors ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"bateau",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermis bateau [idDuJoueur/PartieDuNom] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerpermis bateau [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Prix Supérieur a 500 et inferieur a 10000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), "* You've given a Sailing Permis to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Sailing Permis.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;*/
					        format(string, sizeof(string), "* Vous vendez a %s le permis de bateau pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* L'instructeur de l'auto ecole %s veut vous vendre le Permis de bateau pour $%d, (type /accepter Permis).", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							PermisOffer[giveplayerid] = playerid;
							PermisPrice[giveplayerid] = price;
							PermisType[giveplayerid] = 3;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"peche",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermis peche [idDuJoueur/PartieDuNom] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerpermis peche [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Prix Supérieur a 100 et inferieur a 1000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), "* You've given a Fishing Permis to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Fishing Permis.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;*/
					        format(string, sizeof(string), "* Vous vendez a %s le permis de peche pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* L'instructeur de l'auto ecole %s veut vous vendre le Permis de peche pour $%d, (type /accepter Permis).", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							PermisOffer[giveplayerid] = playerid;
							PermisPrice[giveplayerid] = price;
							PermisType[giveplayerid] = 4;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"arme",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerpermis arme [idDuJoueur/PartieDuNom] [prix]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /donnerpermis arme [playerid/ParOfName] [prix]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 500 || price > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Prix Supérieur a 500 et inferieur a 10000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            /*format(string, sizeof(string), "* You've given a Flying Permis to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Flying Permis.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;*/
					        format(string, sizeof(string), "* Vous vendez a %s le permis d'arme pour $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* L'instructeur de l'auto ecole %s veut vous vendre le Permis d'arme pour $%d, (type /accepter Permis).", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							PermisOffer[giveplayerid] = playerid;
							PermisPrice[giveplayerid] = price;
							PermisType[giveplayerid] = 5;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Ce joueurs est Hors ligne !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas un Instructeur !");
	            return 1;
	        }
	    }
	    return 1;
    }
	if(strcmp(cmd, "/demarrerlecon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /demarrerlecon [ID]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Vous commencer la lecon avec %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* L'instructeur %s a commencer la lecon.",sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        TakingLesson[giveplayerid] = 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un InstructeuQ<r!! !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/arreterlecon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /arreterlecon [ID]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(TakingLesson[giveplayerid] != 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " Ce joeur n'a pas commencer de leçon!");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Vous arreter la lecon de %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* L'instructeur %s arrete votre lecon.",sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        TakingLesson[giveplayerid] = 0;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Instructeur!");
	            return 1;
	        }
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/families", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    new number = 0;
		        for(new i = 0; i < sizeof(FamilyInfo); i++)
		        {
		            number ++;
		            format(string, sizeof(string), "Family %d| Name: %s | Leader: %s | Members: %d.",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
		            SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        return 1;
	        }
	        new family = strval(tmp);
	        if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			if(FamilyInfo[family][FamilyTaken] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
			    return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pFMember] == family)
			        {
			            GetPlayerName(i, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Family %d: %s | Rank: %d.",family,giveplayer,PlayerInfo[i][pRank]);
			            SendClientMessage(playerid, COLOR_GREY, string);
			        }
			    }
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/adjust", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFMember] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not in a Family !");
	            return 1;
	        }
	        new family = PlayerInfo[playerid][pFMember];
	        new wstring[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s", sendername);
			strmid(wstring, string, 0, strlen(string), 255);
	        if(strcmp(FamilyInfo[family][FamilyLeader],wstring, true ) == 0 )
			{
			    new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Available Names: Name, MOTD, Color, Spawn, Invite, Uninvite, Rank");
					return 1;
				}
			    if(strcmp(x_nr,"name",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adjust Name [Family Name]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyName], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Name.");
				}
				else if(strcmp(x_nr,"motd",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adjust MOTD [Family MOTD Text]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's MOTD.");
				}
				else if(strcmp(x_nr,"color",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adjust color [Family Color Sample: 0xFFFFFFAA]");
						return 1;
					}
					if(offset < 10)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Wrong Color number, take a look at the Sample ! (0xFFFFFFAA)");
					    return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Color.");
				}
				else if(strcmp(x_nr,"spawn",true) == 0)
				{
				    GetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
				    GetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);
				    FamilyInfo[family][FamilyInterior] = GetPlayerInterior(playerid);
				    SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Spawnplace.");
				}
				else if(strcmp(x_nr,"invite",true) == 0)
				{
				    if(FamilyInfo[family][FamilyMembers] >= 10)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Your Family has reached the Maximum of 10 Family Members, can't invite more !");
				        return 1;
				    }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust invite [idDuJoueur/PartieDuNom]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != 255)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is already in a Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've invited %s to join '%s'.",giveplayer, FamilyInfo[family][FamilyName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* %s has invited you to join '%s', you are now a Member of it.",sendername, FamilyInfo[family][FamilyName]);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = family;
					        PlayerInfo[giveplayerid][pRank] = 1;
					        FamilyInfo[family][FamilyMembers] ++;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"uninvite",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust uninvite [idDuJoueur/PartieDuNom]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've kicked %s out of your Family.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Family Leader %s has kicked your out of the Family.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = 255;
					        PlayerInfo[giveplayerid][pRank] = 0;
					        FamilyInfo[family][FamilyMembers] --;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"rank",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust rank [RankNr] [idDuJoueur/PartieDuNom]");
					    return 1;
					}
					new rank = strval(tmp);
					if(rank < 1 || rank > 6) { SendClientMessage(playerid, COLOR_GREY, "   RankNr can't be below 1 or above 6 !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust rank [RankNr] [idDuJoueur/PartieDuNom]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've given %s Rank %d.",giveplayer,rank);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Family Leader %s has given you Rank %d.",sendername,rank);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRank] = rank;
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Invalid Adjust name !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of your Family !");
			    return 1;
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/donner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /donnerturf [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 11 till 15 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   47th Street Saints Families can only take FamilyNr 11 till 15 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
				    return 1;
				}
				new Found = 0;
				if(Found)
				{
				    SaveTurfs();
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Turf adjusted.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not in a Turf !");
				}
			}
			else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/allowcreation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /allowcreation [FamilyNr] [idDuJoueur/PartieDuNom]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 11 till 15 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   47th Street Saints Families Leader can only take FamilyNr 15 till 20 !"); return 1; }
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /allowcreation [FamilyNr] [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        family -= 1;
				        if(FamilyInfo[family][FamilyTaken] == 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr is already taken !" );
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've made %s the Leader of FamilyNr %d.",giveplayer,family);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        if(PlayerInfo[playerid][pLeader] == 5)
				        {
				            format(string, sizeof(string), "* Surenos Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 6)
				        {
				            format(string, sizeof(string), "* Luciano family Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 14)
				        {
				            format(string, sizeof(string), "* Nortenos Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 15)
				        {
				            format(string, sizeof(string), "* 47th Street Saints Families Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 16)
				        {
				            format(string, sizeof(string), "* Jefferson Saints Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        format(string, sizeof(string), "%s",giveplayer);
				        strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
				        FamilyInfo[family][FamilyMembers] ++;
				        FamilyInfo[family][FamilyTaken] = 1;
				        PlayerInfo[giveplayerid][pFMember] = family;
				        SaveFamilies();
				    }
				}
				else
				{
                    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
                    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/deletecreation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletecreation [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   47th Street Saints Families Leader can only take FamilyNr 6 till 10 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr isn't taken !");
				    return 1;
				}
				ClearFamily(family);
				SaveFamilies();
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	if(strcmp(cmd, "/forcerporte", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(gTeam[playerid] == 2 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
					    SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~r~Violation de la porte", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
					}
				}
				if (PlayerToPoint(3, playerid,1298.7075,-798.5981,84.1406))
				{
				    SetPlayerInterior(playerid,5);
					PlayerInfo[playerid][pInt] = 5;
					GameTextForPlayer(playerid, "~r~Violation de la porte", 5000, 1);
					SetPlayerPos(playerid, 1254.3436,-789.3809,1084.0078);
				}
				if (PlayerToPoint(3, playerid,2380.5647,-1785.7302,13.5469))
				{
				    SetPlayerPos(playerid, 318.4700,1117.5127,1083.8828);
					GameTextForPlayer(playerid, "~r~Violation de la porte", 5000, 1);
					SetPlayerInterior(playerid,5);
					SetPlayerFacingAngle(playerid, 0);
					PlayerInfo[playerid][pInt] = 5;
				}
				if (PlayerToPoint(3, playerid,2022.9038,-1120.2688,26.4210))
				{
				    SetPlayerPos(playerid, 1237.8329,-833.3148,1084.0078);
					GameTextForPlayer(playerid, "~r~Violation de la porte", 5000, 1);
					SetPlayerInterior(playerid,5);
					SetPlayerFacingAngle(playerid, 90);
					PlayerInfo[playerid][pInt] = 5;
				}
				if (PlayerToPoint(3, playerid,2770.6973,-1628.4293,12.1775))
				{
				    SetPlayerPos(playerid, 2464.8335,-1698.4218,1013.5078);
					GameTextForPlayer(playerid, "~r~Violation de la porte", 5000, 1);
					SetPlayerInterior(playerid,2);
					SetPlayerFacingAngle(playerid, 90);
					PlayerInfo[playerid][pInt] = 2;
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Flic / Soldier !");
			    return 1;
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "    Vous n'étes pas au Groupe de sécurité Area51 !");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /camera [number 1 - 6]  (6 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Camera Number can't be below 1 or above 6 !"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Flic / Soldier !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/divorce",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMarried] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas marié !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /divorce [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas proposer!"); return 1; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* Vous avez envoyé le documents du divorce %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s Pour envoyer le dossier du divorce  (faite /accepter divorce) pour accepter.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas marié à vous !");
						    return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de chez vous !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors ligne !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/demanderenmariage",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if( GetPlayerMoney(playerid) < 20000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Le Mariage et les frais de réception $20000 !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous êtes déjà marier !");
				return 1;
	        }
	        if(PlayerInfo[playerid][pPhousekey] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas besoin d'une chambre afin de laisser votre épouse / époux vivent !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /propose [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est déjà marier !");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPhousekey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce joueur possède une maison, vous ne pouvez pas être marié !");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPbiskey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ce joueur a une entreprise, ne peuvent pas être marié !");
			            return 1;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas proposer !"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Vous avez proposé à %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s Voulez vous Mr vous marier avec Madame ? (pour accepter fait /accepter marriage).", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors Ligne !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/demandertemoin",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /demandertemoin [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas Proposer à vous!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Vous proposer à %s à être témoin de votre mariage.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s Vous demande à être Témoin de sont Mariage (faite /accepter Temoin) pour être accepter.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce joueurs est Hors Ligne !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/settax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas le Maire !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /settax [Montant]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000) { SendClientMessage(playerid, COLOR_GREY, "   L'impôt ne pas peut être en-dessous de 1 ou au-dessus de 5000 !"); return 1; }
			Tax = moneys;
			SaveStuff();
			format(string, sizeof(string), "* L'impôt est $%d par joueur, dorénavant.", Tax);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/donnertax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas Maire !");
				return 1;
	        }
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Il n'y a pas d'argent à gauche en panne d'impôt !");
				return 1;
			}
			new Cops = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			        {
			            Cops += 1;
			        }
			    }
			}
			if(Cops >= 1)
			{
			    new value = Tax / 2;
			    new price = value / Cops;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				        {
				            format(string, sizeof(string), "* Vous recever $%d de l'impôt Banque du maire.",price);
							SendClientMessage(i, COLOR_WHITE, string);
							SafeGivePlayerMoney(i, price);
							Tax -= price;
				        }
				    }
				}
				SaveStuff();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Il n'y a aucun Flic En ligne en ce moment !");
				return 1;
			}
		}
		return 1;
	}
	/*if(strcmp(cmd,"/ecrire",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /read [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: Paper, TestPaper");
				return 1;
			}
	        if(strcmp(x_job,"paper",true) == 0)
			{
			    if(GotPaper[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Los Santos City: Journal _____________________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de Journal !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"testpaper",true) == 0)
			{
			    if(PlayerInfo[playerid][pJob] == 6)
			    {
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /read testpaper [papernr]");
						return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Paper Number can't be below 1 or above 10 !"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Il n'y a pas de journal écrit sur le nombre !");
					    return 1;
					}
			        SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Los Santos City: Journal _____________________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un Journaliste !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /read testpaper [papernr]");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/apporter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 6)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'etes pas journaliste !");
	            return 1;
	        }
			if(PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /apporter [papiernum]");
					return 1;
				}
		        new paper = strval(tmp);
		        if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Le nombre de papier ne peut pas être en-dessous de 1 ou au-dessus de 10 !"); return 1; }
				paper -= 1;
				if(PaperInfo[paper][PaperUsed] == 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Il n'y a aucun journal écrit sur ce nombre !");
				    return 1;
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		        format(string, sizeof(string), "* Vous pouvez maintenant livrer des journaux aux gens, journal : %s, par : %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperTitle]);
				strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperMaker]);
				strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText1]);
				strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText2]);
				strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText3]);
				strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText4]);
				strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText5]);
				strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText6]);
				strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText7]);
				strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
				BringingPaper[playerid] = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas au bâtiment de journaliste !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/articles", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 6)
	        {
				if(PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
				{
				    new number = 0;
				    for(new i = 0; i < sizeof(PaperInfo); i++)
				    {
				        number ++;
				        if(PaperInfo[i][PaperUsed] == 1)
				    	{
				        	format(string, sizeof(string), "|%d| News: %s, Par: %s",number,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  VOus n'êtes pas chez dans le batiment de la  MG6");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas un journaliste!");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/article", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 6)
	        {
	            if(!PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
				{
				    SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas dans le batiment de la MG6");
				    return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /article ecrire[articlenumero] ou /article supprimer[articlenumero]");
				    return 1;
				}
			    if(strcmp(x_nr,"ecrire",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /article ecrire [articlenumero]");
					    return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, " [Numero entre 1 et 10]"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Il y a deja un article avec ce nombres ! !");
					    return 1;
					}
					SendClientMessage(playerid, COLOR_WHITE, "* Vous produisez un nouveau journal");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Ecrivez de bon article !.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Merci d'entrer le titre du journal.");
					WritingPaper[playerid] = 1;
					WritingPaperNumber[playerid] = paper;
					WritingLine[playerid] = 1;
				}
				else if(strcmp(x_nr,"supprimer",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] >= 4)
				    {
				        tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /paper supprimer [articlenumero]");
						    return 1;
						}
						new paper = strval(tmp);
						if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Paper Number can't be below 1 or above 10 !"); return 1; }
						paper -= 1;
						ClearPaper(paper);
						new number = paper; number += 1;
						format(string, sizeof(string), "You've deleted Newspaper %d.",number);
						SendClientMessage(playerid, COLOR_YELLOW, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   You need Rank 4 in order to Delete Newspapers !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /article ecrire [articlenumero] or /article supprimer [articlenumero]");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un journaliste de nouvelles !");
	            return 1;
			}
	    }
	    return 1;
	}*/
if(strcmp(cmd, "/vetements", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	            if(IsAtClothShop(playerid))
	            {
	                tmp = strtok(cmdtext, idx);
	                new id = strval(tmp);
			        if(!strlen(tmp))
		        	{
			            	SendClientMessage(playerid, COLOR_WHITE, "[USAGE:] /vetements [skinid]");
			            	return 1;
		        	}
		        	if(IsACopSkin(id) == 0)
					{
						 if(IsValidSkin(id))
					     {
				    		   SetPlayerSkin(playerid,id);
				    		   PlayerInfo[playerid][pChar] = id;
							   SendClientMessage(playerid, COLOR_LIGHTBLUE, "**Vendeuse: Wouah ! ta la classe !");
							   return 1;
					  	 }
					}
	            }
	    }
	}
    if(strcmp(cmd, "/tutoriel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
   			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /turoriel [playerid/PartiDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3000)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "[ADMIN]: Admin a fait relire le turoriel à %s ", giveplayer);
      					KickLog(string);
      					PlayerInfo[giveplayerid][pTut] = 0;
						format(string, sizeof(string), "Vous avez été expulsé de la ville. Vous avez besoin de relire le tutoriel.");
						SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
						Kick(giveplayerid);
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "[ADMIN]: Admin à kické %s et à était forcé de relire le turoriel.", giveplayer);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d n'est pas un Joueur actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
		if(strcmp(cmd, "/n", true) == 0 || strcmp(cmd, "/nouveau", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous devez d'abord vous identifiez !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pLevel] > 2 && PlayerInfo[playerid][pAdmin] < 500)
			{
				SendClientMessage(playerid, COLOR_GRAD2, " Chat réservé au nouveau joueur qui ont un niveau infèrieur à 3  !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Vous ne pouvez plus parler, Vous avez était silencez !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/n)ouveau [Chat des Nouveau]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] == 0)
			{
			format(string, sizeof(string), "[Nouveau] %s: %s " , sendername, result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 500)
            {
			format(string, sizeof(string), "[Membre de confiance]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 1000)
            {
			format(string, sizeof(string), "[Moderateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 2000)
            {
			format(string, sizeof(string), "[Moderateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 2250)
            {
			format(string, sizeof(string), "[Moderateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 2500)
            {
			format(string, sizeof(string), "[Moderateur]: %s " ,  result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 2750)
            {
			format(string, sizeof(string), "[Moderateur]: %s " ,  result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 3000)
            {
			format(string, sizeof(string), "[Administrateur]: %s " ,  result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 3250)
            {
			format(string, sizeof(string), "[Administrateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 3500)
            {
			format(string, sizeof(string), "[Administrateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 3750)
            {
			format(string, sizeof(string), "[Administrateur]: %s " ,  result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 4000)
            {
			format(string, sizeof(string), "[Administrateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
			else if(PlayerInfo[playerid][pAdmin] == 9999)
            {
			format(string, sizeof(string), "[Administrateur]: %s " , result);
			SendNouveauMessage(COLOR_GREEN,string);
			printf("%s", string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/lotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous avez déjà un billet de loterie !");
	            return 1;
	        }
	        if( GetPlayerMoney(playerid) < 50)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous avez besoin de $50 pour un billet de loterie !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"USAGE: /lotto [number]");
				return 1;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 80) { SendClientMessage(playerid, COLOR_GREY, "   Nombre de loterie pas en-dessous de 1 ou au-dessus de 80 !"); return 1; }
			format(string, sizeof(string), "* Vous avez acheté un billet de loterie avec le nombre : %d.", lottonr);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SafeGivePlayerMoney(playerid, - 50);
			PlayerInfo[playerid][pLottoNr] = lottonr;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/prendre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] == 2 || IsACop(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous devez être le rang 2 ou plus haut pour cette action !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Prendre Permis __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre [Permisname] [idDuJoueur/PartieDuNom]");
			  		SendClientMessage(playerid, COLOR_GREY, "Available names: PermisDeConduire, PermisDeVol, PermisDeBateau, PermisArme, Armes, Drogues, Materiaux");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"PermisDeConduire",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre PermisDeConduire [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* You have taken away %s's Drivers Permis.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s has taken away your Drivers Permis.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"PermisDeVol",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre PermisDeVol [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* You have taken away %s's Flying Permis.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s has taken away your Flying Permis.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "  Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   T Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"PermisArme",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre PermisArme [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* You have taken away %s's Weapon Permis.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s A enlever votre permis d'arme .", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pGunLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "  Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"PermisDeBateau",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre boatPermis [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* You have taken away %s's Boat Permis.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s A enlever votre permis de bateau.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pBoatLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Armes",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre Armes [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* You have taken away %s's Weapons.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s A enlever vos armes.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        SafeResetPlayerWeapons(giveplayerid);
						        PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
						        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
						        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
						        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
						        PlayerInfo[giveplayerid][pInvWeapon] = 0; PlayerInfo[giveplayerid][pInvAmmo] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Drogues",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre Drogues [idDuJoueur/PartieDuNom]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
							    format(string, sizeof(string), "* You have taken away %s's drogue.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s A enlever votre drogue.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Materiaux",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prendre Materiaux [idDuJoueur/PartieDuNom]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
							    format(string, sizeof(string), "* You have taken away %s's Materials.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Officier %s A enlever vos Materiaux.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Ce joueur n'est pas en ligne !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nom inconnu  !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un flic !");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/boire", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAtBar(playerid))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|____________________ Bar Drinks ______________________|");
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /boire [nomdelabosisson]");
				  		SendClientMessage(playerid, COLOR_GREY, "Sans Alcool : Eau ($1), Coca ($2)");
				  		SendClientMessage(playerid, COLOR_GREY, "Peu d'acool: Bierre ($6), Bourbon($8), Champagne($12)");
				  		SendClientMessage(playerid, COLOR_GREY, "Alcool fort : Vodka ($16), Cristal($20)");
				  		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Attention boire trop nuit gravement a la santé !");
						SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________________|");
						return 1;
					}
				    if(strcmp(x_nr,"bierre",true) == 0)
					{
						if(PlayerInfo[playerid][pAge] < 16)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !");
						    return 1;
						}
  			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit de la bièrre à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 6);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 10; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 10.0); }
						}
					}
					else if(strcmp(x_nr,"bourbon",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du bourbon à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 8);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"champagne",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du champagne à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
                    else if(strcmp(x_nr,"vodka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit de la vodka à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 16);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 27.0); }
						}
					}
                    else if(strcmp(x_nr,"cristal",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !");
						    return 1;
						}
						SetPlayerSpecialAction(playerid,23);
						SetPlayerDrunkLevel(playerid,800);
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du cristal à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 20);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						GetPlayerHealth(playerid, health);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 40; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 40.0); }
						}
					}
					else if(strcmp(x_nr,"eau",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 1);
						GetPlayerHealth(playerid, health);
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit de l'eau à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 50.0); }
						}
						else if(health > 100)
						{
						    SetPlayerHealth(playerid, 100);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Barman : Je ne connais pas ce nom désolé.");
					    return 1;
					}
					GetPlayerHealth(playerid, health);
					if (health > 100) SetPlayerHealth(playerid, 100);

	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "  Vous ne pouvez pas boire plus, vous aller vomir ");
	                return 1;
	            }
	        }
	        else if(PlayerToPoint(5, playerid, 1255.9084,-791.8105,1085.3828) || PlayerToPoint(5, playerid,316.8821,-1508.9851,24.9219))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|____________________ Bar Drinks ______________________|");
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /boire [nomdelabosson]");
				  		SendClientMessage(playerid, COLOR_GREY, "Cafe: Cappuccino ($4), Lait($5), Macchiato($5)");
				  		SendClientMessage(playerid, COLOR_GREY, "Mixes/liqueur: Limoncello($8), Amaretto($7), Martini($12)");
				  		SendClientMessage(playerid, COLOR_GREY, "Vin : Merlot ($15), Sangiovese($18), Frizzante($16)");
				  		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Attention : L'alcool nuit gravement a la santé !");
						SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________________|");
						return 1;
					}
					else if(strcmp(x_nr,"cappuccino",true) == 0)
					{
						GetPlayerHealth(playerid, health);
						if(health < 100)
					    {
							SafeGivePlayerMoney(playerid, - 4);
					        SetPlayerHealth(playerid, health + 30);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s prend une tasse de cappuccino et la boit encore chaude.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    }
					}
					else if(strcmp(x_nr,"lait",true) == 0)
					{
						SafeGivePlayerMoney(playerid, - 5);
				        SetPlayerHealth(playerid, health + 30);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s prend un verre de lait.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(strcmp(x_nr,"macchiato",true) == 0)
					{
						SafeGivePlayerMoney(playerid, - 5);
				        SetPlayerHealth(playerid, health + 30);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s boit une tasse de café.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				    else if(strcmp(x_nr,"limoncello",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du limoncello à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
				    else if(strcmp(x_nr,"amaretto",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit de l'amaretto à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
				    else if(strcmp(x_nr,"martini",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du martini à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
				    else if(strcmp(x_nr,"merlot",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du merlot à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
				    else if(strcmp(x_nr,"sangiovese",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du sangiovese à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
				    else if(strcmp(x_nr,"frizzante",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Barman : Desolé vous n'avez l'age requis pour boire !.");
						    return 1;
						}
 			    		GetPlayerName(playerid, sendername, sizeof(sendername));
			    		format(string, sizeof(string), "* %s boit du frizzante à la bouteille .", sendername);
				    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerMoney(playerid, - 12);
						GetPlayerHealth(playerid, health);
						SetPlayerSpecialAction(playerid,22);
						SetPlayerDrunkLevel(playerid,800);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas dans un bar !!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/setchampion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 9999)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /setchamp [ID]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
		        if(IsPlayerConnected(giveplayerid))
		        {
		            if(giveplayerid != INVALID_PLAYER_ID)
		            {
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		                new nstring[MAX_PLAYER_NAME];
						format(nstring, sizeof(nstring), "%s", giveplayer);
						strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
						Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
						Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
						SaveBoxer();
						format(string, sizeof(string), "* Vous faites de %s le nouveau Champion de Boxe.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Ce joueur est Hors Ligne !");
		            return 1;
		        }
	        }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Vous n'êtes pas autoriser à utiliser cette commande !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/boxstats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 11)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas un boxeur !");
	            return 1;
	        }
	        new ttext[20];//Title
	        new clevel = PlayerInfo[playerid][pBoxSkill];
			if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
			else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
			else if(clevel >= 201 && clevel <= 400) { ttext = "Professional"; }
	        new ntext[20];//NickName
	        new level = PlayerInfo[playerid][pWins];
	        if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	        {
	            ntext = "Undefeated";
	        }
	        else
	        {
	            if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
	            else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
	            else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
	            else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
	            else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
	            else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
	            else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
	            else if(level >= 71) { ntext = "Itallion Stallion"; }
	        }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Records de boxe __________________|");
	        format(string, sizeof(string), "| Champion: %s, with [%d] Winnings and [%d] Losses.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Current Title: %s.", ttext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Current NickName: %s.", ntext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total Wins: %d.", PlayerInfo[playerid][pWins]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total Losses: %d.", PlayerInfo[playerid][pLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
	        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
		}
		return 1;
	}
	if(strcmp(cmd, "/lancerduel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 11)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un boxeur ! !");
	            return 1;
	        }
	        if(InRing > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous êtes deja en combat!");
	            return 1;
	        }
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous vous battez deja");
	            return 1;
	        }
	        if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'etes pas dans une salle de boxe");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /lancerduel [ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous battre vous meme si ?!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Vous proposez un duel à %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Le boxeur %s veut se battre contre vous !(tapez /accepter boxe) pour accepter le coombat.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        BoxOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ce joeur n'est pas à cooté de vous !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce jouer est Hors ligne  !");
			    return 1;
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/music", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCrashed])
	        {
		        new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Music __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /music [name]");
			  		SendClientMessage(playerid, COLOR_GREY, "Available names: On, Off, Next");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"next",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Unknown music command !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You don't have a CD-Player !");
			    return 1;
			}
	    }
	    return 1;
 }*/
	/*if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Service Names __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /service [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Pizza");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Taxi Drivers On Duty at the moment, try again later !");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   You can't call for a Taxi now !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Taxi Driver. (use /accepter taxi to accept the call)", sendername);
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Taxi Driver, wait for a reply.");
		    	TaxiCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"Pizza",true) == 0)//added lookagain
   			{
       			if(PizzaBoys < 1)
          		{
              		SendClientMessage(playerid, COLOR_GREY, "   There are no Pizza boys On Duty at the moment, try again later!");
              		return 1;
          		}
       			GetPlayerName(playerid, sendername, sizeof(sendername));
       			format(string, sizeof(string), "** %s is in need of a Pizza. (use /accepter Pizza to accept the call)", sendername);
       			SendJobMessage(17, COLOR_LIGHTBLUE, string);
       			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered a Pizza, wait for a reply.");
       			PizzaCall = playerid;
       			return 1;
   			}
			else if(strcmp(x_nr,"bus",true) == 0)
			{
			    new routezonecheck = IsInBusrouteZone(playerid);
				new drivercount = 0;
				if (routezonecheck == 0)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteEast[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "There are currently %d bus drivers on the east route. The route is as follows:", drivercount);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, string);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, " ");
						SendBusRoute(playerid, 0);
					}
					else SendClientMessage(playerid, COLOR_GREY, "There are no bus drivers on the east route at this time.");
				}
				else if (routezonecheck == 1)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteWest[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "There are currently %d bus drivers on the west route. The route is as follows:", drivercount);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, string);
						SendBusRoute(playerid, 1);
					}
					else SendClientMessage(playerid, COLOR_GREY, "There are no bus drivers on the west route at this time.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "No bus services are running in this area at the current time.");
		    	return 1;
			}
			else if(strcmp(x_nr,"medic",true) == 0)
			{
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Medics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Medic. (use /accepter medic to accept the call)", sendername);
		    	SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Medic, wait for a reply.");
		    	MedicCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"mechanic",true) == 0)
			{
			    if(Mechanics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Car Mechanics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Car Mechanic. (use /accepter mecanicien to accept the call)", sendername);
		    	SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Car Mechanic, wait for a reply.");
		    	MechanicCall = playerid;
		    	return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unknown service name !");
			    return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/services", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "____________Los Santos Entreprises____________");
	    	SendClientMessage(playerid, COLOR_WHITE, "111 - livreur de pizza 222 - Bus, 444 - Taxi,");
			SendClientMessage(playerid, COLOR_WHITE, "555 - Mécanitien, 3900 - News, 911 - Urgences");
			SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ligotter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Rope[playerid] != 0)
			{
			    if(PlayerInfo[playerid][pLevel] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous devez être minimum niveau 3 pour ligotter ! ");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ligotter [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerTied[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Ce joueur es déjà ligotter !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    /*new car = GetPlayerVehicleID(playerid);*/
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous ligotter!"); return 1; }
						    /*if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))*/
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Vous avez été ligotté par %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Vous ligotté %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								SendClientMessage(playerid, COLOR_GREEN, "INFO: vous pouvez lui bander les yeux (/bander) et le bailloner (/bailloner)");
								format(string, sizeof(string), "* %s sort une corde et l'attache solidement %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Ligotte", 2500, 3);
								TogglePlayerControllable(giveplayerid, 0);
								PlayerTied[giveplayerid] = 1;
								Rope[playerid]--;
						    }
				            /*else*/
						    {
						        SendClientMessage(playerid, COLOR_GREY, " Est fixement ligotter");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas près de vous !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas connecté !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de corde !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deligotter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deligotter [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous deligotter!"); return 1; }
						if(PlayerTied[giveplayerid])
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Vous avez été déligotté par %s.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Vous déligottez %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							GameTextForPlayer(giveplayerid, "~g~Deligotte", 2500, 3);
							TogglePlayerControllable(giveplayerid, 1);
							PlayerTied[giveplayerid] = 0;
							format(string, sizeof(string), "* %s détache %s et reprend la corde.", sendername, giveplayer);
      						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      						Rope[playerid]++;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas ligotté !");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas près de vous !");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas connecté !");
			    return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/deligotterpolice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid))
			{
			    /*if(PlayerInfo[playerid][pRank] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You need Rank 3 or higher to untie people !");
			        return 1;
			    }*/
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deligoterpolice [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous délier !"); return 1; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* le policier %s vous a déligotter.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Vous avez déligotter %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~g~Deligotter", 2500, 3);
								TogglePlayerControllable(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								format(string, sizeof(string), "* %s prend son couteau et coupe la corde qui ligottais %s.", sendername, giveplayer);
      							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas attaché !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est hors ligne !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un flic !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vendre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Selling __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sell [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Available names: Poissons");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"Poissons",true) == 0)
			{
			    if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You are not in a 24-7 !");
					return 1;
				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sell fish [fish]");
					return 1;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fish number cant be below 1 or above 5 !"); return 1; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(1) !"); return 1; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(2) !"); return 1; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(3) !"); return 1; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(4) !"); return 1; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(5) !"); return 1; }
				//ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 10)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 10 LBS or more.");
				            return 1;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]) / 3;
                        price = price * Fishes[playerid][pWeight1] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]) / 3;
                        price = price * Fishes[playerid][pWeight2] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]) / 3;
                        price = price * Fishes[playerid][pWeight3] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]) / 3;
                        price = price * Fishes[playerid][pWeight4] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]) / 3;
                        price = price * Fishes[playerid][pWeight5] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
                        format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unknown Selling Name !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/transportenservice",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 12|| PlayerInfo[playerid][pJob] == 13)
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxiDrivers -= 1;
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "* Vous n'êtes plus en service.");
					SafeGivePlayerMoney(playerid, TransportMoney[playerid]);
					/*ConsumingMoney[playerid] = 1;*/ TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return 1;
				}
				new car = GetPlayerVehicleID(playerid);
				if(IsAnTaxi(car))
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /transportenservice [prix]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 250) { SendClientMessage(playerid, COLOR_GREY, "   Le prix doit etre compris entre 1$ et 250$ !"); return 1; }
					    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "[Info] Chauffeur de Taxi %s es en service, faite /appeler 444 pour appeler un Taxi. Prix: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(0xEDCA29AA,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas le conducteur !");
					    return 1;
					}
				}
				else if(IsAnBus(car))
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /transportenservice [prix]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 250) { SendClientMessage(playerid, COLOR_GREY, "   Le prix doit être entre $1 et $250 !"); return 1; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Le chauffeur de bus %s est en service, prix : $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas le conducteur !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas dans un taxi/autobus !");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Vous n'êtes pas un chauffeur de taxi/bus !");
			    return 1;
			}
	    }
	    return 1;
 	}
 	/*if(strcmp(cmd,"/eat",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Cant eat a Fish while you are fighting !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /eat [cook number]");
				return 1;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Cook number cant be below 1 or above 5 !"); return 1; }
			else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(1) !"); return 1; }
			else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(2) !"); return 1; }
			else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(3) !"); return 1; }
			else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(4) !"); return 1; }
			else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(5) !"); return 1; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 40)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 2:
					{
					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 3:
					{
					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 4:
					{
					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 5:
					{
					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Your health is high enough, can only eat at 40 Health !");
			    return 1;
			}
	    }
	    return 1;
	}*/
	if(strcmp(cmdtext, "/mangerpizza",true)==0) //added
 	{
		if (bPizza[playerid] != 1)
     	{
			SendClientMessage(playerid, COLOR_GREY, "   Vous ne prenez pas la pizza, /appeler 111");
         	return 1;
  		}
  		SetPlayerHealth(playerid, 100);
  		GetPlayerName(playerid, sendername, sizeof(sendername));
  		format(string, sizeof(string), "* Vous avez manger une pizza vous êtes en pleine forme");
  		SendClientMessage(playerid, COLOR_WHITE, string);
  		format(string, sizeof(string), "* %s prend sa pizza et la mange", sendername);
  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  		bPizza[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/vendrepizza", true) ==0)
	{
    	if (PlayerInfo[playerid][pJob] == 15)
     	{
   			if (sPizza[playerid] == 1)
      		{
    			tmp = strtok(cmdtext, idx);
    			if(!strlen(tmp))
    			{
     				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vendrepizza [playerid/PartiDuNom]");
     				return 1;
    			}
    			giveplayerid = ReturnUser(tmp);
    			if(IsPlayerConnected(giveplayerid))
    			{
        			if(giveplayerid != INVALID_PLAYER_ID)
        			{
            			if (ProxDetectorS(8.0, playerid, giveplayerid))
          				{
       						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
       						GetPlayerName(playerid, sendername, sizeof(sendername));
       						format(string, sizeof(string), "* Vous avez livré une pizza à %s", giveplayer);
       						SendClientMessage(playerid, COLOR_WHITE, string);
       						format(string, sizeof(string), "* Le Pizza boy %s vous a donné une pizza /mangerpizza", sendername);
       						SendClientMessage(giveplayerid, COLOR_WHITE, string);
       						format(string, sizeof(string), "* %s prend la pizza et la donne à %s", sendername ,giveplayer);
       						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       						bPizza[giveplayerid] = 1;
       						sPizza[playerid] = 0;
      					}
      					else
          				{
              				SendClientMessage(playerid, COLOR_GREY, "   Ce Joueur n'est pas prés de vous!");
              				return 1;
      					}
     				}
    			}
    			return 1;
			}
   			else
   			{
    			SendClientMessage(playerid, COLOR_GREY, "   Allez prendre une pizza à la cuisine !");
   			}
  		}
		return 1;
 	}
 	/*if(strcmp(cmd,"/cook",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[256];
	            x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cook [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Available names: Lastfish, Fish, Chicken, Hamburger, Pizza.");
					return 1;
				}
				if(strcmp(x_nr,"lastfish",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
					        return 1;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   You haven't even catched a Fish yet !");
				        return 1;
				    }
				}
				else if(strcmp(x_nr,"fish",true) == 0)
				{
				    new found = 0;
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cook fish [fishnumber]");
						return 1;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fish number cant be below 1 or above 5 !"); return 1; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(1) !"); return 1; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(2) !"); return 1; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(3) !"); return 1; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(4) !"); return 1; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(5) !"); return 1; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_WHITE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
					    return 1;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"chicken",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Chickens with you !");
				            return 1;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   You need to be at Cluckin Bell to Cook this !");
					    return 1;
				    }
				}
				else if(strcmp(x_nr,"hamburger",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Hamburgers with you !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You need to be at Burger Shot to Cook this !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"pizza",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Pizzas with you !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You need to be at Well Stacked Pizza to Cook this !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Invalid Cooking Name !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not at one of the Cooking Places (Cluckin Bell / Burger Shot / Well Stacked Pizza).");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd,"/cooked",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cooking __________________|");
	        format(string, sizeof(string), "** (1) Made: %s.   Weight: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Made: %s.   Weight: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Made: %s.   Weight: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Made: %s.   Weight: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Made: %s.   Weight: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}*/
	if(strcmp(cmd,"/pecher",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFishTool] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas une canne à pêche avec vous !");
			    return 1;
			}
	        if(PlayerInfo[playerid][pFishes] > 5)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Caught to many fish, wait till its reduced !");
	            return 1;
	        }
	        if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous avez déjà pêché 5 poissons, vente/les mangez/libérez d'abord !");
	            return 1;
	        }
	        if(IsAtFishPlace(playerid))
	        {
	            new Caught;
	            new rand;
	            new fstring[MAX_PLAYER_NAME];
	            new Level = PlayerInfo[playerid][pFishSkill];
	            if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
	            else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
	            else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
	            else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
	            else if(Level >= 401) { Caught = random(180)-70; }
	            rand = random(FishNamesNumber);
	            if(Caught <= 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Ligne cassée !");
	                return 1;
	            }
	            else if(rand == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez attrapé une veste et l'avez jetée !");
	                return 1;
	            }
	            else if(rand == 4)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez attrapé un pantalon et l'avez jeté !");
	                return 1;
	            }
	            else if(rand == 7)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez attrapé un bidon et l'avez jeté !");
	                return 1;
	            }
	            else if(rand == 10)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez attrapé une paire de chaussures et l'avez jetée !");
	                return 1;
	            }
	            else if(rand == 13)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez attrapé quelques ordures et les avez jetées !");
	                return 1;
	            }
	            else if(rand == 20)
	            {
	                new mrand = random(500);
	                format(string, sizeof(string), "* Vous avez attrapé un sac d'argent, contenant $%d.", mrand);
					SendClientMessage(playerid, COLOR_WHITE, string);
	                SafeGivePlayerMoney(playerid, mrand);
	                return 1;
	            }
		        if(PlayerInfo[playerid][pFishLic] < 1)
		        {
	            	WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Pêche illégale");
				}
		        if(Fishes[playerid][pWeight1] == 0)
		        {
		        	PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight1] = Caught;
					format(string, sizeof(string), "* Vous avez attrapé un(e) %s, qui pèse %d livres.", Fishes[playerid][pFish1], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 1;
					Fishes[playerid][pFid1] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Votre vieux record de %d a été depassé , nouveaux plus grand poisson est %d livres.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
     			}
		        else if(Fishes[playerid][pWeight2] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight2] = Caught;
					format(string, sizeof(string), "* Vous avez attrapé un %s, qui pèse %d livres.", Fishes[playerid][pFish2], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 2;
					Fishes[playerid][pFid2] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Votre vieux record de %d a été depassé , nouveaux plus grand poisson est %d livres.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight3] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight3] = Caught;
					format(string, sizeof(string), "* Vous avez attrapé un %s, qui pèse %d livres.", Fishes[playerid][pFish3], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 3;
					Fishes[playerid][pFid3] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Votre vieux record de %d a été depassé , nouveaux plus grand poisson est %d livres.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight4] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight4] = Caught;
					format(string, sizeof(string), "* Vous avez attrapé un %s, qui pèse %d livres.", Fishes[playerid][pFish4], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 4;
					Fishes[playerid][pFid4] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Votre vieux record de %d a été depassé , nouveaux plus grand poisson est %d livres.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight5] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight5] = Caught;
					format(string, sizeof(string), "* Vous avez attrapé un %s, qui pèse %d livres.", Fishes[playerid][pFish5], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 5;
					Fishes[playerid][pFid5] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Votre vieux record de %d a été depassé , nouveaux plus grand poisson est %d livres.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez aucun espace pour vos poissons !");
		            return 1;
		        }
	            if(PlayerInfo[playerid][pFishSkill] == 50)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de pêche est maintenant le niveau 2, vous peut maintenant pêcher des poissons plus lourds."); }
				else if(PlayerInfo[playerid][pFishSkill] == 250)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de pêche est maintenant le niveau 3, vous peut maintenant pêcher des poissons plus lourds."); }
				else if(PlayerInfo[playerid][pFishSkill] == 500)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de pêche est maintenant le niveau 4, vous peut maintenant pêcher des poissons plus lourds."); }
				else if(PlayerInfo[playerid][pFishSkill] == 1000)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence de pêche est maintenant le niveau 5, vous peut maintenant pêcher des poissons plus lourds."); }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas à un endroit de pêche (grande roue Rods) ou sur un bateau de pêche !");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/poissons",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Fishes __________________|");
	        format(string, sizeof(string), "** (1) Fish: %s.   Weight: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Fish: %s.   Weight: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Fish: %s.   Weight: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Fish: %s.   Weight: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Fish: %s.   Weight: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/jeterpoisson",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
	            SendClientMessage(playerid, COLOR_GREY, "  Vous avez renvoyé un poisson dans le fleuve !");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "    Vous vous catché méme avec un poisson !");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/jeterallpoisson",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				SendClientMessage(playerid, COLOR_GREY, "  Vous renvoyez tous vos poissons dans le fleuve !");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous vous catché méme avec un poisson !");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/Permis",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[20];
	        new text2[20];
	        new text3[20];
	        new text4[20];
	        new text5[20];
			if(PlayerInfo[playerid][pCarLic]) { text1 = "Passé"; } else { text1 = "Pas Passé"; }
            if(PlayerInfo[playerid][pFlyLic]) { text4 = "Passé"; } else { text4 = "Pas Passé"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Passé"; } else { text2 = "Pas Passé"; }
            if(PlayerInfo[playerid][pFishLic]) { text3 = "Passé"; } else { text3 = "Pas Passé"; }
	        if(PlayerInfo[playerid][pGunLic]) { text5 = "Passé"; } else { text5 = "Pas Passé"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Permis __________________|");
	        SendClientMessage(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "** Permis de Conduire: %s.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Permis de Vol: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Permis de bateau: %s.", text2);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Permis de peche: %s.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Permis D'armes: %s.", text5);
		    SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
		}
	    return 1;
 	}
 	/*if(strcmp(cmd,"/members",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new teamnumber;
			if (PlayerInfo[playerid][pLeader] != 0) teamnumber = PlayerInfo[playerid][pLeader];
			else if (PlayerInfo[playerid][pMember] != 0) teamnumber = PlayerInfo[playerid][pMember];
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "You are not a member of a team!");
				return 1;
			}
	    	SendClientMessage(playerid, 0x808000AA, "**Members Online**");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i))
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, sizeof(string), "");
					if (PlayerInfo[i][pLeader] == teamnumber) format(string, sizeof(string), "%s (LEADER)",sendername);
					else if (PlayerInfo[i][pMember] == teamnumber) format(string, sizeof(string), "%s, Rank: %d.",sendername, PlayerInfo[i][pRank]);
					if (strlen(string) > 1) SendClientMessage(playerid, 0xF5DEB3AA, string);
				}
			}
		}
		return 1;
	}*/
 	if(strcmp(cmd,"/montrerpermis",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /montrerpermis [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Show Permiss to yourself, use /permis!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text2[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "Passé"; } else { text1 = "Pas Passé"; }
                        if(PlayerInfo[playerid][pFlyLic]) { text4 = "Passé"; } else { text4 = "Pas Passé"; }
						if(PlayerInfo[playerid][pBoatLic]) { text2 = "Passé"; } else { text2 = "Pas Passé"; }
				        if(PlayerInfo[playerid][pFishLic]) { text3 = "Passé"; } else { text3 = "Pas Passé"; }
				        if(PlayerInfo[playerid][pGunLic]) { text5 = "Passé"; } else { text5 = "Pas Passé"; }
				        format(string, sizeof(string), "|__________ Permis de %s __________|", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "** Permis de Conduire: %s.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Permis de Vol: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Permis de bateau: %s.", text2);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Permis de peche: %s.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Permis D'armes: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s vous a montrer ses permis.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* vous avez montrer vos permis a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd, "/jetterdrogue", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pLevel] > 0)
		    {
		        {
		            if(PlayerInfo[playerid][pDrugs] >= 0)
					{
         			    PlayerInfo[playerid][pDrugs] = 0;
					    GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), "* %s prend son sac de drogue et le jette.", sendername);
			            ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(PlayerInfo[playerid][pDrugs] == 0)
					{
					SendClientMessage(playerid, COLOR_GREY, " Vous n'avez pas de drogue sur vous!");
					}
				 }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas assez élevé pour vous débarrasser de votre drogue!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/jettermatos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pLevel] > 0)
		    {
		        {
		            if(PlayerInfo[playerid][pMats] >= 0)
					{
         			    PlayerInfo[playerid][pMats] = 0;
					    GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), "* %s prend son matos et le jette.", sendername);
			            ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(PlayerInfo[playerid][pMats] == 0)
					{
					SendClientMessage(playerid, COLOR_GREY, " Vous n'avez pas de matos sur vous!");
					}
				 }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas assez élevé pour vous débarrasser de votre drogue!");
			}
		}//not connected
		return 1;
	}
 	if(strcmp(cmd,"/fouiller",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fouiller [id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tu ne peux pas te fouiller!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20];
					    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drogue."; } else { text1 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materiaux."; } else { text2 = "| Poche Vide."; }
					    if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) { text3 = "| Poissons."; } else { text3 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Annuaire."; } else { text4 = "| Poche Vide."; }
					    if(PlayerInfo[giveplayerid][pWatch] > 0) { text5 = "| Montre."; } else { text5 = "| Poche Vide."; }
					    new sweapon, sammo;
					    text6 = "| Poche Vide.";
					    for (new i=0; i<9; i++)
					    {
					        GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
					        if(sweapon != 0 && sammo != 0)
					        {
					            text6 = "| Armes.";
					        }
					    }
					    format(string, sizeof(string), "|__________ Objects de %s __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "%s.", text1);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text2);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text3);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text4);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text5);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						if(PlayerInfo[giveplayerid][pSex] == 1) { format(string, sizeof(string), "* %s fouille %s et cherche des objects illegaux.", sendername ,giveplayer); }
						else { format(string, sizeof(string), "* %s fouille %s et cherche des objects illegaux", sendername ,giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Ce joueur n'est pas a coter de toi !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Ce joueur n'est pas connecté!");
	            return 1;
	        }
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/fouillerinv",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fouillerinv [id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tu ne peux pas te fouiller!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "|__________ %s Inventaire __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        if(PlayerInfo[giveplayerid][pInvWeapon] != 0)
				        {
				            new gunname[100];
				            GetWeaponName(PlayerInfo[giveplayerid][pInvWeapon], gunname, sizeof(gunname));
				        	format(string, sizeof(string), "| Arme: %s, Munitions: %d", gunname, PlayerInfo[giveplayerid][pInvAmmo]);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "| l'inventaire est vide");
						}
						format(string, sizeof(string), "  %s a fouillé l'inventaire.", sendername);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	/*if(strcmp(cmd,"/sellcar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 10)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not a Car Dealer !");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not in a Car !");
			    return 1;
			}
			if(IsAnOwnableCar(idcar))
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Use /v sellto to sell you car to other person !");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellcar [idDuJoueur/PartieDuNom] [prix]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellcar [idDuJoueur/PartieDuNom] [prix]");
				return 1;
			}
			new money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Price not below $1 or above $99999 !"); return 1; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Cant sell to yourself!");
					        return 1;
					    }
					    if(CarCalls[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   That player has already bought a car, has to use /appelercar first !");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* You offerd %s to buy your Car for $%d .", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Car Dealer %s wants to sell you his Car for $%d, (type /accepter car) to buy.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						CarOffer[giveplayerid] = playerid;
						CarPrice[giveplayerid] = money;
						CarID[giveplayerid] = GetPlayerVehicleID(playerid);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name !");
			    return 1;
			}
	    }
		return 1;
	}*/
	/*if(strcmp(cmd,"/portable",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		    {
			    if(ConnectedToPC[playerid] == 255)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* You have shutdowned your Laptop, and Disconnected from your Agency.");
			        ConnectedToPC[playerid] = 0;
			        return 1;
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    SendClientMessage(playerid, COLOR_GREY, "* You have booted up your Laptop, and Connected to your Agency.");
			    SendClientMessage(playerid, COLOR_WHITE, "|___ Hitman Agency ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - News");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Contracts");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Givehit");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Order");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ranks");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Logout");
				SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
				ConnectedToPC[playerid] = 255;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You are not a Member of the Hitman Agency !");
		        return 1;
		    }
		}
	    return 1;
	}*/
	/*if(strcmp(cmd,"/materials",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 22)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not a Materials supplier !");
			    return 1;
			}
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /materials [name]");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: Get, Deliver.");
				return 1;
			}
			if(strcmp(x_nr,"get",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,597.1277,-1248.6479,18.2734))
			    {
			        if(MatsHolding[playerid] >= 10)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   You can't hold any more Materials Packages !");
				        return 1;
			        }
			        tmp = strtok(cmdtext, idx);
			        if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USAGE: /materials get [ammount]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 10) { SendClientMessage(playerid, COLOR_GREY, "   Package Number can't be below 1 or higher then 10 !"); return 1; }
					new price = moneys * 100;
					if( GetPlayerMoney(playerid) > price)
					{
					    format(string, sizeof(string), "* You bought %d Materials Packages for $%d.", moneys, price);
					    SendClientMessage(playerid, COLOR_WHITE, string);
					    SafeGivePlayerMoney(playerid, - price);
					    MatsHolding[playerid] = moneys;
					}
					else
					{
					    format(string, sizeof(string), "   You can't afford the $%d !", price);
					    SendClientMessage(playerid, COLOR_GREY, string);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not at the Materials Package Building in Los Santos City !");
			        return 1;
			    }
			}
   			else if(strcmp(x_nr,"deliver",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,2146.3523,-2267.7498,14.2344))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (50)*(MatsHolding[playerid]);
			            format(string, sizeof(string), "* The Factory Gave You %d Materials from your %d Packages.", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_WHITE, string);
			            PlayerInfo[playerid][pMats] += payout;
			            MatsHolding[playerid] = 0;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Materials Packages!");
				        return 1;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not at the Willowfield Gun Factory.");
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid Materials Name !");
			    return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd,"/vendrematos",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 9)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'étes pas un dealeur de matos ! ");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /vendrematos [ID] [Montant]");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        if(IsPlayerConnected(giveplayerid))
	        {
	            if(giveplayerid != INVALID_PLAYER_ID)
	            {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "[CMD]: /vendrematos [ID] [Montant]");
	            			return 1;
					    }
					    new ammount = strval(tmp);
					    if(ammount < 1) { SendClientMessage(playerid, COLOR_GREY, "  Mauvais montant ! "); return 1; }
					    if(ammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, " Vous n'avez pas de materiaux a vendre ! !"); return 1; }
					    PlayerInfo[playerid][pMats] -= ammount;
					    PlayerInfo[giveplayerid][pMats] += ammount;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* %s donne un packet de materiels à  %s", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Le jouer n'es pas à coté de vous ! ");
					    return 1;
					}
	            }
	        }
	    }
	    return 1;
	}
    if(strcmp(cmd,"/vendrearme",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 9)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Vous n'étes pas un dealeur d'arme !");
			    return 1;
			}
			if(PlayerInfo[playerid][pJailed] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous ne pouvez pas faire sa en prison!");
				return 1;
			}
			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /vendrearme [ID] [Nom de l'arme]");
				SendClientMessage(playerid, COLOR_GREY, "Armes : knife(100) bat(100) flowers(25) sdpistol(100) eagle(150)");
				SendClientMessage(playerid, COLOR_GREY, "Armes: mp5(200) shotgun(200) spas12(600) ak47(650) m4(650) rifle (800)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtok(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "*** Armes à vendre ***");
						SendClientMessage(playerid, COLOR_GREY, "[CMD]: /vendrearme [ID] [Nom de l'arme]");
						SendClientMessage(playerid, COLOR_GREY, "Armes: knife(100) bat(100) flowers(25) sdpistol(100) eagle(200)");
						SendClientMessage(playerid, COLOR_GREY, "Armes: mp5(200) shotgun(200) spas12(600) ak47(650) m4(650) rifle(800)");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(x_weapon,"knife",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 4; price[playerid] = 100; ammo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"bat",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 5; price[playerid] = 100; ammo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"sdpistol",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 23; price[playerid] = 100; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 24; price[playerid] = 150; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"mp5",true) == 0) { /*if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } */if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 29; price[playerid] = 200; ammo[playerid] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	/*if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } */if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"spas12",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 27; price[playerid] = 600; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { /*if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } */if(PlayerInfo[playerid][pMats] > 649) { weapon[playerid] = 30; price[playerid] = 650; ammo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"m4",true) == 0) { /*if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } */if(PlayerInfo[playerid][pMats] > 645) { weapon[playerid] = 31; price[playerid] = 650; ammo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { /*if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } */if(PlayerInfo[playerid][pMats] > 799) { weapon[playerid] = 33; price[playerid] = 800; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Pas assez de matériaux pour cette arme !"); return 1; } }
				else { SendClientMessage(playerid,COLOR_GREY,"   Nom de l'arme inconnu"); return 1; }
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
        			/*if(giveplayerid == playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   You can not sell Guns to yourself!");
						return 1;
					}*/
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					//ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "   Vous donnez a %s, un(e) %s avec %d des munitions, pour %d de materiels.", giveplayer,x_weapon, ammo[playerid], price[playerid]);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "  Tu reçoit un(e) %s avec %d de munitions par %s.", x_weapon, ammo[playerid], sendername);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					new gunname[100];
					GetWeaponName(weapon[playerid], gunname, sizeof(gunname));
					format(string, sizeof(string), "* %s sort son %s .", sendername, gunname,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SafeGivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
					PlayerInfo[playerid][pMats] -= price[playerid];
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Your too far away.");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "   %d n'est pas un joueur actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tazer", true) ==0 || strcmp(cmd, "/ta", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez pas visé a travers une voiture");
			        return 1;
			    }
			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(PlayerCuffed[suspect] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "  Cette homme est menotter !");
				        return 1;
				    }
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
					    if(gTeam[suspect] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Vous pouvez pas tazer un coéquipier !");
					        return 1;
					    }
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "  Suspect embarqué !");
					        return 1;
					    }
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new randt = random(4)+1;
						if(randt == 1)
						{
						    format(string, sizeof(string), "* %s tire au tazer sur %s,mais rate son tire.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							format(string, sizeof(string), "* Vous êtes tazer par l'agent %s pendant 20 seconds.", sendername);
							SendClientMessage(suspect, COLOR_WHITE, string);
							format(string, sizeof(string), "* Vous avez tazer %s pendant 20 seconds.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s tire avec son tazeur sur %s et le taze !.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(suspect, "~r~Tazer", 2500, 3);
							TogglePlayerControllable(suspect, 0);
						    LoopingAnim(suspect, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
                            PlayerCuffedTime[suspect] = 20;
						}
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Personne a coté de vous");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'etez pas un Flic !");
			}
		}//not connected
	    return 1;
    }

	if(strcmp(cmd, "/agent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
	        {
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
 				if(!strlen(x_nr))
				{
				    SendClientMessage (playerid, COLOR_WHITE, "USAGE: /agent list then /agent [skin id]");
				    return 1;
				}
				if (PlayerToPoint(20, playerid, 249.6595,192.3225,1008.1719))
				{
				    if(strcmp(x_nr,"list",true) == 0)
				    {
						SendClientMessage(playerid, COLOR_YELLOW, "______________Skin_List______________");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Agent A1         2: Agent A2");
      					SendClientMessage(playerid, COLOR_GRAD2, "3: Agent B1         4: Agent B2");
      					SendClientMessage(playerid, COLOR_GRAD3, "5: Public Agent     6: Agency Intern A");
      					SendClientMessage(playerid, COLOR_GRAD4, "7: Agency Intern B  8: Agency Intern C");
           				SendClientMessage(playerid, COLOR_GRAD5, "9: Lab Agent        10: Analyst");
             	  		SendClientMessage(playerid, COLOR_GRAD6, "11: Fem. Agent A    12: Fem. Agent B");
               			return 1;
				    }
                 	else if(strcmp(x_nr,"1",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 163);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'agent A1.");
						return 1;
					}
                 	else if(strcmp(x_nr,"2",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 164);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'agent A2.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"3",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 165);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'agent B1.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"4",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 166);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'agent B2.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"5",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 166);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume public de l'agent FBI.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"6",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 187);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'interne A d'agence.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"7",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 17);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'interne B d'agence.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"8",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 186);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans le costume de l'interne C d'agence.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"9",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 70);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans un manteau de laboratoire.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"10",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 57);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans un costume d'analyste.");
                        return 1;
					}
					else if(strcmp(x_nr,"11",true) == 0)
					{
					    SetPlayerSkin(playerid, 150);
					    SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans l'agent femelle A.");
					}
					else if(strcmp(x_nr,"12",true) == 0)				{
					    SetPlayerSkin(playerid, 141);
					    SendClientMessage(playerid, COLOR_GRAD2, "Vous êtes maintenant habillé dans l'agent femelle B.");
					}
				}
				else
                {
                   	SendClientMessage(playerid, COLOR_GRAD2, "Vous étes pas dans le QG!");
                   	return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous étes pas un agent du F.B.I!");
                return 1;
 			}
   		}
		return 1;
   	}
   	if(strcmp(cmd, "/couverture", true) == 0)
    {
    	if(IsPlayerConnected(playerid))
     	{
      		if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
        	{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Vous devez étre de rang 3 ou plus pour utiliser cette action!");
     				return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /couverture  & /couverture [skin id]");
					return 1;
  				}
    			if (PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875) || PlayerInfo[playerid][pLocal] != 255)
     			{
      				if(strcmp(x_nr,"list",true) == 0)
        			{
						SendClientMessage(playerid, COLOR_YELLOW, "_________Couverture_________");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Agent 2: ");
      					SendClientMessage(playerid, COLOR_GRAD2, "3: Gay 4: Dupeur ");
      					SendClientMessage(playerid, COLOR_GRAD3, "5: Homme 6: Hyppie");
      					SendClientMessage(playerid, COLOR_GRAD4, "7: Serveuse 8: Femme");
           				SendClientMessage(playerid, COLOR_GRAD5, "9: Michelle Cannes 10: Katie Zhan");
             	  		SendClientMessage(playerid, COLOR_GRAD6, "11: Biker uniform 0 ");
               			return 1;
               		}
                 	else if(strcmp(x_nr,"1",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 165);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en Agent .");
                        return 1;
					}
		            /*else if(strcmp(x_nr,"2",true) == 0)
                    {
                      	SetPlayerSkin(playerid, 217);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en une personne du Staff.");
                        return 1;
                    }*/
                    else if(strcmp(x_nr,"3",true) == 0)
					{
						SetPlayerSkin(playerid, 170);
						SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en Gay.");
						return 1;
					}
                    else if(strcmp(x_nr,"4",true) == 0)
                    {
                       	SetPlayerSkin(playerid, 21);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en Dupeur .");
                        return 1;
					}
					else if(strcmp(x_nr,"5",true) == 0)
					{
                       	SetPlayerSkin(playerid, 60);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en homme.");
                        return 1;
					}
                    else if(strcmp(x_nr,"6",true) == 0)
                    {
                       	SetPlayerSkin(playerid, 72);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en Hyppye .");
                        return 1;
                    }
                    else if(strcmp(x_nr,"7",true) == 0)
                   	{
                        SetPlayerSkin(playerid, 152);
                        SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en serveuse.");
                        return 1;
                    }
      				else if(strcmp(x_nr,"8",true) == 0)
				 	{
 						SetPlayerSkin(playerid, 233);
      					SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en fille.");
           				return 1;
           			}
          			else if(strcmp(x_nr,"9",true) == 0)
           			{
               			SetPlayerSkin(playerid, 192);
                   		SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en Michelle Cannes.");
                   		return 1;
                   	}
                    else if(strcmp(x_nr,"10",true) == 0)
                    {
                  		SetPlayerSkin(playerid, 193);
                       	SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en Katie Zahn.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"11",true) == 0)
                    {
                  		SetPlayerSkin(playerid, 284);
                       	SendClientMessage(playerid, COLOR_GRAD2, "Vous vous etes deguisé en motard !.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"0",true) == 0)
                    {
                   		if(PlayerInfo[playerid][pRank] == 3)
                       	{
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string,sizeof(string), "* %s met son uniforme dans les vestiaires.", sendername);
                          	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                           	SafeGivePlayerWeapon(playerid, 3, 1);
                           	SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 280);
                        }
                        else if(PlayerInfo[playerid][pRank] > 3)
                       	{
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string,sizeof(string), "* %s met son uniforme dans les vestiaires.", sendername);
                          	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                           	SafeGivePlayerWeapon(playerid, 3, 1);
                           	SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 281);
                        }
                        else if(PlayerInfo[playerid][pRank] == 6)
                        {
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string,sizeof(string), "* %s met son uniforme dans les vestiaires.", sendername);
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            SafeGivePlayerWeapon(playerid, 3, 1);
                            SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 283);
                        }
					}
				}
				else
                {
                   	SendClientMessage(playerid, COLOR_GRAD2, "Vous n'etes pas dans un vestiaire!");
                   	return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Vous étes pas policier!");
                return 1;
 			}
   		}
		return 1;
   	}
	if(strcmp(cmd, "/menotter", true) == 0 || strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /menotter [id]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas menotter un policier !");
					        return 1;
				        }
					    if(PlayerCuffed[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Joueur déjà menotter !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous menotter!"); return 1; }
                            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Vous avez été menotter par %s.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Vous avez menotter %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s a été menotter par %s." ,giveplayer, sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(giveplayerid, "~r~Menotter", 2500, 3);
							TogglePlayerControllable(giveplayerid, 0);
							PlayerCuffed[giveplayerid] = 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas près de vous !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas connecté !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de menottes!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/demenotter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /demenotter [id]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous demenotter!"); return 1; }
							if(PlayerCuffed[giveplayerid] == 1)
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Vous avez été démenotter par %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Vous démenottez %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
      							format(string, sizeof(string), "* %s a été demenotter par %s." ,giveplayer, sendername);
						    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~g~Demenotter", 2500, 3);
								TogglePlayerControllable(giveplayerid, 1);
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas menotter !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas près de vous !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'es pas connecter !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "  Vous n'avez pas les clefs !");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/suivre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 1)
		    {
				SendClientMessage(playerid, COLOR_GREY, " Vous n'êtes pas detective!");
				return 1;
		    }
		    if(PlayerOnMission[playerid] > 0)
			{
				SendClientMessage(playerid, COLOR_GREY, " Tu es sur une mission en ce moment, ne peut pas employer cette commande !");
			    return 1;
			}
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401)
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Vous venez de rechercher une personne attender 2 minutes");
			    return 1;
			}
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /suivre [ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous rechercher vous meme !"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 99999999999; }
					else if(level >= 51 && level <= 100)
					{ points = 99999999999; }
					else if(level >= 101 && level <= 200)
					{ points = 99999999999; }
					else if(level >= 201 && level <= 400)
					{ points = 99999999999; }
					else if(level >= 401)
					{ points = 99999999999; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 2, bientôt vous pourrez trouver des membres de faction."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 3, bientôt vous pourrez trouver des membres de faction."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 4, vous pouvez maintenant trouver des membres de faction."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 5, vous pouvez maintenant trouver des membres de faction."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid Name/ID !");
			}
		}
	    return 1;
	}
    if(strcmp(cmd, "/asuivre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /suivre [idDuJoueur/PartieDuNom]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Find yourself!"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 4; }
					else if(level >= 51 && level <= 100)
					{ points = 6; }
					else if(level >= 101 && level <= 200)
					{ points = 8; }
					else if(level >= 201 && level <= 400)
					{ points = 10; }
					else if(level >= 401)
					{ points = 12; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 2, bientôt vous pourrez trouver des membres de faction."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 3, bientôt vous pourrez trouver des membres de faction."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 4, vous pouvez maintenant trouver des membres de faction."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence detective est maintenant de niveau 5, vous pouvez maintenant trouver des membres de faction."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid Name/ID !");
			}
		}
	    return 1;
	}
	if(strcmp(cmd, "/proteger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 8)
		    {
				SendClientMessage(playerid, COLOR_GREY, "  Vous n'etes pas un garde du corps !!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /proteger [ID] [prix]");
				return 1;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, " Le prix doit etre compris entre 1$ et 99999$!"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez vous offrir votre protection !!");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Vous offrez la protection à %s pour $%d.", giveplayer, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Le garde du corps %s vous offre sa protection pour $%d, (tapez /accepter gardeducorps) pour l'engager.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas à coté de vous !!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, " Ce Joueur est Hors Ligne!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/liberer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un avocat!");
		        return 1;
		    }
		    if(PlayerInfo[playerid][pLawSkill] >= 401)
		    {
		        ApprovedLawyer[playerid] = 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /liberer [ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous liberer vous meme !"); return 1; }
					if(PlayerInfo[giveplayerid][pJailed] == 1 && ApprovedLawyer[playerid] == 1)
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Vous liberez %s de la prison de Los Santos.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "*Vous êtes liberer par l'avocat  %s.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						ApprovedLawyer[playerid] = 0;
						WantLawyer[giveplayerid] = 0;
						CallLawyer[giveplayerid] = 0;
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
						PlayerInfo[playerid][pLawSkill] ++;
						if(PlayerInfo[playerid][pLawSkill] == 50)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence d'avocat est maintenant de niveau 2, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
						else if(PlayerInfo[playerid][pLawSkill] == 100)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence d'avocat est maintenant de niveau 3, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
						else if(PlayerInfo[playerid][pLawSkill] == 200)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence d'avocat est maintenant de niveau 4, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
						else if(PlayerInfo[playerid][pLawSkill] == 400)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Votre compétence d'avocat est maintenant de niveau 5, vous gagnerez plus d'argent et de temps de rechargement plus rapide."); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "  Ce joueur a pas besoin d'avocat ou n'a pas de bail accorder par la Police! ");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Ce joueur est Hors ligne");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/annuler",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Annuler __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /annuler [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: sexe, drogue, Permis, Repair, Lawyer, gardeducorps, interview, plein, Car, Boxing");
				SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mécanicien, Paper, pv, temoin, Marriage, Divorce, OwnableCar");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			if(strcmp(x_job,"sexe",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(strcmp(x_job,"drogue",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_job,"Permis",true) == 0) { PermisOffer[playerid] = 999; PermisPrice[playerid] = 0; PermisType[playerid] = 0; }
			else if(strcmp(x_job,"repair",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_job,"lawyer",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
			else if(strcmp(x_job,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_job,"interview",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_job,"refill",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_job,"car",true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_job,"boxing",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_job,"paper",true) == 0) { PaperOffer[playerid] = 999; }
			else if(strcmp(x_job,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_job,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_job,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_job,"ownablecar",true) == 0) { OwnableCarOffer[playerid] = 999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; }
			else if(strcmp(x_job,"pv",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			else if(strcmp(x_job,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"Pizza",true) == 0) { if(IsPlayerConnected(PizzaCall)) { if(PizzaCall == playerid) { PizzaCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TaxiCall < 999)
			    {
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(BusCall < 999)
			    {
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
						BusCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Bus Caller~n~~r~Canceled the call", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else { return 1; }
			format(string, sizeof(string), "* You have canceled: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/accepter",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Accepter __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accepter [nom]");
				SendClientMessage(playerid, COLOR_GREY, "Noms valides: Sexe, drogue, Reparation, Avocat, Gardeducorps, Job, En direct, Recharge, Voiture");
				SendClientMessage(playerid, COLOR_GREY, "Noms valides: Taxi, Bus, Boxe, Medecin, Mecanicien, Article, pv, Pizza");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			else if(strcmp(x_job,"divorce",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Vous avez accepté la demande de %s pour etre divorcé", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s a accepté votre demande d'être divorcé !", sendername);
							SendClientMessage(DivorceOffer[playerid], COLOR_WHITE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPhousekey] = 255;
							PlayerInfo[playerid][pPbiskey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Le joueur qui vous a envoyé les papiers du divorce n'est pas près de vous !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne ne vous a envoyé tous les documents de divorce !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"temoin",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Vous avez accepté la demande de %s pour être son témoin de mariage.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s a accepté votre demande d'être témoin pour votre mariage.", sendername);
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_WHITE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Le joueur qui vous a demandé d'être son témoin de mariage n'est pas prés de vous !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne ne vous a demandé d'être son témoin de mariage !");
				    return 1;
				}
			}
	        else if(strcmp(x_job,"marriage",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!PlayerToPoint(10.0, playerid, -2023.5897,1098.2526,18.0523))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas a l'église de Los Santos!");
			            return 1;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   L' auteur de la proposition n'a pas de témoin de mariage !");
						        return 1;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "* Vous avez accepté la demande de mariage de %s.", giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s a accepté votre demande de mariage.", sendername);
									SendClientMessage(ProposeOffer[playerid], COLOR_WHITE, string);
									format(string, sizeof(string), "Prêtre: %s voulez vous épouser %s comme époux ? (taper 'oui', tout le reste va rejeter le mariage)", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   Le témoin du mariage n'est pas prés de vous !");
								    return 1;
								}
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Le joueur qui vous a proposer n'est pas prés de vous !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Aucune personne ne vous a proposer !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"Pizza",true) == 0)
   			{
       			if(PlayerInfo[playerid][pJob] != 15)
       			{
           			SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un livreur de pizza!");
        			return 1;
       			}
        		if(PizzaCallTime[playerid] > 0)
             	{
					SendClientMessage(playerid, COLOR_GREY, "   Vous avez déjà accepté une commande de pizza!");
        			return 1;
             	}
             	if(PlayerOnMission[playerid] > 0)
       			{
           			SendClientMessage(playerid, COLOR_GREY, "   Au cours d'une mission, vous ne pouvez pas utiliser cette commande!");
           			return 1;
       			}
             	if(PizzaCall < 999)
             	{
					if(IsPlayerConnected(PizzaCall))
					{
                    	GetPlayerName(playerid, sendername, sizeof(sendername));
                  		GetPlayerName(PizzaCall, giveplayer, sizeof(giveplayer));
                  		format(string, sizeof(string), "* Vous avez accepté la commande de pizza de %s , vous avez 90 secondes pour la livrer.",giveplayer);
      					SendClientMessage(playerid, COLOR_WHITE, string);
      					SendClientMessage(playerid, COLOR_WHITE, "* Aprés les 90 secondes, la marque rouge disparaîtra.");
                        format(string, sizeof(string), "* Le livreur de pizza %s a accepté votre commande, s'il vous plait attendez a votre position actuelle.",sendername);
      					SendClientMessage(PizzaCall, COLOR_WHITE, string);
      					new Float:X,Float:Y,Float:Z;
      					GetPlayerPos(PizzaCall, X, Y, Z);
      					SetPlayerCheckpoint(playerid, X, Y, Z, 5);
      					GameTextForPlayer(playerid, "~w~un client appele~n~~r~allez au point rouge", 5000, 1);
      					PizzaCallTime[playerid] = 1;
      					PizzaCall = 999;
						return 1;
     				}
             	}
             	else
             	{
              		SendClientMessage(playerid, COLOR_GREY, "  Personne n'a commandé une pizza!");
        			return 1;
             	}
   			}
			else if(strcmp(x_job,"pv",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Vous avez payé le billet de $%d a l'agent %s.", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s a payé votre billet de $%d.", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_WHITE, string);
							SafeGivePlayerMoney(playerid, - TicketMoney[playerid]);
							SafeGivePlayerMoney(TicketOffer[playerid], TicketMoney[playerid]);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   L'agent n'est pas prés de vous !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne ne vous a offert un billet !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"article",true) == 0)
			{
			    if(PaperOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaperOffer[playerid]))
			        {
			            if(BringingPaper[PaperOffer[playerid]] > 0)
			            {
			                if (ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
							{
				            	GetPlayerName(PaperOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* 	Vous avez accepté un journal du livreur de journaux %s (utiliser /lire pour lire le journal ).", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s a accepté votre journal.", sendername);
								SendClientMessage(PaperOffer[playerid], COLOR_WHITE, string);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
								strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
								strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
								strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
								strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
								strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
								strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
								strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
								strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
								strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
								GotPaper[playerid] = 1;
								PaperOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Le livreur de journaux n'est pas prés de toi !");
							    return 1;
							}
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne ne vous a offert un journal !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"boxe",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(PlayerInfo[playerid][pJob] == 11)
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "* Vous avez accepté le défi de boxe de %s, et se battre avec la santé de %d .",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s a accepté votre défi de boxe, vous vous battrez avec la santé de %d .",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_WHITE, string);
						SetPlayerHealth(playerid, mypoints);
						SetPlayerHealth(BoxOffer[playerid], points);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
						GameTextForPlayer(playerid, "~r~Attente", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Attente", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Nouvelles de boxe: Le champion de boxe %s se battra contre %s, dans 60 secondes (Gymnnase Gantom).",  sendername, giveplayer);
							OOCOff(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Nouvelles de boxe: Le champion de boxe %s se battra contre %s, dans 60 secondes (Gymnnase Gantom).",  giveplayer, sendername);
							OOCOff(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return 1;
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   	Personne ne vous a demander en défi !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un chauffeur de taxi !");
				    return 1;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez déjà accepté un appel de taxi !");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Au cours d'une mission, vous ne pouvez pas utiliser cette commande!");
			        return 1;
			    }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Vous avez accepté l'appel de taxi de %s, vous verrez le marqueur tant que vous ne l'aurais pas atteint.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Le chauffeur de taxi %s a accepté votre appel, s'il vous plaît attendez a votre position actuelle.",sendername);
						SendClientMessage(TaxiCall, COLOR_WHITE, string);
						GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Goto redmarker", 5000, 1);
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Personne n'a appelé un taxi pour le moment !");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'étes pas un chauffeur d'autobus !");
				    return 1;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez déjà accepté un appel de bus !");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Au cours d'une mission, vous ne pouvez pas utiliser cette commande !");
			        return 1;
			    }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Vous avez accepté l'appel d'autobus de %s, vous verrez le marqueur tant que vous ne l'aurais pas atteint.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Le chauffeur d'autobus %s a accepté votre appel d'autobus, s'il vous plaît attendez a votre position actuelle.",sendername);
						SendClientMessage(BusCall, COLOR_WHITE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~un client appel~n~~r~Aller au marqueur rouge", 5000, 1);
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Personne n'a passer d'appel pour un autobus !");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"medic",true) == 0)
			{
			    if(PlayerInfo[playerid][pJob] == 10)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "  Vous avez déjà accepté un appel de medecin !");
					    return 1;
		            }
		            if(PlayerOnMission[playerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Au cours d'une mission, vous ne pouvez pas utiliser cette commande !");
				        return 1;
				    }
		            if(MedicCall < 999)
		            {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Vous avez accepté l'appel de medecin de %s, vous avez 30 secondes pour y arriver.",giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SendClientMessage(playerid, COLOR_WHITE, "* Aprés les 30 secondes le marqueur rouge disparaîtra.");
	                        format(string, sizeof(string), "* Le medecin %s a accepté votre appel de medecin, s'il vous plaît attendez a votre position actuelle.",sendername);
							SendClientMessage(MedicCall, COLOR_WHITE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(MedicCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~un client appel~n~~r~Allez au point rouge", 5000, 1);
							MedicCallTime[playerid] = 1;
							MedicCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Personne n'a passer un appel pour un medecin !");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous n'étes pas un medecin !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"mecanicien",true) == 0)
			{
			    if(PlayerInfo[playerid][pJob] != 7)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'étes pas un mécanicien !");
				    return 1;
			    }
	            if(MechanicCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez déjà accepté un appel de mécanicien !");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Au cours d'une mission, vous ne pouvez pas utiliser cette commande !");
			        return 1;
			    }
	            if(MechanicCall < 999)
	            {
	                if(IsPlayerConnected(MechanicCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Vous avez accepté l'appel de mécanicien de %s, vous avez 90 secondes pour y arriver.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "* Aprés les 200 secondes le marqueur rouge disparaîtra.");
                        format(string, sizeof(string), "* Le mécanicien %s a accepté votre appel de mécanicien, s'il vous plaît attendez a votre position actuelle.",sendername);
						SendClientMessage(MechanicCall, COLOR_WHITE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MechanicCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~un client appel~n~~r~Allez au point rouge", 5000, 1);
						MechanicCallTime[playerid] = 1;
						MechanicCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Personne n'a passer d'appel pour un mécanicien !");
			    	return 1;
	            }
			}
            else if(strcmp(x_job,"job",true) == 0)
			{
			    if(GettingJob[playerid] > 0)
			    {
			        /*if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pMember] <= 4 || PlayerInfo[playerid][pMember] > 5 && PlayerInfo[playerid][pMember] < 15 || PlayerInfo[playerid][pFMember] < 255)
			        {
						SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas prendre un travail, vous êtes dans une famille !");
     					return 1;
			        }*/
			        SendClientMessage(playerid, COLOR_WHITE, "* Maintenant que vous avez confirmé que vous voulez le travail, vous avez obtenu un contrat de 5 heures.");
			        SendClientMessage(playerid, COLOR_WHITE, "* Félicitations pour votre nouvel emploi, taper /aide pour voir votre nouvelle commande.");
			        PlayerInfo[playerid][pJob] = GettingJob[playerid];
			        GettingJob[playerid] = 0;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez même pas été à un endroit du travail encore !");
			        return 1;
			    }
			}
			/*else if(strcmp(x_job,"serrermain",true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
                   new playa;
			       playa = ReturnUser(tmp);
                   SendClientMessage(playerid, COLOR_WHITE, "* Vous avez accepter de serrer la main a cet personne");
                   ApplyAnimation(playerid, "GANGS", "hndshkfa",4.1,0,1,1,1,1,1);
                   ApplyAnimation(playa, "GANGS", "hndshkfa",4.1,0,1,1,1,1,1);
                   return 1;
                }
			}*/
			else if(strcmp(x_job,"plein",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if( GetPlayerMoney(playerid) > RefillPrice[playerid])
			            {
			                GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* Vous vennez de faure led plein pour %d%, par le mecanicien $%d .",RefillPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Vous avez remplis la voiture de %s, les $%d seront ajouté a votre jours de paye.",sendername,RefillPrice[playerid]);
							SendClientMessage(RefillOffer[playerid], COLOR_WHITE, string);
							PlayerInfo[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid] * 5;
							SafeGivePlayerMoney(playerid, -RefillPrice[playerid]);
							new car = GetPlayerVehicleID(playerid);
							VehiculeInfo[car][Essence] = 50;
							VehiculeInfo[car][Moteur] = 0;
  		                    format(string,sizeof(string),"Le moteur de ce/cette %s es etein appuiez sur Clique droits ou faite /moteur pour le démarer",VehiculeInfo[car][Nom]);
	       	              	SendClientMessage(playerid,COL_LIGHTRED,string);
					        RefillOffer[playerid] = 999;
							RefillPrice[playerid] = 0;
							return 1;
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You cant afford the Refill !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne a offert de remplir votre voiture !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"interview",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "* Vous êtes gelé jusqu'a la fin de phase de conversation");
							SendClientMessage(LiveOffer[playerid], COLOR_WHITE, "* Vous êtes gelé jusqu'à ce que la conversation de phase finisse (utilisation /interview encore).");
							TogglePlayerControllable(playerid, 0);
							TogglePlayerControllable(LiveOffer[playerid], 0);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Vous êtes loin du journaliste !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Personne t'a donné une offre de phase de conversation !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"avocat",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /accepter avocat [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if (gTeam[playerid] == 2)
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(PlayerInfo[giveplayerid][pJob] == 2)
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Vous avez permis à %s de libérer une personne emprisonnée.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE,string);
								format(string, sizeof(string), "* Le dirigeant %s à approuvé le (permis) pour libérer une personne emprisonnée. (utilisation /liberer)", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE,string);
								ApprovedLawyer[giveplayerid] = 1;
							    return 1;
							}
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Action incorrect! (Vous n'êtes pas flic/pas un avocat/mauvaise ID)");
				    return 1;
				}
			}
			else if(strcmp(x_job,"gardeducorps",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if( GetPlayerMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* Vous avez accepté la protection pour $%d contre le garde du corps %s.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s a accepté votre protection, et les $%d a été ajouté à votre jour de paie.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_WHITE, string);
							PlayerInfo[GuardOffer[playerid]][pPayCheck] += GuardPrice[playerid] * 5;
							SafeGivePlayerMoney(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas vous permettre la protection !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Personne t'offrent n'importe quelle protection !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"drogue",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if( GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Vous avez acheté %d le gramme pour $%d du trafiquant de drogue %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s a acheté %d, gramme les $%d ont été ajouté à votre jour de paie .",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid] * 5;
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								SafeGivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Votre compétence de trafiquant de drogue est maintenant de niveau 2, vous pouvez acheter plus de grammes et meilleur marché."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Votre compétence de trafiquant de drogue est maintenant de niveau 3, vous pouvez acheter plus de grammes et meilleur marché."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Votre compétence de trafiquant de drogue est maintenant de niveau 4, vous pouvez acheter plus de grammes et meilleur marché."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Votre compétence de trafiquant de drogue est maintenant de niveau 5, vous pouvez acheter plus de grammes et meilleur marché."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Vous êtes entièrement chargé avec de la drogues, les employez d'abord !");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas se permettre cette drogues !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Personne t'a offert toutes les drogues !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"Permis",true) == 0)
			{
			    if(PermisOffer[playerid] < 999)
			    {
			        if( GetPlayerMoney(playerid) > PermisPrice[playerid])
				    {
				        /*if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid] * 5;
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								SafeGivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first !");
						    return 1;
						}*/
						if(PermisType[playerid] == 0 || PermisType[playerid] > 5)
						{
						    return 1;
						}
						if(IsPlayerConnected(PermisOffer[playerid]))
						{
						    GetPlayerName(PermisOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(PermisType[playerid] == 1)
							{
							    if(PlayerInfo[playerid][pCarLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Vous avez deja le Permis de conduire.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* Vous avez acheté le Permis de conduire pour $%d de l'instructeur %s.",PermisPrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "*%s a acheté votre Permis de conduire pour $%d et on l'a ajouté à votre jour de paie.",sendername,PermisPrice[playerid]);
									SendClientMessage(PermisOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pCarLic] = 1;
									SafeGivePlayerMoney(playerid, -PermisPrice[playerid]);
									PlayerInfo[PermisOffer[playerid]][pPayCheck] += PermisPrice[playerid] * 5;
								}
							}
							if(PermisType[playerid] == 2)
							{
							    if(PlayerInfo[playerid][pFlyLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Vous avez deja le Permis de vol.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* Vous avez acheté le Permis de vol pour $%d de l'instructeur %s.",PermisPrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s a acheté votre Permis de vol pour $%d et on l'a ajouté à votre jour de paie.",sendername,PermisPrice[playerid]);
									SendClientMessage(PermisOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pFlyLic] = 1;
									SafeGivePlayerMoney(playerid, -PermisPrice[playerid]);
									PlayerInfo[PermisOffer[playerid]][pPayCheck] += PermisPrice[playerid] * 5;
								}
							}
							if(PermisType[playerid] == 3)
							{
							    if(PlayerInfo[playerid][pBoatLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Vous avez deja le Permis voille.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* Vous avez acheté le Permis de voille pour $%d de l'instructeur %s.",PermisPrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s a acheté votre Permis de voille pour $%d et on l'a ajouté à votre jour de paie.",sendername,PermisPrice[playerid]);
									SendClientMessage(PermisOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pBoatLic] = 1;
									SafeGivePlayerMoney(playerid, -PermisPrice[playerid]);
									PlayerInfo[PermisOffer[playerid]][pPayCheck] += PermisPrice[playerid] * 5;
								}
							}
							if(PermisType[playerid] == 4)
							{
							    if(PlayerInfo[playerid][pFishLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Vous avez deja le Permis de peche.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* Vous avez acheté le Permis de peche pour $%d de l'instructeur %s.",PermisPrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s a acheté votre Permis de peche pour $%d et on l'a ajouté à votre jour de paie.",sendername,PermisPrice[playerid]);
									SendClientMessage(PermisOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pFishLic] = 1;
									SafeGivePlayerMoney(playerid, -PermisPrice[playerid]);
									PlayerInfo[PermisOffer[playerid]][pPayCheck] += PermisPrice[playerid] * 5;
								}
							}
							if(PermisType[playerid] == 5)
							{
							    if(PlayerInfo[playerid][pGunLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Vous avez deja le Permis d'arme.");
								}
								else
								{
							    	format(string, sizeof(string), "* Vous avez acheté le Permis d'arme pour $%d de l'instructeur %s.",PermisPrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s a acheté votre Permis d'arme pour $%d et on l'a ajouté à votre jour de paie.",sendername,PermisPrice[playerid]);
									SendClientMessage(PermisOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pGunLic] = 1;
									SafeGivePlayerMoney(playerid, -PermisPrice[playerid]);
									PlayerInfo[PermisOffer[playerid]][pPayCheck] += PermisPrice[playerid] * 5;
								}
							}
							PermisOffer[playerid] = 999;
							PermisPrice[playerid] = 0;
							PermisType[playerid] = 0;
							return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas vous permettre ce Permis !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Personne t'a offert n'importe quel Permis !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"sexe",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if( GetPlayerMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Vous avez eu le sexe avec la putain %s, pour $%d.", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s a eu du sexe avec vous, les $%d ont été ajouté à votre jour de paie.", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[SexOffer[playerid]][pPayCheck] += SexPrice[playerid] * 5;
								SafeGivePlayerMoney(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Votre compétence de sexe est maintenant de niveau 2, vous offrez un meilleur sexe (santé) et moins de chance de rendre malade."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Votre compétence de sexe est maintenant de niveau 3, vous offrez un meilleur sexe (santé) et moins de chance de rendre malade."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Votre compétence de sexe est maintenant de niveau 4, vous offrez un meilleur sexe (santé) et moins de chance de rendre malade."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Votre compétence de sexe est maintenant de niveau 5, vous offrez un meilleur sexe (santé) et moins de chance de rendre malade."); }
								if(STDPlayer[playerid] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 30.0); }
											new rand = random(sizeof(STD1));
											STDPlayer[playerid] = STD1[rand];
											STDPlayer[SexOffer[playerid]] = STD1[rand];
											if(STD1[rand] == 0) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 30 à la santé + aucune MST tout en ayant le sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous n'avez pas un MST tout en ayant le sexe."); }
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 30 à la santé + un Chlamydia en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez obtenu un Chlamydia en raison du sexe."); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 30 à la santé + une gonorrhée en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé une gonorrhée en raison du sexe"); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 30 à la santé + un syphilis en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé un syphilis en raison du sexe."); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 60.0); }
											new rand = random(sizeof(STD2));
											STDPlayer[playerid] = STD2[rand];
											STDPlayer[SexOffer[playerid]] = STD2[rand];
											if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 60 à la santé + aucune MST tout en ayant le sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous n'avez pas de MST tout en ayant le sexe."); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 60 à la santé + un Chlamydia en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez obtenu un Chlamydia en raison du sexe."); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 60 à la santé + une gonorrhée en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé une gonorrhée en raison du sexe."); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 60 à la santé + un syphilis en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé un syphilis en raison du sexe."); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 90.0); }
											new rand = random(sizeof(STD3));
											STDPlayer[playerid] = STD3[rand];
											STDPlayer[SexOffer[playerid]] = STD3[rand];
											if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 90 à la santé + aucune MST tout en ayant le sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous n'avez pas de MST tout en ayant le sexe."); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 90 à la santé + un Chlamydia en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez obtenu un Chlamydia en raison du sexe."); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 90 à la santé + une gonorrhée en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé une gonorrhée en raison du sexe."); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 90 à la santé + un syphilis en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé un syphilis en raison du sexe."); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 120.0); }
											new rand = random(sizeof(STD4));
											STDPlayer[playerid] = STD4[rand];
											STDPlayer[SexOffer[playerid]] = STD4[rand];
											if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 120 à la santé + aucune MST tout en ayant le sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous n'avez pas de MST tout en ayant le sexe."); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 120 à la santé + un Chlamydia en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez obtenu un Chlamydia en raison du sexe."); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 120 à la santé + une gonorrhée en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé une gonorrhée en raison du sexe."); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_WHITE, "* Vous avez obtenu 120 à la santé + un syphilis en raison du sexe."); SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Vous avez attrapé un syphilis en raison du sexe."); }
										}
										else if(level >= 401)
										{
										    if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 150.0); }
											SendClientMessage(playerid, COLOR_WHITE, "* Votre niveau de compétence de sexe est si haut vous avez donné la santé élevée et aucune maladie.d");
											SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Le niveau de compétence de sexe de putain est si haut vous avez obtenu la santé élevée et aucune maladie.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_WHITE, "* Le joueur a utilisé un condom.");
									    SendClientMessage(playerid, COLOR_WHITE, "* Vous avez utilisé un condom.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_GREY, "* le joueur déjà été atteint d'une MST, ne peut pas l'obtenir denouveau.");
								    return 1;
								}
								SexOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Vous ou la putain n'est pas tous deux dans une voiture !");
							    return 1;
							}
						}//Connected or not
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas se permettre le sexe !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous ne faites offrir aucun sexe par une putain !");
				    return 1;
				}
			}
		    else if(strcmp(x_job,"nitro",true) == 0)
		    {
		        if(NitroOffer[playerid] < 999)
		        {
		            if( GetPlayerMoney(playerid) > NitroPrice[playerid])
		            {
		                if(IsPlayerInAnyVehicle(playerid))
		                {
		                    if(IsPlayerConnected(NitroOffer[playerid]))
		                    {
		                        GetPlayerName(NitroOffer[playerid], giveplayer, sizeof(giveplayer));
		                        GetPlayerName(playerid, sendername, sizeof(sendername));
		                        NitroCar[playerid] = GetPlayerVehicleID(playerid);
		                        AddVehicleComponent(NitroCar[playerid],1010);
		                        format(string, sizeof(string), "* Le Mécanicien %s à installer une bouteille de nitro a votre voiture %d$.",giveplayer,NitroPrice[playerid]);
		                        SendClientMessage(playerid, COLOR_WHITE, string);
		                        format(string, sizeof(string), "* Vous avez installer de la nitro à %s, les %d$ ont été ajoutés à votre paie.",sendername,NitroPrice[playerid]);
		                        SendClientMessage(NitroOffer[playerid], COLOR_WHITE, string);
		                        PlayerInfo[NitroOffer[playerid]][pPayCheck] += NitroPrice[playerid] * 5;
		                        SafeGivePlayerMoney(playerid, -NitroPrice[playerid]);
		                        NitroOffer[playerid] = 999;
		                        NitroPrice[playerid] = 0;
		                        return 1;
		                    }
		                    return 1;
		                }
		                return 1;
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez pas payer l'instalation de la nitro!");
		                return 1;
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Personne ne vous à proposer d'installer la nitro!");
		            return 1;
		        }
		    }
		    else if(strcmp(x_job,"hydrau",true) == 0)
		    {
		        if(HydrauOffer[playerid] < 999)
		        {
		            if( GetPlayerMoney(playerid) > HydrauPrice[playerid])
		            {
		                if(IsPlayerInAnyVehicle(playerid))
		                {
		                    if(IsPlayerConnected(HydrauOffer[playerid]))
		                    {
		                        GetPlayerName(HydrauOffer[playerid], giveplayer, sizeof(giveplayer));
		                        GetPlayerName(playerid, sendername, sizeof(sendername));
		                        HydrauCar[playerid] = GetPlayerVehicleID(playerid);
		                        AddVehicleComponent(HydrauCar[playerid],1087);
		                        format(string, sizeof(string), "* Le Mécanicien %s à installer un système de suspention hydraulique a votre voiture %d$.",giveplayer,HydrauPrice[playerid]);
		                        SendClientMessage(playerid, COLOR_WHITE, string);
		                        format(string, sizeof(string), "* Vous avez installer un système hydraulique à %s, les %d$ ont été ajoutés à votre paie.",sendername,HydrauPrice[playerid]);
		                        SendClientMessage(HydrauOffer[playerid], COLOR_WHITE, string);
		                        PlayerInfo[HydrauOffer[playerid]][pPayCheck] += HydrauPrice[playerid] * 5;
		                        SafeGivePlayerMoney(playerid, -HydrauPrice[playerid]);
		                        HydrauOffer[playerid] = 999;
		                        HydrauPrice[playerid] = 0;
		                        return 1;
		                    }
		                    return 1;
		                }
		                return 1;
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez pas payer l'instalation du système hydraulique!");
		                return 1;
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, " Personne ne vous à proposer d'installer un système hydraulique!");
		            return 1;
		        }
		    }
			else if(strcmp(x_job,"reparation",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if( GetPlayerMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
						        RepairVehicle(RepairCar[playerid]);
								format(string, sizeof(string), "* Vous avez réparé votre voiture pour $%d avec le mecanicien %s.",RepairPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Vous reparez la voitured de %s, les $%d seront ajouté a votre jours de paye.",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_WHITE, string);
								SafeGivePlayerMoney(playerid, -RepairPrice[playerid]);
						    	new car = GetPlayerVehicleID(playerid);
					    		VehiculeInfo[car][Moteur] = 0;
  		                        format(string,sizeof(string),"Le moteur de ce/cette %s es etein appuiez sur Clique droits ou faite /moteur pour le démarer",VehiculeInfo[car][Nom]);
	       	                 	SendClientMessage(playerid,COL_LIGHTRED,string);
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return 1;
							}
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas payer l'instalation du système de reparation !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "  Personne ne vous à proposer d'installer un système de reparation!");
			        return 1;
			    }
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Accepter __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accepter [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: sexe, Drogue, Reparation, Avocat, gardeducorps, Job, interview, plein, OwnableCar");
				SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Boxe, Medic, Mecanicien, Paper, pv, Pizza, hydrau, nitro");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/remplirvoiture", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas mecanicien");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /remplire [ID] [prix]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Le Prix doit etre compris entre 1$ 99999$!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "  Vous ne pouvez pas faire ça"); return 1; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Vous offrez à %s de remplir sa voiture pour $%d .",giveplayer,money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Le mecanicien %s veut vous refaire le plein pour $%d, (tapez /accepter plein) pour accepter.",sendername,money);
						SendClientMessage(playa, COLOR_WHITE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas à cooté de vous.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Ce joeur n'est pas Hors Ligne.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/utiliserbidon", true) == 0)
	//if(strcmp(cmd, "/remplircar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pFuel] > 0)
		    {
		        if(Gas[gLastCar[playerid]] < 30)
		        {
			        SendClientMessage(playerid, COLOR_WHITE, "Vous avez remplit votre reservoir avec votre bidon.");
			        new car = GetPlayerVehicleID(playerid);
					VehiculeInfo[car][Essence] += 20;
			        PlayerInfo[playerid][pFuel] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Votre véhicule à assez d'essence dans son réservoir pour roulé encore quelque KM!");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Vous n'avez plus assez d'essence dans votre bidon!");
		    }
		}
		return 1;
	}
	if(strcmp(cmd, "/reparer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "  Vous n'etes pas mecanicien!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /reparer [ID] [prix]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 1500) { SendClientMessage(playerid, COLOR_GREY, " Le prix doit etre en 1$ et 1500$!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "  Tu ne peux pas faire ça !!"); return 1; }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Vous offrez à %s la reparation de sa voiture pour %d$ .",giveplayer,money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Le mecanicien %s voudrait reparer votre voiture pour %d$, (/accepter reparation).",sendername,money);
						SendClientMessage(playa, COLOR_WHITE, string);
						RepairOffer[playa] = playerid;
						RepairPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Le jouer n'est pas à coté de vous !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Ce joueur n'est pas connecté !");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/serrermain", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /serrermain [ID] ");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "  Tu ne peux pas faire ça !!"); return 1; }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Vous proposez à %s de vous serrez la main.",giveplayer);
						SendClientMessage(playerid, COLOR_BLUE, string);
						format(string, sizeof(string), "*  %s voudrait vous serrez la main, (/accepter serrermain).",sendername);
						SendClientMessage(playa, COLOR_BLUE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Le jouer n'est pas à coté de vous !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Ce joueur n'est pas connecté !");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/f", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
				return 1;
			}
			if(PlayerInfo[playerid][pJailed] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Vous n'avez pas de radio en prison!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[82];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS; 
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GREY, "USAGE: (/f)action [faction chat]");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] > 0 || PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pFMember] < 255)
			{
			    new leader = PlayerInfo[playerid][pLeader];
			    new member = PlayerInfo[playerid][pMember];
			    if(member==1)
			    {
			        if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "**  Sheriff %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Sheriff Adjoint %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Capitaine %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Lieutenant %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Sergent %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Officier %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Cadet %s: %s ,Terminé **", sendername, result); }
					else { format(string, sizeof(string), "**  Cadet %s: %s , Terminé **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			    }
			    if(member==2)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Directeur de la FBI %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Co-Directeur %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Agent Spécial %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Agent expérimenté %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Agent du FBI %s: %s ,Terminé **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Stagiaire au FBI %s: %s ,Terminé **", sendername, result); }
					else { format(string, sizeof(string), "**  Stagiaire au FBI %s: %s , Terminé **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			    }
			    if(member==3)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Colonel %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Lieutenant-Colonel %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Major %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Caporal %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Soldat %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Soldat Stagiaire %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Soldat Stagiaire %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			    }
			    if(member==4)
			    {
					format(string, sizeof(string), "**  Paramedic %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			    }
			    if(member==5)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Dirigente MS-13 %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Consejero %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Traficante %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Delincuente %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Dealer %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Nuevo %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Nuevo %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			    }
			    if(member==6)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**   Le Parrain %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Bras Droit %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Mafieu %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Homme de main %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Gros Dealer %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Petit Dealer %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Petit Dealer %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==7)
				{
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**   Maire %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Bras Droit %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Mafieu %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Homme de main %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Gros Dealer %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Chauffeur %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Chauffeur %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==8)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Parrain %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Dirigeant %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Rouge %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Assassin %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Tueur %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Brute %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Exilé %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==9)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Chef %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Sous chef %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Porte Parole %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Bras droit %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Bras gauche%s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Homme de main %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Hoomme de main %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==10)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Leader de bande %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Frere %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Pote %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Ami %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Zonard %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Relation %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Relation %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==11)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Boss %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Sous Patron %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Gestionnaire %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Instructeur Confirmé %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Instructeur %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Stagiaire %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Stagiaire %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==12)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  K.Otec %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Homme de confiance %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Vrai Russes %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  trafiquant %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  soldat %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Recrue %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Recrue %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==14)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  President %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Vice President %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Veterant %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Original Member %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Prospect %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Recrue %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Recrue %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==15)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Top gangsta %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Big Gangsta %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Gangsta %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Gros bras %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Voyou %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Delinquant %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Delinquant %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(member==16)
				{
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Leader Blood'z %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Delinquant %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Malfrat %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Voyou %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Gangsta %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Petit Gangsta %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "** Petit Gangsta %s: %s  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
				}
				else if(leader==1)
				{
				    format(string, sizeof(string), "**  Sheriff %s: %s , Terminé **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==2)
				{
				    format(string, sizeof(string), "**  Directeur Fédéral %s: %s , Terminé **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==3)
				{
				    format(string, sizeof(string), "**  Caporal %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==4)
				{
				    format(string, sizeof(string), "**  Paramedic %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==5)
				{
				    format(string, sizeof(string), "**  Dirigente MS-13 %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==6)
				{
				    format(string, sizeof(string), "** Le Parrain %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==7)
				{
				    format(string, sizeof(string), "**  Maire %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==8)
				{
				    format(string, sizeof(string), "**  Parrain %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==9)
				{
				    format(string, sizeof(string), "**  Chefs des Russes %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==10)
				{
				    format(string, sizeof(string), "** Leader de bande %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==11)
				{
				    format(string, sizeof(string), "**  Boss %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==12)
				{
				    format(string, sizeof(string), "**  K.Otec %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==14)
				{
				    format(string, sizeof(string), "**  President  %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==15)
				{
				    format(string, sizeof(string), "**  Top Gangsta %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(leader==16)
				{
				    format(string, sizeof(string), "**  Leader Blood'z %s: %s  **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], COLOR_LIGHTBLUE, string);
				}
				else if(PlayerInfo[playerid][pFMember] < 255)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "**  Godfather %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "**  Underboss %s: %s  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "**  Capo %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "**  Soldier %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "**  Associate %s: %s   **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "**  Outsider %s: %s   **", sendername, result); }
					else { format(string, sizeof(string), "**  Outsider %s: %s  **", sendername, result); }
					SendNewFamilyMessage(PlayerInfo[playerid][pFMember], COLOR_LIGHTBLUE, string);
				}
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'avez pas de famille!");
				return 1;
			}
		}//not connected
		return 1;
	}
	if (strcmp(cmd, "/membres", true) == 0 || strcmp(cmd, "/membres", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Policiers connecté:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "** Sheriff ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Sheriff Adjoint ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
                            }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Capitaine ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Lieutenant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Sergent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Officier ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Cadet ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Cadet ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "FBI connecté:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Directeur de la FBI ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Co-Directeur ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Agent Spécial ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Agent expérimenté ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Agent du FBI ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Stagiaire au FBI ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Stagiaire au FBI ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Millitaires en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Colonel ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Lieutenant-Colonel ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Major ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Caporal ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Soldat ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Soldat Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Soldat Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Paramedics online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
    	        			format(string, 256, "** Paramedic ** %s", sendername);
					    	SendClientMessage(playerid, COLOR_GRAD2, string);

						}
					}
				}
			}
	        if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "MS-13 en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Dirigente MS-13 ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Consejero ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Traficante ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Delincuente ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Dealer ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Nuevo ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Nuevo ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Cosa Nostra en ligne");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Capo ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Vice Capo ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Associato ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Sicario ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Soldato ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Reclutare ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Reclutare ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Gouvernement en ligne");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Président ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Vice président ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Ministre  ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Secrétaire d'état ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** chef des GDC ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** GDC/chauffeur ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** GDC/chauffeur ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			/*else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "membres de l'Organizatsiya en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Parrain ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Dirigeant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Rouge ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Assassin ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Tueur ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Brute ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Exilé ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}*/
			else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres du San News en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Chef ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** SOus Chef ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Porte Parole ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Bras droit ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Bras gauche ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Homme de main** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Homme de main ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres des Racer'z en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Leader de bande ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Frere ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Pote ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Ami ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Zonard ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Relation ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Relation ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Permisrs online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Sous Patron ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Gestionnaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Instructeur Confirmé ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Instructeur ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Stagiaire ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "membres des Ruff Ryders connectés:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** King Ryder'z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Boss Ryder'Z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Expert Ryder'Z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Rider'Z confirmé ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Ryder'Z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** New Ryder'Z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** New Ryder'Z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}

			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres Crip's en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Caid ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Grossiste ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Gros-bras ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Voyou ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Delinquant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Delinquant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres Ballas en ligne :");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Dealer Blood'z ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Delinquant ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Malfrat ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Voyou ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Petit gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Petit gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Membres de la famille Russe en ligne:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
							if(PlayerInfo[i][pRank] == 6 || PlayerInfo[i][pLeader] == 12)
							{
				    	        format(string, 256, "** Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Bras-droit ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Gérant de la mafia ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Dealer en chef ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Dealer ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Apprenti ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Apprenti ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else { SendClientMessage(playerid, COLOR_GRAD2, "Vous n'avez pas de faction"); }
		}
		return 1;
	}
	if(strcmp(cmd, "/news", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êtez muté");
					return 1;
				}
				/*new counter = 0;*/
    			for(new i = 330; i <= 334; i++)
    			/*{
    			    new dist = CheckPlayerDistanceToVehicle(7, playerid, i);
    			    if(dist)
    			    {
    			        counter++;
    			    }
    			}
      	        if(counter == 0)
    			{
					SendClientMessage(playerid, COLOR_GREY, "   vous n'êtes pas prêt/dans un véhicule de news !");
					return 1;
    			}
    			else*/
    			{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[82];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /news [newstexte]");
						return 1;
					}
					format(string, sizeof(string), "[San News]Journaliste %s: %s",sendername, result);
					OOCNews(COLOR_NEWS,string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas dans la faction San News !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/interview", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* L'interview est terminé.");
			        SendClientMessage(TalkingLive[playerid], COLOR_WHITE, "* L'interview est terminé.");
			        TogglePlayerControllable(playerid, 1);
			        TogglePlayerControllable(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /interview [idDuJoueur/PartieDuNom]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous interviewez vous mêmes!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* vous proposez à %s de l'interviewer.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s vous propose de vous interviewer. Faites '/accepter interview' pour accepté sa demmande.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas près de ce joueur !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Id de joueur incorrecte !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas dans la faction San News !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/vendredrogue", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'etes pas un dealer de drogue!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /vendredrogue [ID] [Montant] [prix]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Entre [1et99]"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 15000) { SendClientMessage(playerid, COLOR_GREY, "  Le prix doit être compris entre 1 et 15000!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs] ) { SendClientMessage(playerid, COLOR_GREY, "   Tu ne peux pas avoir autant de drogue sur toi!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, " Vous ne pouvez pas vous en vendre vous meme!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						ApplyAnimation(playerid, "DEALER", "shop_pay",4.0,0,0,0,0,0);
					    format(string, sizeof(string), "* Vous offrez à %s d'acheter %d de gramme de drogue à $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Le dealer de drogue %s veut vous vendre %d de gramme de drogue pour $%d, (tapez /accepter drogue) pour acheter.", sendername, needed, money);
						SendClientMessage(playa, COLOR_WHITE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas à coté de vous !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, " Ce joueur est Hors Ligne.");
			}
		}
		return 1;
    }
    if(strcmp(cmd, "/vendredroguea", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] !=4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un dealer de drogue");
				return 1;
		    }
		    if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "  Vous n'etes pas au bonne endroit!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "[CMD]: /vendredrogua [ID] [Montant] [prix]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Entre [1et99]!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Le prix doit être compris entre 1 et 99999!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   Tu ne peux pas avoir autant de drogue sur toi!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Vous ne pouvez pas vous en vendre vous meme!");
					        return 1;
					    }
					    if(PlayerInfo[playa][pJob] != 4)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Vous pouvez vendre la drogue seulement aux trafiquants de drogue ! ");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Vous offrez à %s d'acheter %d de gramme de drogue à $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Le dealer de drogue %s veut vous vendre %d de gramme de drogue pour $%d, (tapez /accepter drugs) pour acheter.", sendername, needed, money);
						SendClientMessage(playa, COLOR_WHITE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas à coté de vous !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est Hors Ligne.");
			}
		}
		return 1;
    }
    if(strcmp(cmdtext, "/usedrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   employez la drogue tandis que vous combattez !");
	            return 1;
	        }
	        if(UsingDrugs[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Vous êtes haut déjà !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pDrugs] > 1)
			{
			    PlayerStoned[playerid] += 1;
			    if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Stone", 4000, 1); }
			    new Float:PlayersArmour;
			    GetPlayerArmour(playerid, PlayersArmour);
			    if(PlayerInfo[playerid][pDrugPerk] > 0)
			    {
			        SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    }
			    SendClientMessage(playerid, COLOR_GREY, "   2 grammes de drogue utilisé!");
			    PlayerInfo[playerid][pDrugs] -= 2;
			    SetPlayerArmour(playerid, PlayersArmour + 6.0);
			    SetPlayerWeather(playerid, -68);
			    UsingDrugs[playerid] = 1;
			    //SetTimer("DrugEffectGone", 25000, 0);
			    SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    if(STDPlayer[playerid]==1)
				{
				     STDPlayer[playerid] = 0;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vous n'êtes désormais plus atteint d'une MST en raison de la drogue !");
				}
				else if(STDPlayer[playerid]==2)
				{
				     STDPlayer[playerid] = 1;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vous avez abaissé la MST au Chlamydia en raison de la drogue !");
				}
				else if(STDPlayer[playerid]==3)
				{
				     STDPlayer[playerid] = 2;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vous avez abaissé la MST à la gonorrhée en raison de la drogue !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous ne faites laisser aucun gramme de drogue !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/utiliserdrogue", true) == 0) // Drug system by Elli
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   employez la drogue tandis que vous combattez !");
	            return 1;
	        }
	        if(UsingDrugs[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "   Vous êtes haut déjà !");
	            return 1;
	        }
	        new x_nr[256];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /utiliserdrogue [nom]");
	            SendClientMessage(playerid, COLOR_WHITE, "Noms valide: Beuh, Heroine");
	            return 1;
	        }
	        if(strcmp(x_nr,"Beuh",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 1)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Vous etes~n~~p~Droguer", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
	                if(PlayerInfo[playerid][pDrugPerk] > 0)
			    	{
			        	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	}
			    	PlayerInfo[playerid][pDrugs] -= 2;
			    	SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    	SetPlayerWeather(playerid, -68);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "* %s prend de la Beuh, se roule un join, puis commence à fumer.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			    	if(STDPlayer[playerid]==1)
					{
				    	STDPlayer[playerid] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "* Vous n'êtes désormais plus atteint d'une MST en raison de la drogue !");
					}
					else if(STDPlayer[playerid]==2)
					{
    					STDPlayer[playerid] = 1;
				    	SendClientMessage(playerid, COLOR_WHITE, "* Vous avez abaissé la MST au Chlamydia en raison de la drogue !");
					}
					else if(STDPlayer[playerid]==3)
					{
				    	STDPlayer[playerid] = 2;
				    	SendClientMessage(playerid, COLOR_WHITE, "* Vous avez abaissé la MST à la gonorrhée en raison de la drogue !");
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez abaissé la MST à la gonorrhée en raison de la drogue !");
	            }
	        }
	        else if(strcmp(x_nr,"Heroine",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 2)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~You are~n~~p~Stoned", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
	                if(PlayerInfo[playerid][pDrugPerk] > 0)
			    	{
			        	SetPlayerArmour(playerid, PlayersArmour + 15.0);
			    	}
			    	PlayerInfo[playerid][pDrugs] -= 3;
			    	SetPlayerArmour(playerid, PlayersArmour + 15.0);
			    	SetPlayerWeather(playerid, -30);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "* %s prend de l'héroïne.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
			    	if(STDPlayer[playerid]==1)
					{
				    	STDPlayer[playerid] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "* Vous n'êtes désormais plus atteint d'un MST en raison de la drogue !");
					}
					else if(STDPlayer[playerid]==2)
					{
    					STDPlayer[playerid] = 1;
				    	SendClientMessage(playerid, COLOR_WHITE, "* Vous avez abaissé la MST au Chlamydia en raison de la drogue !");
					}
					else if(STDPlayer[playerid]==3)
					{
				    	STDPlayer[playerid] = 2;
				    	SendClientMessage(playerid, COLOR_WHITE, "* Vous avez abaissé la MST à la gonorrhée en raison de la drogue !");
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Vous avez abaissé la MST à la gonorrhée en raison de la drogue !");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /utiliserdrogue [name]");
	            SendClientMessage(playerid, COLOR_WHITE, "Availible names: beuh, heroine");
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/sesoigner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if (PlayerToPoint(3, playerid,1178.6906,-1324.7611,14.1325)||PlayerToPoint(3, playerid,2029.5945,-1404.6426,17.2512))
			{
	            if(STDPlayer[playerid] > 0)
	            {
					STDPlayer[playerid] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "* Vous n'êtes plus atteint d'une MST en raison de l'aide de l'hôpital !");
					SafeGivePlayerMoney(playerid, -100);
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Docteur : Votre facture médicale est de $100, -. Ayez un beau jour !");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas une MST à guérir !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas à un hôpital !");
	        }
        }
		return 1;
	}
	if(strcmp(cmd, "/ejecter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"   Vous pouvez seulement éjecter des personnes comme conducteur !");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ejecter [id]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tu ne peux pas t'ejecter toi meme, si ?"); return 1; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Vous avez ejecter %s de la voiture !", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s vous a ejecter de la voiture !", PName);
							SendClientMessage(playa, COLOR_WHITE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " Ce joueur n'est pas dans votre voiture !");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " ID invalide !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Vous devez conduire un vehicule ");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sexe", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 3)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "   Seul dans une voiture ? tu comptes faire comment ?");
					return 1;
			    }
			    new Car = GetPlayerVehicleID(playerid);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "[CMD]: /sexe [ID] [prix]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				new money;
				money = strval(tmp);
				if(money < 1 || money > 5000) { SendClientMessage(playerid, COLOR_GREY, " Prix entre 1$ et 5000$!"); return 1; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tous seul tu compte faire quoi"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Vous offrez du plaisir à %s pout $%d.", giveplayer, money);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* La coquine %s vous offre une partie de plaisir pour $%d (tapez /accepter sexe) pour accepter.", sendername, money);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "   Soyez dans une voiture !");
				                return 1;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "  Ce joeur n'est pas à coté de vous  !");
							return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas online !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "  Vous n'etes pas une pute");
			}
		}//not connected
		return 1;
		}
	if(strcmp(cmd, "/rechercher", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				new x;
				SendClientMessage(playerid, COLOR_GREEN, "Current Wanted Suspects:");
			    for(new i=0; i < MAX_PLAYERS; i++) {
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 1)
					    {
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s%s: %d", string,giveplayer,WantedLevel[i]);
							x++;
							if(x > 3) {
							    SendClientMessage(playerid, COLOR_YELLOW, string);
							    x = 0;
								format(string, sizeof(string), "");
							} else {
								format(string, sizeof(string), "%s, ", string);
							}
						}
					}
				}
				if(x <= 3 && x > 0) {
					string[strlen(string)-2] = '.';
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un flic/FBI/garde national !");
			}
		}//not connected
		return 1;
	}
	/*if(strcmp(cmd, "/dropcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 5)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command !");
			        return 1;
			    }
		        if(PlayerInfo[playerid][pCarTime] == 0)
		        {
		            GameTextForPlayer(playerid, "~w~Car Selling ~n~~r~Drop the car at the Crane", 5000, 1);
		            CP[playerid] = 1;
		            SetPlayerCheckpoint(playerid, -1548.3618,123.6438,3.2966,8.0);
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   You already Dropped a car, wait till your reload time is over !");
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You are not a Car Jacker !");
			}
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd, "/quitterjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pJob] > 1)
		    {
		        if(PlayerInfo[playerid][pDonateRank] > 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 2)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "* Vous n'avez pas finis votre contrat !.");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Votre niveau est de %d h .", chours / 2);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
		        }
		        else
		        {
					if(PlayerInfo[playerid][pContractTime] >= 10)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "* VOus avez terminé un contrat de 5h");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 10 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Il vous restes %d heures pour terminer le contract !", chours / 2);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'avez pas de job!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/quitterfaction", true) == 0)
	{
	   if(IsPlayerConnected(playerid))
       {
		  if(PlayerInfo[playerid][pMember] != 0 || PlayerInfo[playerid][pLeader] != 0)
		  {
	      GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
	      SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vous avez quitter votre Faction, vous êtes redevenu un Civil.");
	      gTeam[playerid] = 3;
	      PlayerInfo[playerid][pLeader] = 0;
	      PlayerInfo[playerid][pTeam] = 3;
	      PlayerInfo[playerid][pMember] = 0;
	      PlayerInfo[playerid][pRank] = 0;
	      PlayerInfo[playerid][pChar] = 0;
	      PlayerInfo[playerid][pFMember] = 255;
	      PlayerInfo[playerid][pModel] = 299;
	      SpawnPlayer(playerid);
	      new rand = random(sizeof(CIV));
	      SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
	      MedicBill[playerid] = 0;
	      return 1;
	      }
	      else if(PlayerInfo[playerid][pMember] == 0)
	      {
	          SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vous n'êtes pas dans une Faction/Famille.");
	          return 1;
          }
       }
	}
	if(strcmp(cmd, "/blanchire", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			new member = PlayerInfo[playerid][pMember];
			new leader = PlayerInfo[playerid][pLeader];
			new rank = PlayerInfo[playerid][pRank];
	 		if(gTeam[playerid] == 2)
			{
				/*if (!PlayerToPoint(3.0, playerid, 253.9280,69.6094,1003.6406))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Vous n'êtes pas à l'intérieur du commissariat de police !");
					return 1;
				}*/
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /blanchire [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous clear vous-même !"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Vous avez effacer les dossiers et les points de recherche de %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* L'officier %s à effacer vos dossiers et vos points de recherche.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						if(gTeam[giveplayerid]==4)
						{
						    gTeam[giveplayerid] = 3;
						    SetPlayerToTeamColor(giveplayerid);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalid [idDuJoueur/PartieDuNom]!");
				}
			}
			else if(member == 6||leader == 6)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /clear [idDuJoueur/PartieDuNom]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas clear vous-même !"); return 1; }
					    if(rank < 4) { SendClientMessage(playerid, COLOR_GREY, "   Vous avez besoin d'un rang 4 pour effacer quelqu'un est les points + les dossiers voulus !"); return 1; }
					    if( GetPlayerMoney(playerid) < 5000) { SendClientMessage(playerid, COLOR_GREY, "   Vous avez besoin de $5000 pour effacer votre membre de la famille !"); return 1; }
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    if(member > 0)
					    {
						    if(PlayerInfo[giveplayerid][pMember] != member)
							{
								SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas dans votre famille !");
								return 1;
							}
							format(string, sizeof(string), "* Vous avez effacer les dossiers et des points de recherche à %s pour $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Le membre de la famille %s avec le grade %d, a effacer vos dossiers et vos points  de recherches.", sendername, rank);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						else if(leader > 0)
						{
			                if(PlayerInfo[giveplayerid][pMember] != leader)
							{
								SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas dans votre famille !");
								return 1;
							}
						    format(string, sizeof(string), "* Vous avez effacer les dossiers et les points de recherches de  %s pour $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Le chef de famille %s , a effacer vos dossiers et vos points de recherches", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						SafeGivePlayerMoney(playerid, - 5000);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un flic/FBI/garde national/membre de la famille !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/pv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] != 2)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas un flic !");
			    return 1;
			}
	        if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1 || OnDuty[playerid] != 1 && PlayerInfo[playerid][pLeader] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Vous n'êtes pas en service !");
			    return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pv [idDuJoueur/PartieDuNom] [prix] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pv [idDuJoueur/PartieDuNom] [prix] [reason]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "  L'argent du pv ne peut pas être en-dessous de 1 ou de plus hauts puis 99999 !"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[82];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pv [idDuJoueur/PartieDuNom] [prix] [reason]");
							return 1;
						}
						format(string, sizeof(string), "* Vous donnez une amande à %s a payé la somme de $%d raison: %s$", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* L'officier %s vous a donné une amande de $%d raison: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						SendClientMessage(giveplayerid, COLOR_WHITE, "* Type /accepter pv, Pour accepter.");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'est pas près de vous !");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur est en horsligne !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/arreter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2  || IsACop(playerid))
			{
				if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Tu n'es pas en service !!");
				    return 1;
				}
		        /*if(!PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) || !PlayerToPoint(15.0, playerid,1537.2515,-1674.9572,13.3828))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "   You are not near the Jail, can't Arrest!");
				    return 1;
				}*/

				if(PlayerToPoint(6.0, playerid, 1526.9929,-1677.8241,5.8906))
				{//New arrest system

					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, " Le prix doit etre compris entre 1 et 99999!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					new time = strval(tmp);
					if(time < 1 || time > 60) { SendClientMessage(playerid, COLOR_GREY, "  Entre 1 et 20minutes!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					new bail = strval(tmp);
					if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, "   0 = pas de caution 1 = caution!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					new bailprice = strval(tmp);
					if(bailprice < 0 || bailprice > 3000000) { SendClientMessage(playerid, COLOR_GREY, "  Le prix ne peut pas depasser 3000000$!"); return 1; }
					new suspect = GetClosestPlayer(playerid);
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
						    	SendClientMessage(playerid, COLOR_GREY, " L'homme doit etre rechercher (/su)!");
						    	return 1;
							}
							format(string, sizeof(string), "* Vous arretez %s!", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SafeGivePlayerMoney(suspect, -moneys);
							SafeGivePlayerMoney(playerid, TicketMoney[playerid]);
							format(string, sizeof(string), "arreté par  %s ~n~ et doit payé $%d", sendername, moneys);
							GameTextForPlayer(suspect, string, 5000, 5);
							SafeResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
							    new currank[64];
		    					if(PlayerInfo[playerid][pRank] == 1) { currank = "Cadet"; }
								else if(PlayerInfo[playerid][pRank] == 2) { currank = "Officier"; }
								else if(PlayerInfo[playerid][pRank] == 3) { currank = "Sergent"; }
								else if(PlayerInfo[playerid][pRank] == 4) { currank = "Lieutenant"; }
	        					else if(PlayerInfo[playerid][pRank] == 5) { currank = "Capitaine"; }
	        					else if(PlayerInfo[playerid][pRank] == 6) { currank = "Sheriff adjoint"; }
	        					else if(PlayerInfo[playerid][pRank] == 7) { currank = "Sheriff"; }
								else { currank = "Cadet"; }
								format(string, sizeof(string), "[Police] %s %s vient juste d'arreter %s", currank ,sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "[Police] L'Agent Special %s vient juste d'arreter %s", sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							SetPlayerInterior(suspect, 10);
							SetPlayerPos(suspect,227.3662,110.8191,999.0156);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Vous êtes emprisonner pendant %d secondes. Caution : $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Vous êtes emprisonner pendant %d secondes.  Caution : Non Permise", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							PlayerInfo[suspect][pJailed] = 1;
				     	   	PlayerInfo[suspect][pArrested] += 1;
							SetPlayerFree(suspect,playerid, "Liberer");
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							WantLawyer[suspect] = 1;
						}//distance
					}//not connected
					else
					{
				    	SendClientMessage(playerid, COLOR_GREY, "  Personne ne peut etre arreter !.");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Tu es pas devant la prison !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Vous n'êtes pas flic !");
			    return 1;
			}
		}//not connected
		return 1;
	}

	if(strcmp(cmd, "/msparreter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2  || IsACop(playerid))
			{
		        /*if(!PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) || !PlayerToPoint(15.0, playerid,1537.2515,-1674.9572,13.3828))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "   You are not near the Jail, can't Arrest!");
				    return 1;
				}*/

				if(PlayerToPoint(6.0, playerid, 1800.9429,-1656.6567,14.4996) || PlayerToPoint(15.0, playerid,1658.0735,-1332.9010,17.4316) || PlayerToPoint(6.0, playerid, 1658.0735,-1332.9010,17.4316))
				{//New arrest system

					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, " Prxi de l'emprisonnement entre 100 et 99999$"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					new time = strval(tmp);
					if(time < 1 || time > 60) { SendClientMessage(playerid, COLOR_GREY, "   Temps en tres 1 et 20minites!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					new bail = strval(tmp);
					if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, " Pour decider du baye 0 ou 1"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arreter [prix] [temps (minutes)] [caution (0=non 1=oui)] [prix de la caution]");
						return 1;
					}
					new bailprice = strval(tmp);
					if(bailprice < 0 || bailprice > 3000000) { SendClientMessage(playerid, COLOR_GREY, " Caution du bail peut etre de 0 ou 999999$ "); return 1; }
					new suspect = GetClosestPlayer(playerid);
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
						    	SendClientMessage(playerid, COLOR_GREY, "  L'homme doit etre rechercher (/su)!");
						    	return 1;
							}
							format(string, sizeof(string), "* Vous arretez %s!", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SafeGivePlayerMoney(suspect, -moneys);
							SafeGivePlayerMoney(playerid, TicketMoney[playerid]);
							format(string, sizeof(string), "%s est arreté par ~n~ $%d", sendername, moneys);
							GameTextForPlayer(suspect, string, 5000, 5);
							SafeResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
							    new currank[64];
		    					if(PlayerInfo[playerid][pRank] == 1) { currank = "Cadet"; }
								else if(PlayerInfo[playerid][pRank] == 2) { currank = "Officier"; }
								else if(PlayerInfo[playerid][pRank] == 3) { currank = "Sergent"; }
								else if(PlayerInfo[playerid][pRank] == 4) { currank = "Lieutenant"; }
	        					else if(PlayerInfo[playerid][pRank] == 5) { currank = "Capitaine"; }
	        					else if(PlayerInfo[playerid][pRank] == 6) { currank = "Sheriff adjoint"; }
	        					else if(PlayerInfo[playerid][pRank] == 7) { currank = "Sheriff"; }
								else { currank = "Cadet"; }
								format(string, sizeof(string), "[MSP] %s %s vient d'arreter %s", currank ,sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "[MSP] AgentSpecial %s vient d'arreter %s", sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							SetPlayerInterior(suspect, 3);
							SetPlayerPos(suspect,193.3692,175.9255,1003.0234);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Vous êtes emprisonner pendant %d secondes. Caution: $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Vous êtes emprisonner pendant %d secondes.  Caution : Non Permise", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							PlayerInfo[suspect][pJailed] = 1;
				     	   	PlayerInfo[suspect][pArrested] += 1;
							SetPlayerFree(suspect,playerid, "Liberer");
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							WantLawyer[suspect] = 1;
						}//distance
					}//not connected
					else
					{
				    	SendClientMessage(playerid, COLOR_GREY, "  Personne ne peut etre arreter.");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Vous n'etes pas devant une prison.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, " Vous n'etes pas de la MSP !!");
			    return 1;
			}
		}//not connected
		return 1;
	}

	if(strcmp(cmd, "/contract", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /contract [idDuJoueur/PartieDuNom] [amount]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /contract [idDuJoueur/PartieDuNom] [amount]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1000 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "   L'argent de contrat doit être au moins $1000, et maximum $100000 !"); return 1; }
			if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Vous devez être le niveau 3 pour placer un contrat.");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 14 && PlayerInfo[playerid][pMember] == 14)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Ne peut pas placer des contrats sur votre propre agence !");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pLeader] == 14 && PlayerInfo[playerid][pMember] == 14)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Ne peut pas placer des contrats sur votre propre agence !");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pMember] == 14||PlayerInfo[giveplayerid][pLeader] == 14)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Ne peut pas embaucher un Hitman !");
				        return 1;
				    }
				    if(gTeam[giveplayerid] == 2 && moneys != 100000)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   seulement 100000$ peuvent etre placé comme contrat sur les flics");
				        return 1;
				    }
				    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Vous ne pouvez pas vous s'embaucher !"); return 1; }
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney =  GetPlayerMoney(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						SafeGivePlayerMoney(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "%s a placé un contrat sur %s, pour $%d.",sendername, giveplayer, moneys);
						SendFamilyMessage(8, COLOR_YELLOW, string);
						format(string, sizeof(string), "* Vous avez placé un contrat sur %s, pour $%d.",giveplayer, moneys);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Quantité inadmissible de transaction.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d n'est pas un joueur actif.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
    if(Script_OnPlayerCommandText(playerid,cmdtext)) return 1;
	return SendClientMessage(playerid,COLOR_RED,"Cette commande n' existe pas (/aide)");
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == Register)
	{
	    new sendername[20],string[128];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "users/%s.ini", sendername);
		new File: hFile = fopen(string, io_read);
		if (hFile)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Ce nom est déjà utiliser reconnecter vous avec un autre Mot de passe.");
			fclose(hFile);
			return 1;
		}
		if(!strlen(inputtext))
		{
			ShowPlayerDialog(playerid,Register,DIALOG_STYLE_INPUT,"Enregister vous","Veuillez entrez votre mot de passe\nPour vous enregistrer","Ok","Annuler");
			return 1;
		}
		//Encrypt(tmppass);
		OnPlayerRegister(playerid,inputtext);
	}
	if(dialogid == Login)
	{
		if(gPlayerLogged[playerid] == 1)
		{
			SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "SERVEUR: Vous êtes déjà loggué.");
			return 1;
		}
		if(!strlen(inputtext))
		{
			ShowPlayerDialog(playerid,Login,DIALOG_STYLE_INPUT,"Loguez vous","Veuillez entrez votre mot de passe\nPour vous loguez","Ok","Annuler");
			return 1;
		}
		//Encrypt(tmppass);
		return OnPlayerLogin(playerid,inputtext);
	}
	if(dialogid == DIALOGID)
	{
		if(response)
		{
			if(listitem == 0) // Pistolets
			{
				ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selectionez une arme", "Deagle 800$\nSilencieux 800$", "Choisir", "Retour");
			}
			if(listitem == 1) // Fusil
			{
				ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selectionez une arme", "Fusil 1400$\nFusil de combat 1700$\nSniper 3000$", "Choisir", "Retour");
			}
			if(listitem == 2) // Mitrailleuses
			{
				ShowPlayerDialog(playerid, DIALOGID+3, DIALOG_STYLE_LIST, "Selectionez une arme", "M4 2000$\nAk-47 2000$\nMp5 1100$", "Choisir", "Retour");
			}
			if(listitem == 3) // Rifles
			{
				ShowPlayerDialog(playerid, DIALOGID+4, DIALOG_STYLE_LIST, "Selectionez une arme", "Poings Américain 75$\nClub de golf 100$\nCouteau 75$\nBatte de Baseball 100$\nParachute 75$\nArmure 500$", "Choisir", "Retour");
			}
		}
		return 1;
	}

	if(dialogid == DIALOGID+1) // Pistolets
	{
		if(response)
		{
			if(listitem == 0) // deagle 800$
			{
				if( GetPlayerMoney(playerid) >= 800)
				{
			    	GivePlayerWeapon(playerid, 24, 100);
                    SafeGivePlayerMoney(playerid,-800);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Deagle pour 800$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 800$ pour acheter un Deagle.");
				}
			}
			if(listitem == 1) // silencieux 800$
			{
				if( GetPlayerMoney(playerid) >= 800)
				{
			    	GivePlayerWeapon(playerid, 23, 100);
                    SafeGivePlayerMoney(playerid,-800);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Silencieux pour 800$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 600$ pour acheter un Silencieux.");
				}
			}
		}
		return 1;
	}

	if(dialogid == DIALOGID+2) // Fusils
	{
		if(response)
		{
			if(listitem == 0) // Fusil 1000$
			{
				if( GetPlayerMoney(playerid) >= 1400)
				{
			    	GivePlayerWeapon(playerid, 25, 75);
                    SafeGivePlayerMoney(playerid,-1400);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Fusil pour 1400$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1400$ pour acheter un Fusil.");
				}
			}
			if(listitem == 1) // Fusil de combat 1200$
			{
				if( GetPlayerMoney(playerid) >= 1700)
				{
			    	GivePlayerWeapon(playerid, 27, 75);
                    SafeGivePlayerMoney(playerid,-1700);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Fusil de combat pour 1700$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1700$ pour acheter un Fusil de combat.");
				}
			}
			if(listitem == 2) // Sniper 1000$
			{
				if( GetPlayerMoney(playerid) >= 3000)
				{
			    	GivePlayerWeapon(playerid, 34, 75);
                    SafeGivePlayerMoney(playerid,-3000);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Sniper pour 3000$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 3000$ pour acheter un Sniper.");
				}
			}
		}
		return 1;
	}

	if(dialogid == DIALOGID+3) // Mitrailleuses
	{
		if(response)
		{
			if(listitem == 0) // M4 800$
			{
				if( GetPlayerMoney(playerid) >= 2000)
				{
			    	GivePlayerWeapon(playerid, 31, 250);
                    SafeGivePlayerMoney(playerid,-2000);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un M4 pour 2000$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 2000$ pour acheter un M4.");
				}
			}
			if(listitem == 1) //Ak-47 800$
			{
				if( GetPlayerMoney(playerid) >= 2000)
				{
			    	GivePlayerWeapon(playerid, 30, 250);
                    SafeGivePlayerMoney(playerid,-2000);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Ak-47 pour 2000$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 2000$ pour acheter un Ak-47.");
				}
			}
			if(listitem == 2) //Mp5 750$
			{
				if( GetPlayerMoney(playerid) >= 1100)
				{
			    	GivePlayerWeapon(playerid, 29, 500);
                    SafeGivePlayerMoney(playerid,-1100);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Mp5 pour 1100$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1100$ pour acheter un Mp5.");
				}
			}
		}
		return 1;
	}

	if(dialogid == DIALOGID+4) // Rifle's
	{
		if(response)
		{
			if(listitem == 0) // Poings Américain 75$
			{
				if( GetPlayerMoney(playerid) >= 75)
				{
			    	GivePlayerWeapon(playerid, 1, 1);
                    SafeGivePlayerMoney(playerid,-75);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Poings Américain pour 75$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 75$ pour acheter un Poings Américain.");
				}
			}
			if(listitem == 1) // Club de golf 100$
			{
				if( GetPlayerMoney(playerid) >= 100)
				{
			    	GivePlayerWeapon(playerid, 2, 1);
                    SafeGivePlayerMoney(playerid,-100);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Club de golf pour 100$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 100$ pour acheter un Club de golf.");
				}
			}
			if(listitem == 2) // Couteau 75$
			{
				if( GetPlayerMoney(playerid) >= 75)
				{
			    	GivePlayerWeapon(playerid, 4, 1);
                    SafeGivePlayerMoney(playerid,-75);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Couteau pour 75$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 75$ pour acheter un Couteau.");
				}
			}
			if(listitem == 3) // Batte de Baseball 100$
			{
				if( GetPlayerMoney(playerid) >= 100)
				{
			    	GivePlayerWeapon(playerid, 5, 1);
                    SafeGivePlayerMoney(playerid,-100);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté une Batte de Baseball pour 100$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 100$ pour acheter une Batte de Baseball.");
				}
			}
			if(listitem == 4) // Pelle 100$
			{
				if( GetPlayerMoney(playerid) >= 75)
				{
			    	GivePlayerWeapon(playerid, 46, 1);
                    SafeGivePlayerMoney(playerid,-75);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un parachute pour 75$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 75$ pour acheter un parachute.");
				}
			}
			if(listitem == 5) // Sabre 100$
			{
				if( GetPlayerMoney(playerid) >= 800)
				{
			    	SetPlayerArmour(playerid, 100);
                    SafeGivePlayerMoney(playerid,-800);
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté une armure pour 800$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 800$ pour acheter une armure.");
				}
			}
		}
		return 1;
	}
    new car;
	car = GetPlayerVehicleID(playerid);
	if(dialogid == DIALOGID1) // Menu
	{
		if(response)
		{
   			if(listitem == 0) // wheels
			{
				ShowPlayerDialog(playerid, DIALOGID1+1, DIALOG_STYLE_LIST, "Les roues", "Offroad \nShadow \nMega \nRimshine \nWires \nClassic \nTwist \nCutter \nSwitch \nGrove \nImport \nDollar \nTrance \nAtomic \nRetour \nAhab \nVirtual \nAccess", "OK", "Annuler");
			}
   			if(listitem == 1) // Spoilers
			{
				ShowPlayerDialog(playerid, DIALOGID1+2, DIALOG_STYLE_LIST, "Spoilers", "Elegy1 \nElegy2 \nFlash1 \nFlash2 \nJester1 \nJester2 \nStratum1 \nStratum2 \nSultan1 \nSultan2 \nUranus1 \nUranus2 \nRetour", "Installer", "Annuler");
   			}
   			if(listitem == 2) // Pots d'echapements
			{
				ShowPlayerDialog(playerid, DIALOGID1+3, DIALOG_STYLE_LIST, "Pots d'echapements", "Elegy1 \nElegy2 \nFlash1 \nFlash2 \nJester1 \nJester2 \nStratum1 \nStratum2 \nSultan1 \nSultan2 \nUranus1 \nUranus2 \nRetour", "Installer", "Annuler");
   			}
   			if(listitem == 3) // Pare-choc avant
			{
				ShowPlayerDialog(playerid, DIALOGID1+4, DIALOG_STYLE_LIST, "Pare-choc avant", "Elegy1 \nElegy2 \nFlash1 \nFlash2 \nJester1 \nJester2 \nStratum1 \nStratum2 \nSultan1 \nSultan2 \nUranus1 \nUranus2 \nRetour", "Installer", "Annuler");
   			}
   			if(listitem == 4) // pare choc arriere
			{
				ShowPlayerDialog(playerid, DIALOGID1+5, DIALOG_STYLE_LIST, "pare choc arriere", "Elegy1 \nElegy2 \nFlash1 \nFlash2 \nJester1 \nJester2 \nStratum1 \nStratum2 \nSultan1 \nSultan2 \nUranus1 \nUranus2 \nRetour", "Installer", "Annuler");
   			}
   			if(listitem == 5) // Prise d'air
			{
				ShowPlayerDialog(playerid, DIALOGID1+6, DIALOG_STYLE_LIST, "Prise d'air", "Elegy1 \nElegy2 \nFlash1 \nFlash2 \nJester1 \nJester2 \nStratum1 \nStratum2 \nSultan1 \nSultan2 \nUranus1 \nUranus2 \nRetour", "Installer", "Annuler");
   			}
   			if(listitem == 6) // Bas de caisse
			{
				ShowPlayerDialog(playerid, DIALOGID1+7, DIALOG_STYLE_LIST, "Bas de caisse", "Elegy1 \nElegy2 \nFlash1 \nFlash2 \nJester1 \nJester2 \nStratum1 \nStratum2 \nSultan1 \nSultan2 \nUranus1 \nUranus2 \nRetour", "Installer", "Annuler");
   			}
			if(listitem == 7) // Nitro
			{
                ShowPlayerDialog(playerid, DIALOGID1+8, DIALOG_STYLE_LIST, "Nitro", "Nitro x2\nNitro x5\nNitro x 10", "Installer", "Annuler");
   			}
			if(listitem == 8) // Hydraulic
			{
            AddVehicleComponent(car,1087);
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning12] = 1087;
            ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
   			}
			if(listitem == 9) // AutoTuning
			{
	new idcarro;
	TogglePlayerControllable(playerid, 1);
	idcarro = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
	{
	AddVehicleComponent(idcarro,1046);
	AddVehicleComponent(idcarro,1171);
	AddVehicleComponent(idcarro,1149);
	AddVehicleComponent(idcarro,1035);
	AddVehicleComponent(idcarro,1147);
	AddVehicleComponent(idcarro,1036);
	AddVehicleComponent(idcarro,1040);
	ChangeVehiclePaintjob(idcarro, 2);
	ChangeVehicleColor(idcarro, 6, 6);
	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
 	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
	{
	AddVehicleComponent(idcarro,1028);
	AddVehicleComponent(idcarro,1169);
	AddVehicleComponent(idcarro,1141);
	AddVehicleComponent(idcarro,1032);
	AddVehicleComponent(idcarro,1138);
	AddVehicleComponent(idcarro,1026);
 	AddVehicleComponent(idcarro,1027);
	ChangeVehiclePaintjob(idcarro, 2);
	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
 	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
	{
	AddVehicleComponent(idcarro,1046);
	AddVehicleComponent(idcarro,1153);
	AddVehicleComponent(idcarro,1150);
	AddVehicleComponent(idcarro,1054);
	AddVehicleComponent(idcarro,1049);
	AddVehicleComponent(idcarro,1047);
 	AddVehicleComponent(idcarro,1051);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 2);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
	{
	AddVehicleComponent(idcarro,1065);
	AddVehicleComponent(idcarro,1160);
	AddVehicleComponent(idcarro,1159);
	AddVehicleComponent(idcarro,1067);
	AddVehicleComponent(idcarro,1162);
	AddVehicleComponent(idcarro,1069);
 	AddVehicleComponent(idcarro,1071);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 1);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
	{
	AddVehicleComponent(idcarro,1064);
	AddVehicleComponent(idcarro,1155);
	AddVehicleComponent(idcarro,1154);
	AddVehicleComponent(idcarro,1055);
	AddVehicleComponent(idcarro,1158);
	AddVehicleComponent(idcarro,1056);
 	AddVehicleComponent(idcarro,1062);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 2);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
	{
	AddVehicleComponent(idcarro,1089);
	AddVehicleComponent(idcarro,1166);
	AddVehicleComponent(idcarro,1168);
	AddVehicleComponent(idcarro,1088);
	AddVehicleComponent(idcarro,1164);
	AddVehicleComponent(idcarro,1090);
 	AddVehicleComponent(idcarro,1094);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 2);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 575)
	{
	AddVehicleComponent(idcarro,1044);
	AddVehicleComponent(idcarro,1174);
	AddVehicleComponent(idcarro,1176);
	AddVehicleComponent(idcarro,1042);
 	AddVehicleComponent(idcarro,1099);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 0);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
	{
	AddVehicleComponent(idcarro,1126);
    AddVehicleComponent(idcarro,1179);
	AddVehicleComponent(idcarro,1180);
	AddVehicleComponent(idcarro,1122);
 	AddVehicleComponent(idcarro,1101);
 	AddVehicleComponent(idcarro,1125);
 	AddVehicleComponent(idcarro,1123);
 	AddVehicleComponent(idcarro,1100);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 2);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
	{
	AddVehicleComponent(idcarro,1104);
	AddVehicleComponent(idcarro,1182);
	AddVehicleComponent(idcarro,1184);
	AddVehicleComponent(idcarro,1108);
 	AddVehicleComponent(idcarro,1107);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 1);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
	{
	AddVehicleComponent(idcarro,1129);
	AddVehicleComponent(idcarro,1189);
	AddVehicleComponent(idcarro,1187);
	AddVehicleComponent(idcarro,1102);
 	AddVehicleComponent(idcarro,1133);
 	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	ChangeVehiclePaintjob(idcarro, 2);
	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420)
	{
	AddVehicleComponent(idcarro,1010);
 	AddVehicleComponent(idcarro,1087);
 	AddVehicleComponent(idcarro,1081);
 	AddVehicleComponent(idcarro,1139);
 	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400)
	{
	AddVehicleComponent(idcarro,1010);
 	AddVehicleComponent(idcarro,1087);
 	AddVehicleComponent(idcarro,1018);
 	AddVehicleComponent(idcarro,1013);
 	AddVehicleComponent(idcarro,1081);
 	AddVehicleComponent(idcarro,1086);
 	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 401)
	{
	AddVehicleComponent(idcarro,1086);
 	AddVehicleComponent(idcarro,1139);
 	AddVehicleComponent(idcarro,1081);
 	AddVehicleComponent(idcarro,1010);
 	AddVehicleComponent(idcarro,1087);
 	AddVehicleComponent(idcarro,1012);
 	AddVehicleComponent(idcarro,1013);
 	AddVehicleComponent(idcarro,1042);
 	AddVehicleComponent(idcarro,1043);
 	AddVehicleComponent(idcarro,1018);
 	AddVehicleComponent(idcarro,1006);
 	AddVehicleComponent(idcarro,1007);
 	AddVehicleComponent(idcarro,1017);
 	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
	{
	ChangeVehiclePaintjob(idcarro,2);
 	AddVehicleComponent(idcarro,1191);
 	AddVehicleComponent(idcarro,1193);
 	AddVehicleComponent(idcarro,1010);
 	AddVehicleComponent(idcarro,1018);
 	AddVehicleComponent(idcarro,1081);
 	AddVehicleComponent(idcarro,1087);
 	AddVehicleComponent(idcarro,1134);
 	AddVehicleComponent(idcarro,1137);
 	ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
	}
	else
	{
	TogglePlayerControllable(playerid, 1);
	AddVehicleComponent(idcarro,nitro);
 	AddVehicleComponent(idcarro,rodawire);
 	AddVehicleComponent(idcarro,suspensao);
	}
   			}
		}
		return 1;
	}
	if(dialogid == DIALOGID1+1) // Wheels
	{
		if(response)
		{
			if(listitem == 0) // Style 1
			{
			AddVehicleComponent(car,1025);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1025;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Style 2
			{
			AddVehicleComponent(car,1073);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1073;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Style 3
			{
			AddVehicleComponent(car,1074);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1074;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Style 4
			{
			AddVehicleComponent(car,1075);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1075;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Style 5
			{
			AddVehicleComponent(car,1076);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1076;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Style 6
			{
			AddVehicleComponent(car,1077);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1077;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Style 7
			{
			AddVehicleComponent(car,1078);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1078;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Style 8
			{
			AddVehicleComponent(car,1079);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1079;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Style 6
			{
			AddVehicleComponent(car,1080);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1080;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Style 6
			{
			AddVehicleComponent(car,1081);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1081;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Style 6
			{
			AddVehicleComponent(car,1082);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1082;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Style 6
			{
			AddVehicleComponent(car,1083);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1083;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Style 6
			{
			AddVehicleComponent(car,1084);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1084;
			TuningVehicule(vehicleid);
			}
			if(listitem == 13) // Style 6
			{
			AddVehicleComponent(car,1085);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1085;
			TuningVehicule(vehicleid);
			}
			if(listitem == 14) // Style 6
			{
			AddVehicleComponent(car,1096);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1096;
			TuningVehicule(vehicleid);
			}
			if(listitem == 15) // Style 6
			{
			AddVehicleComponent(car,1097);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1097;
			TuningVehicule(vehicleid);
			}
			if(listitem == 16) // Style 6
			{
			AddVehicleComponent(car,1098);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning16] = 1098;
			TuningVehicule(vehicleid);
			}
			if(listitem == 17) // Back
  			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  			TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
	}
    if(dialogid == DIALOGID1+2) // Spoilers
	{
		if(response)
		{
			if(listitem == 0) // Elegy1
			{
			AddVehicleComponent(car,1147);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1147;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Elegy2
			{
			AddVehicleComponent(car,1146);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1146;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Flash1
			{
			AddVehicleComponent(car,1049);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1049;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Flash2
			{
			AddVehicleComponent(car,1150);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1150;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Jetser1
			{
			AddVehicleComponent(car,1162);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1162;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Jetser2
			{
			AddVehicleComponent(car,1158);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1158;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Stratum1
			{
			AddVehicleComponent(car,1158);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1158;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Stratum2
			{
			AddVehicleComponent(car,1060);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1060;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Sultan1
			{
			AddVehicleComponent(car,1138);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1138;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Sultan2
			{
			AddVehicleComponent(car,1139);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1139;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Uranus1
			{
			AddVehicleComponent(car,1164);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1164;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Uranus2
			{
			AddVehicleComponent(car,1163);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning1] = 1163;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
    if(dialogid == DIALOGID1+3) // Pots d'echappement
	{
		if(response)
		{
			if(listitem == 0) // Elegy1
			{
			AddVehicleComponent(car,1034);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1034;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Elegy2
			{
			AddVehicleComponent(car,1037);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1037;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Flash1
			{
			AddVehicleComponent(car,1046);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1046;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Flash2
			{
			AddVehicleComponent(car,1045);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1045;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Jetser1
			{
			AddVehicleComponent(car,1065);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1065;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Jetser2
			{
			AddVehicleComponent(car,1066);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1066;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Stratum1
			{
			AddVehicleComponent(car,1064);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1064;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Stratum2
			{
			AddVehicleComponent(car,1059);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1059;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Sultan1
			{
			AddVehicleComponent(car,1028);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1028;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Sultan2
			{
			AddVehicleComponent(car,1029);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1029;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Uranus1
			{
			AddVehicleComponent(car,1092);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1092;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Uranus2
			{
			AddVehicleComponent(car,1089);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning5] = 1089;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
    if(dialogid == DIALOGID1+4) // Pare-choc avant
	{
		if(response)
		{
			if(listitem == 0) // Elegy1
			{
			AddVehicleComponent(car,1171);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1171;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Elegy2
			{
			AddVehicleComponent(car,1172);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1172;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Flash1
			{
			AddVehicleComponent(car,1153);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1153;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Flash2
			{
			AddVehicleComponent(car,1152);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1152;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Jetser1
			{
			AddVehicleComponent(car,1160);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1160;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Jetser2
			{
			AddVehicleComponent(car,1173);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1173;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Stratum1
			{
			AddVehicleComponent(car,1155);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1155;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Stratum2
			{
			AddVehicleComponent(car,1157);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1157;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Sultan1
			{
			AddVehicleComponent(car,1169);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1169;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Sultan2
			{
			AddVehicleComponent(car,1170);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1170;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Uranus1
			{
			AddVehicleComponent(car,1166);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1166;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Uranus2
			{
			AddVehicleComponent(car,1165);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning3] = 1165;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
    if(dialogid == DIALOGID1+5) // Pare-choc arriere
	{
		if(response)
		{
			if(listitem == 0) // Elegy1
			{
			AddVehicleComponent(car,1149);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1149;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Elegy2
			{
			AddVehicleComponent(car,1148);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1148;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Flash1
			{
			AddVehicleComponent(car,1150);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1150;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Flash2
			{
			AddVehicleComponent(car,1151);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1151;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Jetser1
			{
			AddVehicleComponent(car,1159);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1159;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Jetser2
			{
			AddVehicleComponent(car,1161);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1161;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Stratum1
			{
			AddVehicleComponent(car,1154);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1154;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Stratum2
			{
			AddVehicleComponent(car,1156);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1156;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Sultan1
			{
			AddVehicleComponent(car,1140);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1140;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Sultan2
			{
			AddVehicleComponent(car,1141);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1141;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Uranus1
			{
			AddVehicleComponent(car,1168);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1168;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Uranus2
			{
			AddVehicleComponent(car,1167);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning4] = 1167;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
    if(dialogid == DIALOGID1+6) // Prise d'air
	{
		if(response)
		{
			if(listitem == 0) // Elegy1
			{
			AddVehicleComponent(car,1038);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1038;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Elegy2
			{
			AddVehicleComponent(car,1035);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1035;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Flash1
			{
			AddVehicleComponent(car,1054);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1054;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Flash2
			{
			AddVehicleComponent(car,1053);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1053;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Jetser1
			{
			AddVehicleComponent(car,1067);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1067;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Jetser2
			{
			AddVehicleComponent(car,1068);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1068;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Stratum1
			{
			AddVehicleComponent(car,1055);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1055;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Stratum2
			{
			AddVehicleComponent(car,1061);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1061;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Sultan1
			{
			AddVehicleComponent(car,1032);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1032;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Sultan2
			{
			AddVehicleComponent(car,1033);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1033;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Uranus1
			{
			AddVehicleComponent(car,1088);
            ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1088;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Uranus2
			{
			AddVehicleComponent(car,1091);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning9] = 1091;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
    if(dialogid == DIALOGID1+7) // Bas de caisse
	{
		if(response)
		{
			if(listitem == 0) // Elegy1
			{
			AddVehicleComponent(car,1036);
  	        AddVehicleComponent(car,1040);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1036;
            VehiculeInfo[vehicleid][Tuning11] = 1040;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Elegy2
			{
			AddVehicleComponent(car,1039);
            AddVehicleComponent(car,1041);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1039;
            VehiculeInfo[vehicleid][Tuning11] = 1041;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Flash1
			{
			AddVehicleComponent(car,1047);
		    AddVehicleComponent(car,1051);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1047;
            VehiculeInfo[vehicleid][Tuning11] = 1051;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Flash2
			{
			AddVehicleComponent(car,1048);
            AddVehicleComponent(car,1052);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1048;
            VehiculeInfo[vehicleid][Tuning11] = 1052;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Jetser1
			{
			AddVehicleComponent(car,1069);
            AddVehicleComponent(car,1071);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1069;
            VehiculeInfo[vehicleid][Tuning11] = 1071;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Jetser2
			{
			AddVehicleComponent(car,1070);
            AddVehicleComponent(car,1072);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1070;
            VehiculeInfo[vehicleid][Tuning11] = 1072;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Stratum1
			{
			AddVehicleComponent(car,1056);
            AddVehicleComponent(car,1062);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1056;
            VehiculeInfo[vehicleid][Tuning11] = 1062;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Stratum2
			{
			AddVehicleComponent(car,1057);
            AddVehicleComponent(car,1063);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1057;
            VehiculeInfo[vehicleid][Tuning11] = 1063;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Sultan1
			{
			AddVehicleComponent(car,1026);
            AddVehicleComponent(car,1027);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1026;
            VehiculeInfo[vehicleid][Tuning11] = 1027;
			TuningVehicule(vehicleid);
			}
			if(listitem == 9) // Sultan2
			{
			AddVehicleComponent(car,1031);
            AddVehicleComponent(car,1030);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1031;
            VehiculeInfo[vehicleid][Tuning11] = 1030;
			TuningVehicule(vehicleid);
			}
			if(listitem == 10) // Uranus1
			{
			AddVehicleComponent(car,1090);
            AddVehicleComponent(car,1094);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1090;
            VehiculeInfo[vehicleid][Tuning11] = 1094;
			TuningVehicule(vehicleid);
			}
			if(listitem == 11) // Uranus2
			{
			AddVehicleComponent(car,1093);
            AddVehicleComponent(car,1095);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
            new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Tuning10] = 1093;
            VehiculeInfo[vehicleid][Tuning11] = 1095;
			TuningVehicule(vehicleid);
			}
			if(listitem == 12) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
    if(dialogid == DIALOGID1+8) // Nitro
	{
		if(response)
		{
			if(listitem == 0) // Nitrox2
			{
			AddVehicleComponent(car,1009);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			if(listitem == 1) // Nitrox5
			{
			AddVehicleComponent(car,1008);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			if(listitem == 2) // Nitrox10
			{
			AddVehicleComponent(car,1010);
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			if(listitem == 3) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID1, DIALOG_STYLE_LIST, "Menu de Tunning", "Les Roues\nSpoilers\nPots d'echapements\nPare-choc avant\nPare-choc arriere\nPrise d'air\nBas de caisse\nLa Nitro\nL'Hydraulic\nL'AutoTuning", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
   /* new car;
	car = GetPlayerVehicleID(playerid);*/
	if(dialogid == DIALOGID2) // Menu
	{
		if(response)
		{
   			if(listitem == 0) // Couleurs
			{
				ShowPlayerDialog(playerid, DIALOGID2+1, DIALOG_STYLE_LIST, "Les Couleurs", "Noir \nBlanc \nBleu Noir \nBleu Petant \nVert \nRouge \nJaune \nRose \nRetour", "OK", "Annuler");
			}
			if(listitem == 1) // Paintesjobs
			{
				ShowPlayerDialog(playerid, DIALOGID2+2, DIALOG_STYLE_LIST, "Les Paintjobs", "Style 1 \nStyle 2 \nStyle 3 \nRetour", "Peindre", "Annuler");
			}
			if(listitem == 2) // reparation
			{
			RepairVehicle(GetPlayerVehicleID(playerid));
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "OK", "Annuler");
   			}
		}
		return 1;
	}
    if(dialogid == DIALOGID2+1) // Colors
	{
		if(response)
		{
			if(listitem == 0) // Black
			{
			ChangeVehicleColor(car,0,0);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 0;
            VehiculeInfo[vehicleid][Couleur2] = 0;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // White
			{
			ChangeVehicleColor(car,1,1);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 1;
            VehiculeInfo[vehicleid][Couleur2] = 1;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Dark Blue
			{
			ChangeVehicleColor(car,425,425);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 425;
            VehiculeInfo[vehicleid][Couleur2] = 425;
			TuningVehicule(vehicleid);
			}
			if(listitem == 3) // Light Blue
			{
			ChangeVehicleColor(car,2,2);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 2;
            VehiculeInfo[vehicleid][Couleur2] = 2;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Green
			{
			ChangeVehicleColor(car,16,16);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 16;
            VehiculeInfo[vehicleid][Couleur2] = 16;
			TuningVehicule(vehicleid);
			}
			if(listitem == 5) // Red
			{
			ChangeVehicleColor(car,3,3);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 3;
            VehiculeInfo[vehicleid][Couleur2] = 3;
			TuningVehicule(vehicleid);
			}
			if(listitem == 6) // Yellow
			{
			ChangeVehicleColor(car,6,6);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 6;
            VehiculeInfo[vehicleid][Couleur2] = 6;
			TuningVehicule(vehicleid);
			}
			if(listitem == 7) // Pink
			{
			ChangeVehicleColor(car,146,146);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Couleur1] = 146;
            VehiculeInfo[vehicleid][Couleur2] = 146;
			TuningVehicule(vehicleid);
			}
			if(listitem == 8) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
	}
    if(dialogid == DIALOGID2+2) // Paintjobs
	{
		if(response)
		{
			if(listitem == 0) // Style 1
			{
			ChangeVehiclePaintjob(car,0);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Peinture] = 0;
			TuningVehicule(vehicleid);
			}
			if(listitem == 1) // Style 2
			{
			ChangeVehiclePaintjob(car,1);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Peinture] = 1;
			TuningVehicule(vehicleid);
			}
			if(listitem == 2) // Style 3
			{
			ChangeVehiclePaintjob(car,2);
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			new vehicleid = GetPlayerVehicleID(playerid);
            VehiculeInfo[vehicleid][Peinture] = 2;
			TuningVehicule(vehicleid);
			}
			if(listitem == 4) // Back
			{
			ShowPlayerDialog(playerid, DIALOGID2, DIALOG_STYLE_LIST, "Menu des peintures", "Les Couleurs\nLes Paintjobs\nReparation", "Ok", "Annuler");
			}
			else//si pas de reponse
  	  		{
  	  		TogglePlayerControllable(playerid, 1);
	  		}
		}
		return 1;
    }
	if(dialogid == SHOP)
	{
		if(response)
		{
			if(listitem == 0) // Annuaire 10$
			{
				if( GetPlayerMoney(playerid) >= 10)
				{
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
                    SafeGivePlayerMoney(playerid,-10);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pPhoneBook] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Annuaire Téléphonique acheter vous pouvez maintenant voir les numéros de tous les joueurs connectés !");
		    		SendClientMessage(playerid, COLOR_WHITE, "FORMULE: Faites /numero <id/Pseudo>.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 10$ pour acheter un Annuaire.");
				}
			}
			if(listitem == 1) // Dès 10$
			{
				if( GetPlayerMoney(playerid) >= 10)
				{
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
                    SafeGivePlayerMoney(playerid,-10);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    gDice[playerid] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Dès Acheté!");
		    		SendClientMessage(playerid, COLOR_WHITE, "FORMULE: Faites /dice");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 10$ pour acheter des dès.");
				}
			}
			if(listitem == 2) // Preservatif 1$
			{
				if( GetPlayerMoney(playerid) >= 1)
				{
					GameTextForPlayer(playerid, "~r~-$1", 5000, 1);
                    SafeGivePlayerMoney(playerid,-1);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    Condom[playerid] ++;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Preservatif Acheté!");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1$ pour acheter un Preservatif.");
				}
			}
			if(listitem == 3) // Appareil photo 50$
			{
				if( GetPlayerMoney(playerid) >= 50)
				{
					GameTextForPlayer(playerid, "~r~-$50", 5000, 1);
                    SafeGivePlayerMoney(playerid,-50);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    SafeGivePlayerWeapon(playerid, 43, 50);
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Appareil photo Acheté!");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 50$ pour acheter un  Appareil photo.");
				}
			}
			if(listitem == 4) // Masque 300$
			{
				if( GetPlayerMoney(playerid) >= 300)
				{
				    if(PlayerInfo[playerid][pLevel] < 5)
		    	    {
			    		SendClientMessage(playerid, COLOR_GREY, "Vous devez être niveaux 5 pour acheter ce si");
		    			return 1;
	    		    }
			        if(PlayerInfo[playerid][pMask] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un masque");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$300", 5000, 1);
                    SafeGivePlayerMoney(playerid,-300);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pMask] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Masque Acheté!");
		    		SendClientMessage(playerid, COLOR_WHITE, "FORMULE: Faites /masque");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 300$ pour acheter un Masque.");
				}
			}
			if(listitem == 5) // Montre 60$
			{
				if( GetPlayerMoney(playerid) >= 60)
				{
			        if(PlayerInfo[playerid][pWatch] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une Montre");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$60", 5000, 1);
                    SafeGivePlayerMoney(playerid,-60);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pWatch] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Montre Achetée!");
		    		SendClientMessage(playerid, COLOR_WHITE, "FORMULE: Faites /heure");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 60$ pour acheter une Montre.");
				}
			}
			if(listitem == 6) // Canne à pêche 150$
			{
				if( GetPlayerMoney(playerid) >= 150)
				{
			        if(PlayerInfo[playerid][pFishTool] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une Canne à pêche");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$150", 5000, 1);
                    SafeGivePlayerMoney(playerid,-150);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pFishTool] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Canne à pêche Achetée!");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 150$ pour acheter une Canne à pêche.");
				}
			}
			if(listitem == 7) // Corde 10$
			{
				if( GetPlayerMoney(playerid) >= 10)
				{
			        if(Rope[playerid] >= 5)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà 5 cordes");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
                    SafeGivePlayerMoney(playerid,-10);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    Rope[playerid] += 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Corde Achetée!");
		    	    SendClientMessage(playerid, COLOR_GRAD4, "FORMULE: Pour l'utiliser faite /ligotter .");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 10$ pour acheter une Corde.");
				}
			}
			if(listitem == 8) // Briquet 5$
			{
				if( GetPlayerMoney(playerid) >= 5)
				{
			        if(PlayerInfo[playerid][pLighter] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un briquet");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$5", 5000, 1);
                    SafeGivePlayerMoney(playerid,-5);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pLighter] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Briquet Acheté!");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 5$ pour acheter un Briquet.");
				}
			}
			if(listitem == 9) // Cigarettes 10$
			{
				if( GetPlayerMoney(playerid) >= 10)
				{
			        if(PlayerInfo[playerid][pCigarettes] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà des cigarettes");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
                    SafeGivePlayerMoney(playerid,-10);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pCigarettes] = 20;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Cigarettes Achetées!");
		    	    SendClientMessage(playerid, COLOR_GRAD4, "FORMULE: Pour les utiliser faite /fumer .");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 10$ pour acheter des Cigarettes.");
				}
			}
			if(listitem == 10) // Biere 10$
			{
				if( GetPlayerMoney(playerid) >= 6)
				{
			        if(PlayerInfo[playerid][pBiere] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà des cigarettes");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$6", 5000, 1);
                    SafeGivePlayerMoney(playerid,-6);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][pBiere] = 6;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Bieres Achetées!");
		    	    SendClientMessage(playerid, COLOR_GRAD4, "FORMULE: Pour les utiliser faite /biere .");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 6$ pour acheter des bieres.");
				}
			}
			if(listitem == 11) // Radio 500$
			{
				if( GetPlayerMoney(playerid) >= 500)
				{
			        if(PlayerInfo[playerid][Radio] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà une Radio");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$500", 5000, 1);
                    SafeGivePlayerMoney(playerid,-500);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][Radio] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Radio Achetée!");
		    	    SendClientMessage(playerid, COLOR_GRAD4, "FORMULE: Faite /frequence pour choisir une frequence puis /rf pour communiquer.");
		    	    SendClientMessage(playerid, COLOR_GRAD4, "Marchand chuchotte: Pour les pub illegal va sur la frequence 1338(( /npub ))");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 500$ pour acheter une Radio.");
				}
			}
			/*if(listitem == 11) // Decodeur 7500$
			{
				if( GetPlayerMoney(playerid) >= 7500)
				{
			        if(PlayerInfo[playerid][Decoder] != 0)
		    	    {
			            SendClientMessage(playerid, COLOR_GREY, "Vous avez déjà un Décodeur");
			    		return 1;
			        }
					GameTextForPlayer(playerid, "~r~-$7500", 5000, 1);
                    SafeGivePlayerMoney(playerid,-7500);
		    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    PlayerInfo[playerid][Decoder] = 1;
		     		SendClientMessage(playerid, COLOR_GRAD4, "   Décodeur Acheté!");
		    	    SendClientMessage(playerid, COLOR_GRAD4, "FORMULE: Faite /decoder pour decoder un code.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 7500$ pour acheter un Décodeur.");
				}
		    }*/
		    if(listitem == 12)
			{
                if (GetPlayerMoney(playerid) > 20)
				{
				    PlayerInfo[playerid][pFuel] = 20;
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				    GameTextForPlayer(playerid, "~r~-$20", 5000, 1);
				    SendClientMessage(playerid, COLOR_GRAD4, "Bidon d'esence acheté /utiliserbidon");
					return 1;
				}
			}
		}
		return 1;
	}
	if(dialogid == GUNSHOP)
	{
		if(response)
		{
			if(listitem == 0) // Sniper 2000$
			{
				if( GetPlayerMoney(playerid) >= 2000)
				{
			    	GivePlayerWeapon(playerid, 34, 1000);
                    SafeGivePlayerMoney(playerid,-2000);
                    BizzInfo[0][bTill] += 2000;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Sniper pour 2000$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 2000$ pour acheter un Sniper.");
				}
			}
			if(listitem == 1) // ak47 1600$
			{
				if( GetPlayerMoney(playerid) >= 1600)
				{
			    	GivePlayerWeapon(playerid, 30, 1000);
                    SafeGivePlayerMoney(playerid,-1600);
                    BizzInfo[0][bTill] += 1600;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un ak-47 pour 1600$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1600$ pour acheter un ak-47.");
				}
			}
			if(listitem == 2) // M4 1600$
			{
				if( GetPlayerMoney(playerid) >= 1600)
				{
			    	GivePlayerWeapon(playerid, 31, 1000);
                    SafeGivePlayerMoney(playerid,-1600);
                    BizzInfo[0][bTill] += 1600;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un M4 pour 1600$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1600$ pour acheter un M4.");
				}
			}
			if(listitem == 3) // Mp5 1400$
			{
				if( GetPlayerMoney(playerid) >= 1400)
				{
			    	GivePlayerWeapon(playerid, 29, 1000);
                    SafeGivePlayerMoney(playerid,-1400);
                    BizzInfo[0][bTill] += 1400;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Mp5 pour 1400$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1400$ pour acheter un Mp5.");
				}
			}
			if(listitem == 4) // Fusil de combat 1300$
			{
				if( GetPlayerMoney(playerid) >= 1300)
				{
			    	GivePlayerWeapon(playerid, 27, 1000);
                    SafeGivePlayerMoney(playerid,-1300);
                    BizzInfo[0][bTill] += 1300;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Fusil de combat pour 1300$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1300$ pour acheter un Fusil de combat.");
				}
			}
			if(listitem == 5) // Fusil 1200$
			{
				if( GetPlayerMoney(playerid) >= 1200)
				{
			    	GivePlayerWeapon(playerid, 25, 1000);
                    SafeGivePlayerMoney(playerid,-1200);
                    BizzInfo[0][bTill] += 1200;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Fusil de combat pour 1200$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1200$ pour acheter un Fusil de combat.");
				}
			}
			if(listitem == 6) // Deagle 1000$
			{
				if( GetPlayerMoney(playerid) >= 1000)
				{
			    	GivePlayerWeapon(playerid, 24, 1000);
                    SafeGivePlayerMoney(playerid,-1000);
                    BizzInfo[0][bTill] += 1000;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Deagle pour 1000$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1000$ pour acheter un Deagle.");
				}
			}
			if(listitem == 7) // Gillet Par-Balle 1000$
			{
				if( GetPlayerMoney(playerid) >= 1000)
				{
			    	SetPlayerArmour(playerid,100);
                    SafeGivePlayerMoney(playerid,-1000);
                    BizzInfo[0][bTill] += 1000;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Gillet Par-Balle pour 1000$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 1000$ pour acheter un Gillet Par-Balle.");
				}
			}
			if(listitem == 8) // Silencieux 950$
			{
				if( GetPlayerMoney(playerid) >= 950)
				{
			    	GivePlayerWeapon(playerid, 23, 1000);
                    SafeGivePlayerMoney(playerid,-950);
                    BizzInfo[0][bTill] += 950;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Silencieux pour 950$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 950$ pour acheter un Silencieux.");
				}
			}
			if(listitem == 9) // 9mm 900$
			{
				if( GetPlayerMoney(playerid) >= 900)
				{
			    	GivePlayerWeapon(playerid, 22, 1000);
                    SafeGivePlayerMoney(playerid,-900);
                    BizzInfo[0][bTill] += 900;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un 9mm pour 900$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 900$ pour acheter un 9mm.");
				}
			}
			if(listitem == 10) // Gaz lacrymogene 850$
			{
				if( GetPlayerMoney(playerid) >= 850)
				{
			    	GivePlayerWeapon(playerid, 17, 1000);
                    SafeGivePlayerMoney(playerid,-850);
                    BizzInfo[0][bTill] += 850;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Gaz lacrymogene pour 850$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 850$ pour acheter un Gaz lacrymogene.");
				}
			}
			if(listitem == 11) // Club de Golf 150$
			{
				if( GetPlayerMoney(playerid) >= 150)
				{
			    	GivePlayerWeapon(playerid, 2, 1);
                    SafeGivePlayerMoney(playerid,-150);
                    BizzInfo[0][bTill] += 150;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Club de Golf pour 150$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 150$ pour acheter un Club de Golf.");
				}
			}
			if(listitem == 12) // Batte 150$
			{
				if( GetPlayerMoney(playerid) >= 150)
				{
			    	GivePlayerWeapon(playerid, 5, 1);
                    SafeGivePlayerMoney(playerid,-150);
                    BizzInfo[0][bTill] += 150;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté une Batte pour 150$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 150$ pour acheter une Batte.");
				}
			}
			if(listitem == 13) // Pelle 150$
			{
				if( GetPlayerMoney(playerid) >= 150)
				{
			    	GivePlayerWeapon(playerid, 6, 1);
                    SafeGivePlayerMoney(playerid,-150);
                    BizzInfo[0][bTill] += 150;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté une Pelle pour 150$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 150$ pour acheter une Pelle.");
				}
			}
			if(listitem == 14) // Sabre 150$
			{
				if( GetPlayerMoney(playerid) >= 150)
				{
			    	GivePlayerWeapon(playerid, 8, 1);
                    SafeGivePlayerMoney(playerid,-150);
                    BizzInfo[0][bTill] += 150;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Sabre pour 150$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 150$ pour acheter un Sabre.");
				}
			}
			if(listitem == 15) // Poing americain 100$
			{
				if( GetPlayerMoney(playerid) >= 100)
				{
			    	GivePlayerWeapon(playerid,1, 1);
                    SafeGivePlayerMoney(playerid,-100);
                    BizzInfo[0][bTill] += 100;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté un Poing americain pour 100$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 100$ pour acheter un Poing americain.");
				}
			}
			if(listitem == 16) // Couteau 75$
			{
				if( GetPlayerMoney(playerid) >= 75)
				{
			    	GivePlayerWeapon(playerid,4, 1);
                    SafeGivePlayerMoney(playerid,-75);
                    BizzInfo[0][bTill] += 75;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté une Couteau pour 75$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 75$ pour acheter une Couteau.");
				}
			}
			if(listitem == 17) // Bombe de Peinture 50$
			{
				if( GetPlayerMoney(playerid) >= 50)
				{
			    	GivePlayerWeapon(playerid,41, 1000);
                    SafeGivePlayerMoney(playerid,-50);
                    BizzInfo[0][bTill] += 50;
				    SendClientMessage(playerid,COLOR_GREEN,"Tu as acheté une Bombe de Peinture pour 50$.");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Il te faut 50$ pour acheter une Bombe de Peinture.");
				}
			}
		}
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin]<1){return 1;}
	if(!IsPlayerConnected(Clicked[playerid])){SendClientMessage(playerid,COLOR_RED,"[ADMIN]: Le joueur n' est plus connecter");}
	new str[128];
	if(dialogid == 250)
	{
	    if(response == 0)
	    {
	        return 1;
	    }
	    if(listitem == 0)
	    {
	        TogglePlayerControllable(Clicked[playerid],false);
	        format(str,sizeof(str),"[ADMIN]: %s à freezer %s",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);
	        //SendClientMessageToAll(COLOR_RED,str);
	        return 1;
	    }
	    if(listitem == 1)
	    {
	        TogglePlayerControllable(Clicked[playerid],true);
	        format(str,sizeof(str),"[ADMIN]: %s à unfreezer %s",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);
	        //SendClientMessageToAll(COLOR_RED,str);
	        return 1;
	    }
	    if(listitem == 2)
	    {
	        SetPlayerHealth(Clicked[playerid],-1);
	        format(str,sizeof(str),"[ADMIN]: %s à kill %s",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);

	        return 1;
	    }
	    if(listitem == 3)
	    {
	    	ShowPlayerDialog(playerid,251,DIALOG_STYLE_INPUT,"Admin Panel","Veuillez entrer la raison du kick\nSi vous n' entrez rien aucune raison ne s' affichera\nSi vous appuyez sur annuler le kick sera annuler","Ok","Annuler");
	        return 1;
	    }
	    if(listitem == 4)
	    {
	    	ShowPlayerDialog(playerid,252,DIALOG_STYLE_INPUT,"Admin Panel","Veuillez entrer la raison du Ban\nSi vous n' entrez rien aucune raison ne s' affichera\nSi vous appuyez sur annuler le ban sera annuler","Ok","Annuler");
	        return 1;
	    }
	    if(listitem == 5)
	    {
	        ShowPlayerDialog(playerid,253,DIALOG_STYLE_INPUT,"Admin Panel","Veuillez entrer la valeur du Virtual World auquel vous voulez placer le joueur","Ok","Annuler");
	        return 1;
	    }
	    if(listitem == 6)
	    {
	        ShowPlayerDialog(playerid,254,DIALOG_STYLE_INPUT,"Admin Panel","Veuillez entrer la valeur de l' interior auquel vous voulez placer le joueur","Ok","Annuler");
	        return 1;
	    }
	    if(listitem == 7)
	    {
	        new Float:p[] = {0.0,0.0,0.0};
			GetPlayerPos(Clicked[playerid],p[0],p[1],p[2]);
  			if(!(IsPlayerInAnyVehicle(playerid))){SetPlayerPos(playerid,p[0] + 1,p[1],p[2] + 0.5);}
  			else{SetVehiclePos(GetPlayerVehicleID(playerid),p[0] + 1,p[1],p[2] + 0.5);}
		    format(str,sizeof(str),"[ADMIN]: %s s' est teleporter à %s",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);

	        return 1;
	    }
	    if(listitem == 8)
	    {
	        new Float:p[] = {0.0,0.0,0.0};
	        GetPlayerPos(playerid,p[0],p[1],p[2]);
  			if(!(IsPlayerInAnyVehicle(Clicked[playerid]))){SetPlayerPos(playerid,p[0] + 1,p[1],p[2] + 0.5);}
  			else{SetVehiclePos(GetPlayerVehicleID(Clicked[playerid]),p[0] + 1,p[1],p[2] + 0.5);}
	        format(str,sizeof(str),"[ADMIN]: %s a teleporter %s vers lui",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);

	        return 1;
	    }
	    if(listitem == 9)
	    {
			Avertissement[Clicked[playerid]] ++;
			if(Avertissement[Clicked[playerid]] >= 5)
			{
		        format(str,sizeof(str),"[ADMIN]: %s a ete kicker par %s Raison: %d Avertissement",ReturnUserName(Clicked[playerid]),ReturnUserName(playerid),Avertissement[Clicked[playerid]]);
		        SendAdminMessage(COLOR_YELLOW,str);
		        SendClientMessageToAll(COLOR_RED,str);
		        Avertissement[playerid] = 0;
		        Kick(Clicked[playerid]);
		        return 1;
			}
	        format(str,sizeof(str),"[ADMIN]: %s a averti %s NB: %d Avertissement",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]),Avertissement[Clicked[playerid]]);
	        SendAdminMessage(COLOR_YELLOW,str);
	        SendClientMessageToAll(COLOR_RED,str);
	        return 1;
	    }
	}
	if(dialogid == 251)
	{
	    if(response == 0)
	    {
	        return 1;
	    }
		if(strlen(inputtext) == 0)
		{
			format(str,sizeof(str),"[ADMIN]: %s à kicker %s Raison: Aucune raison",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);
			SendClientMessageToAll(COLOR_RED,str);
			Kick(Clicked[playerid]);
			return 1;
		}
		else
		{
			format(str,sizeof(str),"[ADMIN]: %s à kicker %s Raison: %s",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]),inputtext);
	        SendAdminMessage(COLOR_YELLOW,str);
			SendClientMessageToAll(COLOR_RED,str);
			Kick(Clicked[playerid]);
			return 1;
		}
	}
	if(dialogid == 252)
	{
	    if(response == 0)
	    {
	        return 1;
	    }
		if(strlen(inputtext) == 0)
		{
			format(str,sizeof(str),"[ADMIN]: %s à banni %s Raison: Aucune raison",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]));
	        SendAdminMessage(COLOR_YELLOW,str);
			SendClientMessageToAll(COLOR_RED,str);
			Ban(Clicked[playerid]);
			return 1;
		}
		else
		{
			format(str,sizeof(str),"[ADMIN]: %s à banni %s Raison: %s",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]),inputtext);
	        SendAdminMessage(COLOR_YELLOW,str);
			SendClientMessageToAll(COLOR_RED,str);
			Ban(Clicked[playerid]);
			return 1;
		}
	}
	if(dialogid == 253)
	{
		if(response == 0)
		{
		    return 1;
		}
		if(strlen(inputtext) == 0)
		{
		    return SendClientMessage(playerid,COLOR_RED,"[ADMIN]: Vous n' avez pas entrer de valeur");
		}
		SetPlayerVirtualWorld(Clicked[playerid],strval(inputtext));
		format(str,sizeof(str),"[ADMIN]: %s à mis %s dans le virtual world %d",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]),strval(inputtext));
	    SendAdminMessage(COLOR_YELLOW,str);

	    return 1;
	}
	if(dialogid == 254)
	{
		if(response == 0)
		{
		    return 1;
		}
		if(strlen(inputtext) == 0)
		{
		    return SendClientMessage(playerid,COLOR_RED,"[ADMIN]: Vous n' avez pas entrer de valeur");
		}
		SetPlayerInterior(Clicked[playerid],strval(inputtext));
		format(str,sizeof(str),"[ADMIN]: %s à mis %s dans l' interieur %d",ReturnUserName(playerid),ReturnUserName(Clicked[playerid]),strval(inputtext));
	    SendAdminMessage(COLOR_YELLOW,str);

	    return 1;
	}
	return 0;
 }

public HouseLevel(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new h = PlayerInfo[playerid][pPhousekey];
		if(h == 255) { return 0; }
		if(h <= 4) { return 1; }
		if(h >= 5 && h <= 9)  { return 2; }
		if(h >= 10 && h <= 18) { return 3; }
		if(h >= 19 && h <= 22) { return 4; }
		if(h >= 23 && h <= 25) { return 5; }
		if(h == 26) { return 6; }
		if(h == 27) { return 7; }
		if(h >= 28 && h <= 31) { return 7; }
	}
	return 0;
}

public CHouseLevel(houseid)
{
	if(houseid <= 4) { return 3; }
	if(houseid >= 29 && houseid <= 30) { return 4; }
	if(houseid >= 5 && houseid <= 9) { return 5; }
	if(houseid >= 10 && houseid <= 18 || houseid == 28) { return 7; }
	if(houseid >= 19 && houseid <= 22) { return 8; }
	if(houseid >= 23 && houseid <= 25) { return 9; }
	if(houseid == 26) { return 10; }
	if(houseid == 27) { return 11; }
	if(houseid >= 28 && houseid <= 31) { return 12; }
	return 0;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

public CustomPickups()
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new string[128];
	NameTimer1();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, oldposx, oldposy, oldposz);
			/*new tmpcar = GetPlayerVehicleID(i);*/
			if(oldposx!=0.0 && oldposy!=0.0 && oldposz!=0.0)
			{
				for(new h = 0; h < sizeof(SBizzInfo); h++)
				{
					/*if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Produits Voulus~w~: %d~n~~y~Prix par Produit: ~w~: $%d~n~~g~Caisse: ~w~: $%d",SBizzInfo[h][sbMessage],(SBizzInfo[h][sbMaxProducts]-SBizzInfo[h][sbProducts]),SBizzInfo[h][sbPriceProd],SBizzInfo[h][sbTill]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}*/
					if(PlayerToPoint(2.0, i, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]))
					{
						if(SBizzInfo[h][sbOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Proprietaire : %s~n~Extortion par : %s~n~Prix Entree : ~g~$%d ~n~~w~pour entrer tappez /entrer",SBizzInfo[h][sbMessage],SBizzInfo[h][sbOwner],SBizzInfo[h][sbExtortion],SBizzInfo[h][sbEntranceCost]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~Ce biz est a vendre~n~Prix: ~g~$%d ~w~Niveau : %d ~n~Pour acheter ce Biz tappez ~n~/acheterbiz",SBizzInfo[h][sbMessage],SBizzInfo[h][sbBuyPrice],SBizzInfo[h][sbLevelNeeded]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
				for(new h = 0; h < sizeof(HouseInfo); h++)
				{
					if(PlayerToPoint(2.0, i, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
					{
						if(HouseInfo[h][hOwned] == 1)
						{
							if(HouseInfo[h][hRentabil] == 0)
							{
								format(string, sizeof(string), "~w~Cette maison appartient a ~n~%s~n~Level : %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
							}
							else
							{
								format(string, sizeof(string), "~w~Cette maison appartient a~n~%s~n~Louer: $%d Level : %d~n~Tapez /louermaison",HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel]);
							}
							GameTextForPlayer(i, string, 5000, 3);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "~w~Cette maison est a vendre ~n~Description: %s ~n~Prix: ~g~$%d~n~~w~ Level : %d~n~Tapez /achetermaison",HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
				for(new h = 0; h < sizeof(BizzInfo); h++)
				{
					/*if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Products Required~w~: %d~n~~y~Price per Product: ~w~: $%d~n~~g~Funds: ~w~: $%d",BizzInfo[h][bMessage],(BizzInfo[h][bMaxProducts]-BizzInfo[h][bProducts]),BizzInfo[h][bPriceProd],BizzInfo[h][bTill]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}*/
					if(PlayerToPoint(2.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
					{
						if(BizzInfo[h][bOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Proprietaire : %s~n~Extortion par : %s~n~Prix Entree : ~g~$%d ~n~~w~pour entrer tappez /entrer",BizzInfo[h][bMessage],BizzInfo[h][bOwner],BizzInfo[h][bExtortion],BizzInfo[h][bEntranceCost]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~Ce Biz est a vendre~n~Prix: ~g~$%d ~w~Niveau : %d ~n~pour acheter ce biz tappez ~n~/acheterbiz",BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice],BizzInfo[h][bLevelNeeded]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
			}//custompickups end
			if (PlayerToPoint(2.0, i, 2029.5945,-1404.6426,17.2512))
			{// Hospital near speedway
				GameTextForPlayer(i, "~w~Type /healme to cure yourself", 5000, 5);
			}
			else if (PlayerToPoint(1.0, i, 349.5560,161.6693,1019.9912))
			{// All Saints hospital
				GameTextForPlayer(i, "~w~Type /healme to cure yourself", 5000, 5);
			}

			/*else if (PlayerToPoint(2.0, i, 1488.6949,-1721.7136,8.2067))
			{
			    GameTextForPlayer(i, "~w~Black ~r~Market", 5000, 3);
			}*/
			/*else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1793.02,-1296.56,13.44))
			{
			    if(PlayerInfo[i][pJob] == 6) { GameTextForPlayer(i, "~w~Type ~r~/paper ~w~to create a newspaper",5000,3); }
			    else if(PlayerInfo[i][pJob] == 15) { GameTextForPlayer(i, "~w~Type ~r~/papers ~w~to see all the made newspapers",5000, 3); }
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,213.8549,-230.5761,1.7786))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir ~r~Contrebandier de matériaux~n~~w~Type /prendrejob si vous souhaitez en devenir un", 5000, 3); }
			}
			/*else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2146.3523,-2267.7498,14.2344))
			{
			    GameTextForPlayer(i, "~y~You can get ~r~Materials~y~ from your packages here ~n~~w~Type /materials deliver", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2072.5486,-1582.8029,13.4741))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir ~r~Trafiquant de drogues~y~~n~~w~Type /prendrejob si vous souhaitez devenir en un", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1611.5129,-1893.6997,13.5469))
			{
			    if(PlayerInfo[i][pJob] > 0 || PlayerInfo[i][pMember] > 0) {}
			    else { GameTextForPlayer(i, "~g~Bienvenue,~n~~y~vous pouvez devenir ~r~Balayeur de rue~n~~w~Type /prendrejob si vous souhaitez devenir en un", 5000, 3); }
			}
			else if (PlayerToPoint(2.0, i,379.1396,-114.2661,1001.4922))
   			{// Pizza Pickup
        		if (PlayerInfo[i][pJob] != 15)
    			{
    			    SendClientMessage(i, COLOR_GREY, "Vous n'êtes pas un Livreur de pizza");
     				return 1;
    			}
    			if (sPizza[i] != 1)
    			{
     				SendClientMessage(i, COLOR_WHITE, "Vous avez sélectionné une pizza cuite, attente des ordres");
       				sPizza[i] = 1;
      			}
   			}
			/*else if (PlayerToPoint(2.0, i,1142.8541,-1319.9788,1019.6968))
			{
			    if(PlayerInfo[i][pJob] == 10) { SetTimerEx("elevator1", 1000, false, "i", i); }
			    else { GameTextForPlayer(i, "~r~Vous n'etes pas un Ambulancier", 5000, 3); }
			}
			else if (PlayerToPoint(2.0, i,2049.7078,-1405.7129,48.3359))
			{
			    if(PlayerInfo[i][pJob] == 10) { SetTimerEx("elevator2", 1000, false, "i", i); }
			    else { GameTextForPlayer(i, "~r~Vous n'etes pas un Ambulancier", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1381.0413,-1088.8511,27.3906))
			{
			    GameTextForPlayer(i, "~g~Bievenue,~n~~y~Utilise /mission pour prendre une mission", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1600.8793,-2333.3535,13.5390))
			{
			    GameTextForPlayer(i, "~y~Vous avez trouvé un guide~n~ Type ~r~/guide ~y~pour le lire", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,359.6820,207.0294,1008.3828))
			{
			    GameTextForPlayer(i, "~w~Centre de Pub De Los Santos City~n~Utilisez ~g~/pub~w~ Pour Faire une Pub", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1054.8140,2148.3220,10.8203) && ilbraque[i] == 1)
			{
				SafeGivePlayerMoney(i, robmoney); // a adapter suivant le GM pour pas avoir de problème avec l'anti-cheat money
				braquageencours = 0;
				format(string, sizeof(string), "** Tu as reçu l'argent ! $%d !!!",robmoney);
				SendClientMessage(i,COLOR_YELLOW,string);
				ilbraque[i] = 0;
			}
			/*else if (PlayerToPoint(3.0, i,-38.8664,56.3031,3.1172))
			{
			    if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6  || PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12 || PlayerInfo[i][pJob] == 19)
			    {
			    	format(string, sizeof(string), "~r~Drugs ammount: %d", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16 || PlayerInfo[i][pJob] == 20)
				{
					format(string, sizeof(string), "~w~Drugs Farm~n~Farm Owner: La Famiglia Italia~n~Drugs ammount:~r~ %d~n~~w~You can /smuggledrugs here", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else
				{
				    GameTextForPlayer(i, "~r~Staff only!", 5000, 3);
				}
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2022.1492,-1108.7837,26.2031))
			{
				if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
				{
					GameTextForPlayer(i, "~g~Bievenue,~n~~y~vous pouvez devenir ~r~Contrebandier de drogues~n~~w~Type /prendrejob si vous souhaitez en devenir un", 5000, 3);
				}
				else
				{
				    GameTextForPlayer(i, "~r~Staff only", 5000, 3);
				}
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i,246.8096,126.7141,1003.2188))
			{
			    if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pLeader] == 7)
			    {
			        GameTextForPlayer(i, "~g~Ascenseur de la LSPD ~n~~w~Tape ~r~/toit ~w~pour monter~n~Tape ~r~/garage ~w~pour descendre", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Acces reserves a la LSPD!", 5000, 3);
			    }
			}
			/*else if (GetPlayerState(i) == 2 && PlayerToPoint(3, i,2073.2979,-1831.1228,13.5469) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,1024.9756,-1030.7930,32.0257) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,488.3819,-1733.0563,11.1752) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,719.8940,-464.8272,16.3359))
			{
			    format(string, sizeof(string), "~y~Pay ~r~& ~g~Spray~w~~n~Owner : %s~n~Entrance Fee : ~g~$%d ~w~~n~to enter type /entrer",SBizzInfo[5][sbOwner],SBizzInfo[5][sbEntranceCost]);
				GameTextForPlayer(i, string, 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.5, i, 248.4994,-33.1366,1.5781))
			{
			    if(PlayerInfo[i][pJob] == 20)
			    {
			        GameTextForPlayer(i, "~w~Materials factory~n~You can ~r~/smugglemats ~w~here", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Staff seulement !", 5000, 3);
			    }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i, 2230.3579,-2286.2107,14.3751))
			{
			    if(PlayerInfo[i][pJob] == 22)
			    {
			        format(string, sizeof(string), "~w~Materials Bank~n~Materials ammount: ~r~%d", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else if(PlayerInfo[i][pJob] == 20)
			    {
			        format(string, sizeof(string), "~w~Materials Bank~n~Materials ammount: ~r~%d ~n~~w~You can ~g~/achetermateriaux ~w~here", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Staff seulement !", 5000, 3);
			    }
			}*/
			else if(PlayerToPoint(2.0, i,1073.0619,-344.5148,73.9922))
			{
			    if(OrderReady[i] > 0)
			    {
			        switch (OrderReady[i])
			        {
			            case 1:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 5000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 2:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 31, 500); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 6000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 3:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 30, 500); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 6000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 4:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 31, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
			                SafeGivePlayerMoney(i, - 8000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 5:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 30, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
			                SafeGivePlayerMoney(i, - 8000);
			                SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 6:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 31, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
							SafeGivePlayerMoney(i, - 8500);
							SendClientMessage(i, COLOR_WHITE, "* Vous avez pris votre paquet commandé.");
			            }
			            case 7:
			            {
			                SafeGivePlayerWeapon(i, 24, 50); SafeGivePlayerWeapon(i, 29, 500); SafeGivePlayerWeapon(i, 25, 50); SafeGivePlayerWeapon(i, 30, 500); SafeGivePlayerWeapon(i, 4, 1); SafeGivePlayerWeapon(i, 34, 20);
			                SafeGivePlayerMoney(i, - 8500);
			                SendClientMessage(i, COLOR_WHITE, "* You picked up your Ordered Package.");
			            }
			        }
			        OrderReady[i] = 0;
			    }
			}//Hitman delivery stuff
			else if(PlayerOnMission[i] > 0 && PlayMission[kToggle] == 0)
			{
			    if(MissionCheckpoint[i] == 1 && PlayerToPoint(10.0, i,PlayMission[kCP1][0],PlayMission[kCP1][1],PlayMission[kCP1][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 2;
				}
				else if(MissionCheckpoint[i] == 2 && PlayerToPoint(10.0, i,PlayMission[kCP2][0],PlayMission[kCP2][1],PlayMission[kCP2][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 3;
				}
				else if(MissionCheckpoint[i] == 3 && PlayerToPoint(10.0, i,PlayMission[kCP3][0],PlayMission[kCP3][1],PlayMission[kCP3][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 4;
				}
				else if(MissionCheckpoint[i] == 4 && PlayerToPoint(10.0, i,PlayMission[kCP4][0],PlayMission[kCP4][1],PlayMission[kCP4][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 5;
				}
				else if(MissionCheckpoint[i] == 5 && PlayerToPoint(10.0, i,PlayMission[kCP5][0],PlayMission[kCP5][1],PlayMission[kCP5][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 6;
				}
				else if(MissionCheckpoint[i] == 6 && PlayerToPoint(10.0, i,PlayMission[kCP6][0],PlayMission[kCP6][1],PlayMission[kCP6][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passed : %s | Reward received: $%d ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(i, COLOR_GREEN, string);
					SafeGivePlayerMoney(i, PlayMission[kReward]);
					PlayerInfo[i][pMissionNr] = PlayerOnMission[i];
					MissionCheckpoint[i] = 0;
					PlayerOnMission[i] = 0;
				}
			}
		}
	}
	return 1;
}

public IdleKick()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] < 1)
		    {
				GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
				if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
				{
					new plname[64];
					new string[128];
					GetPlayerName(i, plname, sizeof(plname));
					format(string, sizeof(string), "[ADMIN] : %s a été kické raison : AFK", plname);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
					Kick(i);
				}
				PlayerPos[i][3] = PlayerPos[i][0];
				PlayerPos[i][4] = PlayerPos[i][1];
				PlayerPos[i][5] = PlayerPos[i][2];
			}
		}
	}
}

public OnPlayerText(playerid, text[])
{
    if(Script_OnPlayerText(playerid, text)) return 0;
/*	if(strcmp(msg[playerid],text) == 0)
	{
		SendClientMessage(playerid,0xFFF000000,"Vous tentez de flood ! Personne ne voit votre message désolé =)")
	    return 0;
	}*/

format(msg[playerid],128,"%s",text);
	/*new giver[MAX_PLAYER_NAME];*/
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256];
	/*new giveplayerid;*/
	/*if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vous ne pouvez pas parlé, vous avez êté muté");
		return 0;
	}*/
	if(SelectChar[playerid] == 255)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("suivant", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("suivant")))
		{
		    switch (SelectCharID[playerid])
			{
				case 1: //Police Force
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[0][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[0][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[1][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[1][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[2][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[2][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[3][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[3][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[4][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[4][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[5][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[5][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[6][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = JoinPed[6][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, JoinPed[7][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = JoinPed[7][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, JoinPed[8][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = JoinPed[8][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, JoinPed[9][0]); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = JoinPed[9][0]; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, JoinPed[10][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[10][0]; }
				}
				case 2: //FBI/ATF
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[11][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[11][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[12][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[12][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[13][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[13][0]; }
    			}
				case 3: //National Guard
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[14][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[14][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[15][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[15][0]; }
				}
				case 4: //Fire&Ambulance
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[16][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[16][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[17][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[17][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[18][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[18][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[19][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[19][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[20][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[20][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[21][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[21][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[22][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[22][0]; }
				}
				case 5: //Surenos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[25][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[25][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[26][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[26][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[27][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[27][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[28][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[28][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[29][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[29][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[30][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[30][0]; }
				}
				/*case 6: //Luciano family
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[31][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[31][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[32][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[32][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[33][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[33][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[34][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[34][0]; }
				}*/
				/*case 8: //Hitman Agency
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[38][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[38][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[39][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[39][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[40][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[40][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[41][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[41][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[42][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[42][0]; }
				}*/
				case 9: //News Reporters
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[43][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[43][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[44][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[44][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[45][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[45][0]; }
				}
				case 10: //Taxi Cab Company
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[46][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[46][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[47][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[47][0]; }
				}
				case 11: //Driving/Flying School
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[48][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[48][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[49][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[49][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[50][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[50][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[51][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[51][0]; }
				}
				case 14: //Yamaguchi
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 122); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 122; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 118); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 118; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 186); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 186; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 123); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 123; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 113); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 113; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 169); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 169; }
				}

				case 15: //47th Street Saints Families
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[58][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[58][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[59][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[59][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[60][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[60][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[61][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[61][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[62][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[62][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[63][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[63][0]; }
				}
				case 16: //East Side Ballas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 28); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 28; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 67); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 67; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 22); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 22; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 103); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 180; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 102); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 144; }
				}
				case 20: //Male civilian (by Ellis)
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, CivMalePeds[1][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = CivMalePeds[1][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, CivMalePeds[2][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = CivMalePeds[2][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, CivMalePeds[3][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = CivMalePeds[3][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, CivMalePeds[4][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = CivMalePeds[4][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, CivMalePeds[5][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = CivMalePeds[5][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, CivMalePeds[6][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = CivMalePeds[6][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, CivMalePeds[7][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = CivMalePeds[7][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, CivMalePeds[8][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = CivMalePeds[8][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, CivMalePeds[9][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = CivMalePeds[9][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, CivMalePeds[10][0]); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = CivMalePeds[10][0]; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, CivMalePeds[11][0]); SelectCharPlace[playerid] = 12; ChosenSkin[playerid] = CivMalePeds[11][0]; }
				    else if(SelectCharPlace[playerid] == 12) { SetPlayerSkin(playerid, CivMalePeds[12][0]); SelectCharPlace[playerid] = 13; ChosenSkin[playerid] = CivMalePeds[12][0]; }
				    else if(SelectCharPlace[playerid] == 13) { SetPlayerSkin(playerid, CivMalePeds[13][0]); SelectCharPlace[playerid] = 14; ChosenSkin[playerid] = CivMalePeds[13][0]; }
				    else if(SelectCharPlace[playerid] == 14) { SetPlayerSkin(playerid, CivMalePeds[14][0]); SelectCharPlace[playerid] = 15; ChosenSkin[playerid] = CivMalePeds[14][0]; }
				    else if(SelectCharPlace[playerid] == 15) { SetPlayerSkin(playerid, CivMalePeds[15][0]); SelectCharPlace[playerid] = 16; ChosenSkin[playerid] = CivMalePeds[15][0]; }
				    else if(SelectCharPlace[playerid] == 16) { SetPlayerSkin(playerid, CivMalePeds[16][0]); SelectCharPlace[playerid] = 17; ChosenSkin[playerid] = CivMalePeds[16][0]; }
				    else if(SelectCharPlace[playerid] == 17) { SetPlayerSkin(playerid, CivMalePeds[17][0]); SelectCharPlace[playerid] = 18; ChosenSkin[playerid] = CivMalePeds[17][0]; }
				    else if(SelectCharPlace[playerid] == 18) { SetPlayerSkin(playerid, CivMalePeds[18][0]); SelectCharPlace[playerid] = 19; ChosenSkin[playerid] = CivMalePeds[18][0]; }
				    else if(SelectCharPlace[playerid] == 19) { SetPlayerSkin(playerid, CivMalePeds[19][0]); SelectCharPlace[playerid] = 20; ChosenSkin[playerid] = CivMalePeds[19][0]; }
				    else if(SelectCharPlace[playerid] == 20) { SetPlayerSkin(playerid, CivMalePeds[20][0]); SelectCharPlace[playerid] = 21; ChosenSkin[playerid] = CivMalePeds[20][0]; }
				    else if(SelectCharPlace[playerid] == 21) { SetPlayerSkin(playerid, CivMalePeds[21][0]); SelectCharPlace[playerid] = 22; ChosenSkin[playerid] = CivMalePeds[21][0]; }
				    else if(SelectCharPlace[playerid] == 22) { SetPlayerSkin(playerid, CivMalePeds[22][0]); SelectCharPlace[playerid] = 23; ChosenSkin[playerid] = CivMalePeds[22][0]; }
				    else if(SelectCharPlace[playerid] == 23) { SetPlayerSkin(playerid, CivMalePeds[23][0]); SelectCharPlace[playerid] = 24; ChosenSkin[playerid] = CivMalePeds[23][0]; }
				    else if(SelectCharPlace[playerid] == 24) { SetPlayerSkin(playerid, CivMalePeds[24][0]); SelectCharPlace[playerid] = 25; ChosenSkin[playerid] = CivMalePeds[24][0]; }
				    else if(SelectCharPlace[playerid] == 25) { SetPlayerSkin(playerid, CivMalePeds[25][0]); SelectCharPlace[playerid] = 26; ChosenSkin[playerid] = CivMalePeds[25][0]; }
				    else if(SelectCharPlace[playerid] == 26) { SetPlayerSkin(playerid, CivMalePeds[26][0]); SelectCharPlace[playerid] = 27; ChosenSkin[playerid] = CivMalePeds[26][0]; }
				    else if(SelectCharPlace[playerid] == 27) { SetPlayerSkin(playerid, CivMalePeds[27][0]); SelectCharPlace[playerid] = 28; ChosenSkin[playerid] = CivMalePeds[27][0]; }
				    else if(SelectCharPlace[playerid] == 28) { SetPlayerSkin(playerid, CivMalePeds[28][0]); SelectCharPlace[playerid] = 29; ChosenSkin[playerid] = CivMalePeds[28][0]; }
				    else if(SelectCharPlace[playerid] == 29) { SetPlayerSkin(playerid, CivMalePeds[29][0]); SelectCharPlace[playerid] = 30; ChosenSkin[playerid] = CivMalePeds[29][0]; }
				    else if(SelectCharPlace[playerid] == 30) { SetPlayerSkin(playerid, CivMalePeds[30][0]); SelectCharPlace[playerid] = 31; ChosenSkin[playerid] = CivMalePeds[30][0]; }
				    else if(SelectCharPlace[playerid] == 31) { SetPlayerSkin(playerid, CivMalePeds[31][0]); SelectCharPlace[playerid] = 32; ChosenSkin[playerid] = CivMalePeds[31][0]; }
				    else if(SelectCharPlace[playerid] == 32) { SetPlayerSkin(playerid, CivMalePeds[32][0]); SelectCharPlace[playerid] = 33; ChosenSkin[playerid] = CivMalePeds[32][0]; }
				    else if(SelectCharPlace[playerid] == 33) { SetPlayerSkin(playerid, CivMalePeds[33][0]); SelectCharPlace[playerid] = 34; ChosenSkin[playerid] = CivMalePeds[33][0]; }
				    else if(SelectCharPlace[playerid] == 34) { SetPlayerSkin(playerid, CivMalePeds[34][0]); SelectCharPlace[playerid] = 35; ChosenSkin[playerid] = CivMalePeds[34][0]; }
				    else if(SelectCharPlace[playerid] == 35) { SetPlayerSkin(playerid, CivMalePeds[35][0]); SelectCharPlace[playerid] = 36; ChosenSkin[playerid] = CivMalePeds[35][0]; }
				    else if(SelectCharPlace[playerid] == 36) { SetPlayerSkin(playerid, CivMalePeds[36][0]); SelectCharPlace[playerid] = 37; ChosenSkin[playerid] = CivMalePeds[36][0]; }
				    else if(SelectCharPlace[playerid] == 37) { SetPlayerSkin(playerid, CivMalePeds[37][0]); SelectCharPlace[playerid] = 38; ChosenSkin[playerid] = CivMalePeds[37][0]; }
				    else if(SelectCharPlace[playerid] == 38) { SetPlayerSkin(playerid, CivMalePeds[38][0]); SelectCharPlace[playerid] = 39; ChosenSkin[playerid] = CivMalePeds[38][0]; }
				    else if(SelectCharPlace[playerid] == 39) { SetPlayerSkin(playerid, CivMalePeds[39][0]); SelectCharPlace[playerid] = 40; ChosenSkin[playerid] = CivMalePeds[39][0]; }
				    else if(SelectCharPlace[playerid] == 40) { SetPlayerSkin(playerid, CivMalePeds[40][0]); SelectCharPlace[playerid] = 41; ChosenSkin[playerid] = CivMalePeds[40][0]; }
				    else if(SelectCharPlace[playerid] == 41) { SetPlayerSkin(playerid, CivMalePeds[41][0]); SelectCharPlace[playerid] = 42; ChosenSkin[playerid] = CivMalePeds[41][0]; }
				    else if(SelectCharPlace[playerid] == 42) { SetPlayerSkin(playerid, CivMalePeds[42][0]); SelectCharPlace[playerid] = 43; ChosenSkin[playerid] = CivMalePeds[42][0]; }
				    else if(SelectCharPlace[playerid] == 43) { SetPlayerSkin(playerid, CivMalePeds[43][0]); SelectCharPlace[playerid] = 44; ChosenSkin[playerid] = CivMalePeds[43][0]; }
				    else if(SelectCharPlace[playerid] == 44) { SetPlayerSkin(playerid, CivMalePeds[44][0]); SelectCharPlace[playerid] = 45; ChosenSkin[playerid] = CivMalePeds[44][0]; }
				    else if(SelectCharPlace[playerid] == 45) { SetPlayerSkin(playerid, CivMalePeds[45][0]); SelectCharPlace[playerid] = 46; ChosenSkin[playerid] = CivMalePeds[45][0]; }
				    else if(SelectCharPlace[playerid] == 46) { SetPlayerSkin(playerid, CivMalePeds[46][0]); SelectCharPlace[playerid] = 47; ChosenSkin[playerid] = CivMalePeds[46][0]; }
				    else if(SelectCharPlace[playerid] == 47) { SetPlayerSkin(playerid, CivMalePeds[47][0]); SelectCharPlace[playerid] = 48; ChosenSkin[playerid] = CivMalePeds[47][0]; }
				    else if(SelectCharPlace[playerid] == 48) { SetPlayerSkin(playerid, CivMalePeds[48][0]); SelectCharPlace[playerid] = 49; ChosenSkin[playerid] = CivMalePeds[48][0]; }
				    else if(SelectCharPlace[playerid] == 49) { SetPlayerSkin(playerid, CivMalePeds[49][0]); SelectCharPlace[playerid] = 50; ChosenSkin[playerid] = CivMalePeds[49][0]; }
				    else if(SelectCharPlace[playerid] == 50) { SetPlayerSkin(playerid, CivMalePeds[50][0]); SelectCharPlace[playerid] = 51; ChosenSkin[playerid] = CivMalePeds[50][0]; }
				    else if(SelectCharPlace[playerid] == 51) { SetPlayerSkin(playerid, CivMalePeds[51][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = CivMalePeds[51][0]; }
				}
				case 30: //Female civilian (by Ellis)
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, CivFemalePeds[1][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = CivFemalePeds[1][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, CivFemalePeds[2][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = CivFemalePeds[2][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, CivFemalePeds[3][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = CivFemalePeds[3][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, CivFemalePeds[4][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = CivFemalePeds[4][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, CivFemalePeds[5][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = CivFemalePeds[5][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, CivFemalePeds[6][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = CivFemalePeds[6][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, CivFemalePeds[7][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = CivFemalePeds[7][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, CivFemalePeds[8][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = CivFemalePeds[8][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, CivFemalePeds[9][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = CivFemalePeds[9][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, CivFemalePeds[10][0]); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = CivFemalePeds[10][0]; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, CivFemalePeds[11][0]); SelectCharPlace[playerid] = 12; ChosenSkin[playerid] = CivFemalePeds[11][0]; }
				    else if(SelectCharPlace[playerid] == 12) { SetPlayerSkin(playerid, CivFemalePeds[12][0]); SelectCharPlace[playerid] = 13; ChosenSkin[playerid] = CivFemalePeds[12][0]; }
				    else if(SelectCharPlace[playerid] == 13) { SetPlayerSkin(playerid, CivFemalePeds[13][0]); SelectCharPlace[playerid] = 14; ChosenSkin[playerid] = CivFemalePeds[13][0]; }
				    else if(SelectCharPlace[playerid] == 14) { SetPlayerSkin(playerid, CivFemalePeds[14][0]); SelectCharPlace[playerid] = 15; ChosenSkin[playerid] = CivFemalePeds[14][0]; }
				    else if(SelectCharPlace[playerid] == 15) { SetPlayerSkin(playerid, CivFemalePeds[15][0]); SelectCharPlace[playerid] = 16; ChosenSkin[playerid] = CivFemalePeds[15][0]; }
				    else if(SelectCharPlace[playerid] == 16) { SetPlayerSkin(playerid, CivFemalePeds[16][0]); SelectCharPlace[playerid] = 17; ChosenSkin[playerid] = CivFemalePeds[16][0]; }
				    else if(SelectCharPlace[playerid] == 17) { SetPlayerSkin(playerid, CivFemalePeds[17][0]); SelectCharPlace[playerid] = 18; ChosenSkin[playerid] = CivFemalePeds[17][0]; }
				    else if(SelectCharPlace[playerid] == 18) { SetPlayerSkin(playerid, CivFemalePeds[18][0]); SelectCharPlace[playerid] = 19; ChosenSkin[playerid] = CivFemalePeds[18][0]; }
				    else if(SelectCharPlace[playerid] == 19) { SetPlayerSkin(playerid, CivFemalePeds[19][0]); SelectCharPlace[playerid] = 20; ChosenSkin[playerid] = CivFemalePeds[19][0]; }
				    else if(SelectCharPlace[playerid] == 20) { SetPlayerSkin(playerid, CivFemalePeds[20][0]); SelectCharPlace[playerid] = 21; ChosenSkin[playerid] = CivFemalePeds[20][0]; }
				    else if(SelectCharPlace[playerid] == 21) { SetPlayerSkin(playerid, CivFemalePeds[21][0]); SelectCharPlace[playerid] = 22; ChosenSkin[playerid] = CivFemalePeds[21][0]; }
				    else if(SelectCharPlace[playerid] == 22) { SetPlayerSkin(playerid, CivFemalePeds[22][0]); SelectCharPlace[playerid] = 23; ChosenSkin[playerid] = CivFemalePeds[22][0]; }
				    else if(SelectCharPlace[playerid] == 23) { SetPlayerSkin(playerid, CivFemalePeds[23][0]); SelectCharPlace[playerid] = 24; ChosenSkin[playerid] = CivFemalePeds[23][0]; }
				    else if(SelectCharPlace[playerid] == 24) { SetPlayerSkin(playerid, CivFemalePeds[24][0]); SelectCharPlace[playerid] = 25; ChosenSkin[playerid] = CivFemalePeds[24][0]; }
				    else if(SelectCharPlace[playerid] == 25) { SetPlayerSkin(playerid, CivFemalePeds[25][0]); SelectCharPlace[playerid] = 26; ChosenSkin[playerid] = CivFemalePeds[25][0]; }
				    else if(SelectCharPlace[playerid] == 26) { SetPlayerSkin(playerid, CivFemalePeds[26][0]); SelectCharPlace[playerid] = 27; ChosenSkin[playerid] = CivFemalePeds[26][0]; }
				    else if(SelectCharPlace[playerid] == 27) { SetPlayerSkin(playerid, CivFemalePeds[27][0]); SelectCharPlace[playerid] = 28; ChosenSkin[playerid] = CivFemalePeds[27][0]; }
				    else if(SelectCharPlace[playerid] == 28) { SetPlayerSkin(playerid, CivFemalePeds[28][0]); SelectCharPlace[playerid] = 29; ChosenSkin[playerid] = CivFemalePeds[28][0]; }
				    else if(SelectCharPlace[playerid] == 29) { SetPlayerSkin(playerid, CivFemalePeds[29][0]); SelectCharPlace[playerid] = 30; ChosenSkin[playerid] = CivFemalePeds[29][0]; }
				    else if(SelectCharPlace[playerid] == 30) { SetPlayerSkin(playerid, CivFemalePeds[30][0]); SelectCharPlace[playerid] = 31; ChosenSkin[playerid] = CivFemalePeds[30][0]; }
				    else if(SelectCharPlace[playerid] == 31) { SetPlayerSkin(playerid, CivFemalePeds[31][0]); SelectCharPlace[playerid] = 32; ChosenSkin[playerid] = CivFemalePeds[31][0]; }
				    else if(SelectCharPlace[playerid] == 32) { SetPlayerSkin(playerid, CivFemalePeds[32][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = CivFemalePeds[32][0]; }
				}

			}
		    return 0;
		}
		else if ((strcmp("selectioner", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("selectioner")))
		{
		    if(ChangePos2[playerid][1] == 1)
		    {
		        SetPlayerInterior(playerid, ChangePos2[playerid][0]);
		        SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
		        ChangePos2[playerid][1] = 0;
		        //return 0;
		    }
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
		    PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
		    SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
		    gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
			SpawnPlayer(playerid);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    SetTimerEx("backtoclothes", 500, false, "i", playerid);
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* Utilisez 'suivant', ou 'selectioner'.");
		    return 0;
		}
	}
	if(RegistrationStep[playerid] > 0)
	{
	    if(RegistrationStep[playerid] == 1)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("Homme", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("homme")))
			{
			    PlayerInfo[playerid][pSex] = 1;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok! Vous êtes un Homme.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Quelle est vôtre date de naissance? (dd/mm/yyyy)");
			    /*new maleskin;
			    maleskin = random(sizeof(CivMalePeds));*/
			    SetPlayerSkin(playerid, 137);
			    /*PlayerInfo[playerid][pChar] = maleskin;*/
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else if((strcmp("Femme", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("femme")))
			{
			    PlayerInfo[playerid][pSex] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok! Vous êtes une Femme.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Quelle est vôtre date de naissance? (dd/mm/yyyy)");
			    /*new femaleskin;
			    femaleskin = random(sizeof(CivFemalePeds));*/
			    SetPlayerSkin(playerid, 232);
			    /*PlayerInfo[playerid][pChar] = femaleskin;*/
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Êtes-vous un Homme ou une Femme?");
			}
			return 0;
		}
		else if(RegistrationStep[playerid] == 2)
	    {
	        new year, month,day;
			getdate(year, month, day);
	        new DateInfo[3][20];
			split(text, DateInfo, '/');
			if(year - strvalEx(DateInfo[2]) > 100 || strvalEx(DateInfo[2]) < 1 || strvalEx(DateInfo[2]) >= year)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Quelle est vôtre date de naissance? (dd/mm/yyyy)");
			    return 0;
			}
			new check = year - strvalEx(DateInfo[2]);
			if(check == year)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Quelle est vôtre date de naissance? (dd/mm/yyyy)");
			    return 0;
			}
			if(strvalEx(DateInfo[1]) > month)
			{
			    check -= 1;
			}
			else if(strvalEx(DateInfo[1]) == month && strval(DateInfo[0]) > day)
			{
			    check -= 1;
			}
			PlayerInfo[playerid][pAge] = check;
			format(string, sizeof(string), "Ok! Vous avez %d ans",PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			RegistrationStep[playerid] = 3;
			SendClientMessage(playerid, COLOR_LIGHTRED, "D'où venez vous? (USA, Europe, Asie ou Afrique)");
			return 0;
	    }
	    else if(RegistrationStep[playerid] == 3)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("usa", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("usa")))
			{
			    PlayerInfo[playerid][pOrigin] = 1;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok! Vous venez des USA.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Merci d'avoir répondu aux questions, maintenant vous allez visioner le Tutoriel.");
				RegistrationStep[playerid] = 0;
			    TutTime[playerid] = 1;
			    return 0;
			}
			else if((strcmp("europe", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("europe")))
			{
			    PlayerInfo[playerid][pOrigin] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok! Vous venez d'Europe.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Merci d'avoir répondu aux questions, maintenant vous allez visioner le Tutoriel.");
				RegistrationStep[playerid] = 0;
			    TutTime[playerid] = 1;
			    return 0;
			}
			else if((strcmp("asie", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("asie")))
			{
			    PlayerInfo[playerid][pOrigin] = 3;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok! Vous venez d'Asie.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Merci d'avoir répondu aux questions, maintenant vous allez visioner le Tutoriel.");
				RegistrationStep[playerid] = 0;
			    TutTime[playerid] = 1;
			    return 0;
			}
			else if((strcmp("afrique", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("afrique")))
			{
			    PlayerInfo[playerid][pOrigin] = 4;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok! Vous venez d'Afrique.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Merci d'avoir répondu aux questions, maintenant vous allez visioner le Tutoriel.");
				RegistrationStep[playerid] = 0;
			    TutTime[playerid] = 1;
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "D'où venez vous? (USA, Europe, Asie ou Afrique)");
			}
			return 0;
	    }
		return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("oui", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("oui")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Prêtre : %s prenez-vous %s en tant que votre belle épouse ? (type ' ; oui' ; , toute autre chose rejetteront le mariage).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Prêtre : %s et %s je vous prononce maintenant & de mari ; Épouse, vous pouvez embrasser la mariée", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Prêtre : %s et %s je vous prononce maintenant & de mari ; Épouse, vous pouvez embrasser le marié.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Nouvelles de mariage : Nous avons un nouveau joli couple, & de %s ; %s ont été mariés.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Prêtre : %s et %s je vous prononce maintenant & de mari ; Mari, vous pouvez embrasser la mariée.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Prêtre : %s et %s je vous prononce maintenant & de mari ; Mari, vous pouvez embrasser le marié.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Nouvelles de mariage : Nous avons un nouveau couple gai, & de %s ; %s ont été mariés.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Prêtre : %s et %s je vous prononce maintenant & d'épouse ; Épouse, vous pouvez embrasser la mariée.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Prêtre : %s et %s je vous prononce maintenant & d'épouse ; Épouse, vous pouvez embrasser le marié", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Nouvelles de mariage : Nous avons un nouveau couple lesbien, & de %s ; %s ont été mariés.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					SafeGivePlayerMoney(playerid, - 20000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPhousekey] = PlayerInfo[playerid][pPhousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Vous n'avez pas voulu marier %s, aucun ' ; yes' ; a été dit.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s n'a pas voulu vous épouser, aucun ' ; yes' ; a été dit.",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Vous n'avez pas voulu marier %s, aucun ' ; yes' ; a été dit.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s n'a pas voulu vous épouser, aucun ' ; yes' ; a été dit.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[256];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[82];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "* Veuillez saisir le titre de votre journal."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "* Veuillez saisir une ligne de textes de votre journal."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				format(fstring, sizeof(fstring), "%s", sendername);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Maintenant vous pouvez noter les lignes de nouvelles, 7 restant.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        SavePapers();
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "* Vous avez écrit la ligne %d du journal.", line);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "* Votre journal a été ajouté à la liste de nouvelles (pour les garçons de papier).");
			}
		}
	    return 0;
	}
  /*	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Contracts", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Contracts")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Only Hitman with Rank 4 or above can search and assign Contracts !");
		        return 0;
		    }
		    SearchingHit(playerid);
			return 0;
		}
		else if ((strcmp("News", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("News")))
		{
		    	new x_nr[256];
				x_nr = strtok(text, idx);

				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Hitman Agency News __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: News [number] or News delete [number] or News delete all");
					format(string, sizeof(string), "1: %s :: Hitman: %s", News[hAdd1], News[hContact1]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "2: %s :: Hitman: %s", News[hAdd2], News[hContact2]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "3: %s :: Hitman: %s", News[hAdd3], News[hContact3]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "4: %s :: Hitman: %s", News[hAdd4], News[hContact4]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "5: %s :: Hitman: %s", News[hAdd5], News[hContact5]);
					SendClientMessage(playerid, COLOR_GREY, string);
					SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
					return 0;
				}//lets start
				if(strcmp(x_nr,"1",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken1] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact1], string, 0, strlen(string), 255);
						News[hTaken1] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 1 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"2",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken2] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact2], string, 0, strlen(string), 255);
						News[hTaken2] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 2 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"3",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken3] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact3], string, 0, strlen(string), 255);
						News[hTaken3] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 3 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"4",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken4] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact4], string, 0, strlen(string), 255);
						News[hTaken4] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* vous avez placer un new message for hitman agency new channel !");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 4 et déja pris !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"5",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Tu dois étre rank 3 pour les lir les new message Agency channel !"); return 0; }
				    if(News[hTaken5] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact5], string, 0, strlen(string), 255);
						News[hTaken5] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* vous avez placer un new message for hitman agency new channel!");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 5 et déja pris !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"delete",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] < 4)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Vous devez étre rank 4 pour supprimer message for new channel");
				        return 0;
				    }
				    new string1[MAX_PLAYER_NAME];
				    new x_tel[256];
					x_tel = strtok(text, idx);
					if(!strlen(x_tel)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USAGE: News delete [number] or News delete all.");
					    return 0;
					}
                    if(strcmp(x_tel,"1",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* Vous avez supprime (1) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"2",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* Vous avez supprime (2) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"3",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* Vous avez supprime (3) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"4",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* Vous avez supprimer (4) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"5",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* Vous avez supprimer  (5) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"all",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* Vous avez supprimé tous les nouveau message de l'agence  News Channel.");
						return 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "USAGE: News delete [number] or News delete all.");
					    return 0;
                    }
				}
				else { return 0; }
		}
		else if ((strcmp("Givehit", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Givehit")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "  Vous devez étre rank 4 need contrat hitman !");
		        return 0;
		    }
		    if(hitfound == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, " there is no Hit Founded yet, use Contracts in the Portable first ");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: Givehit [idDuJoueur/PartieDuNomt]");
				return 0;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 14 || PlayerInfo[giveplayerid][pLeader] == 14)
				    {
					    if(GoChase[giveplayerid] < 999)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   les hitmans sont alérter du contrat !");
							return 0;
					    }
					    if(IsPlayerConnected(hitid))
				    	{
				        	GetPlayerName(playerid, sendername, sizeof(sendername));
				        	GetPlayerName(giveplayerid, giver, sizeof(giver));
				        	GetPlayerName(hitid, giveplayer, sizeof(giveplayer));
				        	//format(string, sizeof(string), "* You assigned%s to kill: %s(ID:%d), for $%d.", giver, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    				//SendClientMessage(playerid, COLOR_YELLOW, string);
				        	//format(string, sizeof(string), "* Hitman %s has assigned you to kill: %s(ID:%d), for $%d.", sendername, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    				//SendClientMessage(giveplayerid, COLOR_YELLOW, string);
		    				format(string, sizeof(string), "* Hitman %s, assigned Hitman %s to kill: %s(ID:%d), for $%d.", sendername, giver, giveplayer, hitid, PlayerInfo[hitid][pHeadValue]);
		    				SendFamilyMessage(8, COLOR_YELLOW, string);
		    				GoChase[giveplayerid] = hitid;
		    				GetChased[hitid] = giveplayerid;
		    				GotHit[hitid] = 1;
		    				hitid = 0;
		    				hitfound = 0;
				        	return 0;
				    	}
				    	else
				    	{
				        	SendClientMessage(playerid, COLOR_GREY, "   Le personne qui a un contrat sur elle est hors ligne, l'utilisation des contrat et dans le portable !");
				        	return 0;
				    	}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ce joueur n'ait pas un hitman !");
						return 0;
					}
				}
				return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ce Hitman n'est pas en ligne, ou n'est pas un Hitman !");
			    return 0;
			}
		}
		else if ((strcmp("Ranks", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Ranks")))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Agency's Ranks __________________|");
		    for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMember] == 14||PlayerInfo[i][pLeader] == 14)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* %s: Rank %d", giveplayer,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
			}
		}
		else if ((strcmp("Order", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Order")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You already Ordered a Package, pick it up at your Head Quarter's Front Door first !");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if ((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    if(PlayerInfo[playerid][pRank] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if( GetPlayerMoney(playerid) > 4999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* You have Ordered Package 1 ($5000), it will be delivered at your Head Quarter's Front Door.");
			        OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   You can't afford that Package !");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if( GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* You have Ordered Package 2 ($6000), it will be delivered at your Head Quarter's Front Door.");
			        OrderReady[playerid] = 2;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   You can't afford that Package !");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if( GetPlayerMoney(playerid) > 5999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous ne pouvez pas se procuré ce paquet ($6000)Il sera livré sur le siége de votre front door .");
			        OrderReady[playerid] = 3;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   You can't afford that Package !");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Votre rank n'ait pas élever pour se procuré ce paquet !"); return 0; }
			    if( GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous avez commender le paquet  4 ($7000), Il sera livrer a votre siége de front door.");
			        OrderReady[playerid] = 4;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   You can't afford that Package !");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if( GetPlayerMoney(playerid) > 7999)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous avez commender le paquet 5 ($7500), Il sera livrer a votre siége de front door.");
			        OrderReady[playerid] = 5;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Vous pouvez pas se procuré ce paquet!")
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Your Rank is not high enough to Order that Package !"); return 0; }
			    if( GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous avez commender le paquet  6 ($8000), Il sera livrer a votre siége de front door.");
			        OrderReady[playerid] = 6;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Vous pouvez pas vous offrire ce paquet !");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Votre rank n'ait pas élever pour se procuré ce paquet !"); return 0; }
			    if( GetPlayerMoney(playerid) > 8499)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Vous avez commender le paquet  7 ($8500), Il sera livrer a votre siége de front door.");
			        OrderReady[playerid] = 7;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Vous pouvez pas se permettre de ce paquet!");
			        return 0;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________ Available Packages __________________|");
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) ($5000 ) Rank 1 - 5: Knife, Desert Eagle, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(2) ($6000 ) Rank 2 - 5: Knife, Desert Eagle, M4, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(3) ($6000 ) Rank 2 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(4) ($8000) Rank 3 - 5: Knife, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(5) ($8000) Rank 3 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(6) ($8500) Rank 4 - 5: Knife, Desert Eagle, M4, MP5, Shotgun, Sniper"); }
			    if(PlayerInfo[playerid][pRank] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(7) ($8500) Rank 4 - 5: Knife, Desert Eagle, AK47, MP5, Shotgun, Sniper"); }
			    SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
			    return 0;
			}
		}
		else if ((strcmp("Logout", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Logout")))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* Vous avez shutdowned votre ordinateur portable, et déconnecté de votre agence.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "|___ Hitman Agency ___|");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - News");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Contrats");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Givehit");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Sauvgarde");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ordre");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Ranks");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Logout");
		    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
		    return 0;
		}
	    return 0;
	} */
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("oui", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("oui")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s est en prison, et a besoin d'un avocat. Allez au commissariat de police.", sendername);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, "* Lorsque vous êtes à la police, demander à un agent d'approuver vous /accepter avocat  .");
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Les messages ont était envoyer a tous les avocats,Veuiller attendre svp.");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Il n'y a pas d'avocats a votre disposition , la prison a débuter.");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
      if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	  {
		GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[interview]Journaliste: %s", text);
		OOCNews(COLOR_NEWS, string);
		return 0;
	  }
      else
	  {
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[interview]%s : %s", sendername, text);
		OOCNews(COLOR_NEWS, string);
		return 0;
	  }
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(UnidentifedCall[playerid] == 1)
		{
		    format(string, sizeof(string), "Etranger Dit (telephone): %s", text);
		}
		else
		{
			format(string, sizeof(string), "%s Dit (telephone): %s", sendername, text);
		}
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Expédition : Désolé je ne comprends pas ?");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Expédition : Nous avons alerté toutes les unités dans le secteur.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Merci de rapporter cet incident");
			format(wanted, sizeof(wanted), "Dispatch: All Units IA: Caller: %s",turner);
			SendJobMessage(11, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Expédition : Incident : %s",text);
			SendJobMessage(11, TEAM_CYAN_COLOR, wanted);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			SendClientMessage(playerid, COLOR_GRAD2, "   Ils raccrochent...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "URGENCE : Désolé je ne comprends pas ?");
				return 0;
			}
			if ((strcmp("no", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("no")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, COLOR_DBLUE, "La police expédie : Nous avons alerté toutes les unités dans le secteur.");
				SendClientMessage(playerid, COLOR_DBLUE, "Merci de rapporter ce crime");
				format(wanted, sizeof(wanted), "HQ: Toutes les unités APB :  Victim : %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "HQ: Crime : %s, suspect : Inconnu",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				new Float:trace_x, Float:trace_y, Float:trace_z;
				GetPlayerPos(playerid, trace_x, trace_y, trace_z);
				pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
				SendClientMessage(playerid, COLOR_GRAD2, "   Ils raccrochent...");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp);
			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (gTeam[badguy] == 2 || gTeam[badguy] == 1)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police expédie: Vous aurez à prendre contact avec les affaires intérieures. Il s'agit d'une ligne d'urgence");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ils raccrochent...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police expédie: Les unités sont déja informé de cette affaire");
						SendClientMessage(playerid, COLOR_DBLUE, "Merci d'avoir réporter ce crime");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ils raccrochent...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police expédie: Nous sommes pas prét de tromper,il s'agit d'une ligne d'urgence.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ils raccrochent...");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Police expédie: Nous avons alerté tous les unités dans la zone.");
					SendClientMessage(playerid, COLOR_DBLUE, "Merci d'avoir réporter ce crim");
					new Float:trace_x, Float:trace_y, Float:trace_z;
					GetPlayerPos(playerid, trace_x, trace_y, trace_z);
					pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);
					if(WantedPoints[badguy] > 0) { } else { WantedPoints[badguy] += 2; }
					SendClientMessage(playerid, COLOR_GRAD2, "   Ils raccrochent...");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Police expédie: J'ai aucune information du nom %s, Vous êtes sur que c'est celui la?",tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "URGENCE : Désoler je ne comprend pas?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Si vous connaisez le nom de l'agrésseur , Merci de le dire ou sinon dit tous simplement non.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgences: Désolé je ne comprends pas, police ou paramedic?");
				return 0;
			}
			else if ((strcmp("police", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("police")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Police: Je vous raccorde au poste de police , attendez svp.");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "HQ: S'il vous plaît donnez-moi une courte description du criminel et de l'incident.");
				return 0;
			}
			else if ((strcmp("hopital", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("hopital")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgences: .");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: S'il vous plait donner moi un courte discription de l'incident.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Urgences: Désoler je ne comprend pas , La police ou l'hopital?");
				return 0;
			}
		}
		if(Mobile[playerid] == 3900)
		{
			SendFamilyMessage(9, COLOR_GREEN, "Vous avez un nouveau message:");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[ID:%d] %s Dit: %s", playerid, sendername, text);
			SendFamilyMessage(9, COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_GREEN, "ACN Studio: Merci de vos informations !");
			Mobile[playerid] = 255;
			return 0;
		}
		/*if(Mobile[playerid] == 1180)
		{
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: What would you like to advertise?");
				return 0;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Please try again later %d seconds between Advertisements !",  (addtimer/1000));
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;

			}
			new payout = idx * 10;
			if( GetPlayerMoney(playerid) < payout + 200)
	        {
	            format(string, sizeof(string), "* You used %d characters which cost $%d, you don't have enough.", offset, payout);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            return 1;
	        }
	        SafeGivePlayerMoney(playerid, - payout);
	        SafeGivePlayerMoney(playerid, - 200);
			SBizzInfo[7][sbTill] += payout + 200;
			ExtortionSBiz(7, payout + 200);
			format(string, sizeof(string), "[Advert] %s, Phone: %d",  result, PlayerInfo[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "~r~Paid $%d~n~~w~Message contained: %d Characters~n~~w~Plus ~g~200$~w~ for ad through phone", payout, idx);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}*/
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
				{
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Personnes n'est la");
		}
		return 0;
	}
	if (BusShowLocation[playerid][0] == 1)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
			SetPlayerCheckpoint(playerid, BusShowLocation[playerid][1], BusShowLocation[playerid][2], BusShowLocation[playerid][3], 3.0);
			SendClientMessage(playerid, COLOR_YELLOW, "Il ya un emplacement (Point Rouge) vous ferez mieux de présser!");
			BusShowLocation[playerid][0] = 0;
			BusShowLocationC[playerid] = 1;
			return 0;
		}
		else
		{
			BusShowLocation[playerid][0] = 0;
			return 0;
		}
	}
	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Etranger Dit: %s", text);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);

			}
			else if(bailloner[playerid] == 1)
            {
                format(string, sizeof(string), "%s Dit: Hmmmmm hmmmmmm mmmmm", sendername);
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
            }
			else
			{
		    	format(string, sizeof(string), "%s Dit: %s", sendername, text);
		    	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
			}
		}
		else
		{
		    new carid = GetPlayerVehicleID(playerid);
		   	if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		   	{
		   		if(PlayerInfo[playerid][pMaskuse] == 1)
                {
				    if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid))
				    {
			    		format(string, sizeof(string), "Etranger Dit: %s", text);
			    		ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
					else
					{
				   		format(string, sizeof(string), "(Fenêtre fermée) Etranger Dit: %s", text);
				   		ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
		    	}
				else if(bailloner[playerid] == 1)
                {
				    if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid))
				    {
                        format(string, sizeof(string), "%s Dit: Hmmmmm hmmmmmm mmmmm", sendername);
     					ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
                        format(string, sizeof(string), "(Fenêtre fermée) %s Dit: Hmmmmm hmmmmmm mmmmm", sendername);
	    				ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
                }
				else
				{
				    if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid))
				    {
		    	    	format(string, sizeof(string), "%s Dit: %s", sendername, text);
		    	    	ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
				    }
					else
					{
		    	   		format(string, sizeof(string), "(Fenêtre fermée) %s Dit: %s", sendername, text);
		    	   		ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pMaskuse] == 1)
                {
				    if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid))
				    {
			   			format(string, sizeof(string), "Etranger Dit: %s", text);
			   			ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			   			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
					else
					{
			    		format(string, sizeof(string), "(Fenêtre ouverte) Etranger Dit: %s", text);
			    		ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			    		SetPlayerChatBubble(playerid,string,COLOR_WHITE,35.0,2500);
					}
				}
				else if(bailloner[playerid] == 1)
                {
				    if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid))
				    {
                           format(string, sizeof(string), "%s Dit: Hmmmmm hmmmmmm mmmmm", sendername);
     					ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
     					SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
					else
					{
                        format(string, sizeof(string), "(Fenêtre ouverte) %s Dit: Hmmmmm hmmmmmm mmmmm", sendername);
		     			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		     			SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
                }
				else
				{
				    if(IsABike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid))
				    {
		        		format(string, sizeof(string), "%s Dit: %s", sendername, text);
		        		ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		        		SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
					else
					{
		        		format(string, sizeof(string), "(Fenêtre ouverte) %s Dit: %s", sendername, text);
		        		ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		        		SetPlayerChatBubble(playerid,text,COLOR_WHITE,35.0,2500);
					}
				}
			}
		}
		return 0;
	}
	return 1;
}

public SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}

public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public AddsOn()
{
	adds=1;
	return 1;
}

public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 ||
		PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 ||
	 	PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 ||
		PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 ||
		PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 ||
		PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 ||
		PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 ||
		PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 ||
		PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 ||
		PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 ||
		PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11 ||
		PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 ||
  		PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13 ||
   		PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14 ||
    	PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15 ||
    	PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		{
			if (PlayerInfo[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pMember] == 1 ||PlayerInfo[i][pLeader] == 1 ||
						PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 ||
						PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3 ||
              			PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4 ||
              			PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5 ||
              			PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6 ||
              			PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7 ||
              			PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8 ||
              			PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9 ||
              			PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10 ||
              			PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11 ||
            			PlayerInfo[i][pMember] == 12 || PlayerInfo[i][pLeader] == 12 ||
 				    	PlayerInfo[i][pMember] == 13 || PlayerInfo[i][pLeader] == 13 ||
	            		PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14 ||
	            		PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15 ||
	            		PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
						{
							SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
						}
					}
				}
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Votre demande d'assistance à été suprimée.");
				}
				else
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Votre demande d'assistance à été suprimée automatiquement.");
				}
				PlayerInfo[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Vous n'avez pas fait de demande d'assistance!");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Vous n'êtes pas dans un faction!");
			}
		}
	}
	return 1;
}

public ResetRoadblockTimer()
{
	roadblocktimer = 0;
	return 1;
}

public SetTeamBlipToPlayer(team, color, playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == team || PlayerInfo[i][pLeader] == team)
		    {
		        for(new j = 0; j < MAX_PLAYERS; j++)
		        {
					if(IsPlayerConnected(j))
					{
						if(PlayerInfo[j][pMember] == team || PlayerInfo[j][pLeader] == team)
						{
     						SetPlayerMarkerForPlayer(j, i, color);
						}
					}
				}
			}
		}
	}
}

public RemoveRoadblock(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			{
				DisablePlayerCheckpoint(i);
			}
		}
	}
	DestroyStreamObject(PlayerInfo[playerid][pRoadblock]);
	PlayerInfo[playerid][pRoadblock] = 0;
	return 1;
}

public IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

public AdvertiseToPlayersAtBusStop(Float:stopX, Float:stopY, Float:stopZ, eastorwest)
{
	for (new i; i<=MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && BusrouteWest[i][0] == 0 && BusrouteEast[i][0] == 0)
		{
			if (PlayerToPoint(100, i, stopX, stopY, stopZ))
			{
				SendClientMessage(i, TEAM_AZTECAS_COLOR, "Un bus est en route à proximité d'un arrêt. L'itinéraire est le suivant:");
				if (eastorwest == 0) SendBusRoute(i, 0);
				else SendBusRoute(i, 1);
				SendClientMessage(i, TEAM_AZTECAS_COLOR, "Voulez-vous etre monter a l'arret? (yes/no)");
				BusShowLocation[i][0] = 1;
				BusShowLocation[i][1] = stopX;
				BusShowLocation[i][2] = stopY;
				BusShowLocation[i][3] = stopZ;
			}
		}
	}
	return 1;
}

public SendBusRoute(playerid, eastorwest)
{
	if (eastorwest == 0)
	{
		// East
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Station de Bus >> Aeroport >> Willowfield Factory >> Loco >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "6 Street Plaza >> 10 Green Bottles >> Pigpen >> Golden Palm >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Jefferson Motel >> Glen Park >> Station de Bus <<");
	}
	else
	{
		// West
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Station de bus >> Alhambra >> Glen Park >> Vinewood Burger >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Vice Theater >> Bank >> Rodeo >> Sana Maria Beach >> Verona Beach >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Pershing Square >> Station de Bus <<");
	}
	return 1;
}

public IsInBusrouteZone(playerid)
{
	if (IsPlayerInArea(playerid, 1722.3599, 2901.8652, -2694.5417, -904.3515)) return 0; // east
	else if (IsPlayerInArea(playerid, 127.4722, 1722.3599, -2694.5417, -904.3515)) return 1; // west
	return 1;
}

public BusrouteEnd(playerid, vehicleid)
{
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		SendClientMessage(playerid, COLOR_BLUE, "Le parcours en bus a pris fin.");
		GameTextForPlayer(playerid, "~r~Le parcours en bus a pris fin", 5000, 3);
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
	}
	DisablePlayerCheckpoint(playerid);
	if (vehicleid != 0) SetVehicleToRespawn(vehicleid);
	BusrouteEast[playerid][0] = 0;
	BusrouteEast[playerid][1] = 0;
	//BusrouteEast[playerid][2] = 0;
	BusrouteWest[playerid][0] = 0;
	BusrouteWest[playerid][1] = 0;
	//BusrouteWest[playerid][2] = 0;
	return 1;
}

public CheckForWalkingTeleport(playerid) // only put teleports ON FOOT here, use another function for vehicle ones - luk0r
{
	/*
	 *  HOW TO USE FUNCTION:
	 *
	 *  Just use your normal PlayerToPoint functions but make them use PlayerToPointStripped instead.
	 *  Use the arguments cx,cy,cz at the end of each call (look at the others for an example).
	 *
	 */
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(playerid, cx, cy, cz);


	if(PlayerToPointStripped(1, playerid,1555.3501,-1675.7167,16.1953, cx,cy,cz))
	{//Entrée LSPD - San Fierro
		GameTextForPlayer(playerid, "~w~Police Departement", 5000, 1);
		SetPlayerInterior(playerid, 10);
		SetPlayerPos(playerid,247.2637,111.2144,1003.2188);
		PlayerInfo[playerid][pInt] = 10;
	}
	else if(PlayerToPointStripped(1, playerid,246.5961,107.3103,1003.2188, cx,cy,cz))
	{//Sortie LSPD - San Fierro
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1551.0155,-1675.3383,15.6612);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,246.7420,63.2363,1002.8648, cx,cy,cz))
	{//Sortie LSPD - prison
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1544.2542,-1674.8540,13.5580);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	if(PlayerToPointStripped(1, playerid,1465.0830,-1010.6750,25.8687, cx,cy,cz))
	{//Entrée Banque1
		GameTextForPlayer(playerid, "~w~Banque de Los Santos ", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2305.688964,-16.088100,26.749599);
		PlayerInfo[playerid][pInt] = 0;
	}
	if(PlayerToPointStripped(1, playerid,2304.6794,-15.9057,26.7422, cx,cy,cz))
	{//Sortie banque ipo
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1464.6986,-1015.9219,26.0201);
		PlayerInfo[playerid][pInt] = 0;
	}
	if(PlayerToPointStripped(1, playerid,2075.6333,-2006.5724,13.5469, cx,cy,cz))
	{//entrée Usine d'arme
		GameTextForPlayer(playerid, "~w~Usine D'arme", 5000, 1);
		SendClientMessage(playerid,COLOR_GREEN, "Entreprise d'arme secrete");
	  	SetPlayerInterior(playerid, 2);
	  	SetPlayerPos(playerid,2542.9731,-1306.3854,1025.4069);
		PlayerInfo[playerid][pInt] = 2;
	}
	else if(PlayerToPointStripped(1, playerid,2541.7041,-1304.0907,1025.0703, cx,cy,cz))
	{//Sortie Usine d'arme
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
     	SetPlayerPos(playerid,2078.7737,-2005.8042,13.5469);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.0, playerid,488.2531,-82.7632,998.7578, cx,cy,cz))
	{
		//Misty/10 Green Toilets
		SetPlayerPos(playerid,2277.5942,-1139.8883,1050.8984);
		GameTextForPlayer(playerid, "~w~Restroom", 5000, 3);
		SetPlayerInterior(playerid,11);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if (PlayerToPointStripped(2.0, playerid,2280.0476,-1139.5413,1050.8984, cx,cy,cz))
	{
		//Misty/10 Green Toilets
		SetPlayerPos(playerid,490.9059,-81.4256,998.7578);
		GameTextForPlayer(playerid, "~w~Ten Green Bottles", 5000, 3);
		SetPlayerInterior(playerid,11);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if(PlayerToPointStripped(1, playerid,1352.1194,-1759.2534,13.5078, cx,cy,cz))
	{//24/7 near PD Entrance
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SetPlayerInterior(playerid, 6);
		SetPlayerPos(playerid,-26.6916,-55.7149,1003.5469);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if(PlayerToPointStripped(1, playerid,-27.3919,-58.2529,1003.5469, cx,cy,cz))
	{//24/7 near PD Exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1352.3282,-1755.4298,13.3542);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,-1980.7480,179.3916,27.6875, cx,cy,cz))
	{//24/7 2 - San Fierro
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SetPlayerInterior(playerid, 18);
		SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if(PlayerToPointStripped(1, playerid,-30.9299,-92.0114,1003.5469, cx,cy,cz))
	{//24/7 near 8-ball exit
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,-1983.2837,179.5104,27.6799);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 2)
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,1315.7769,-901.4099,39.5781);
			PlayerInfo[playerid][pInt] = 0;
		}
	}
	else if(PlayerToPointStripped(1, playerid,1315.4581,-897.6843,39.5781, cx,cy,cz))
	{//24/7 vinewood
		SetPlayerVirtualWorld(playerid, 2);
		PlayerInfo[playerid][pVirWorld] = 2;
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SetPlayerInterior(playerid, 18);
		SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if(PlayerToPointStripped(1, playerid,1411.9231,-1699.5934,13.5395, cx,cy,cz))
	{//Alhambra Entrance
		GameTextForPlayer(playerid, "~w~Hotel Jefferson", 5000, 1);
		SetPlayerInterior(playerid, 15);
		SetPlayerPos(playerid,2217.5925,-1150.8369,1025.7969);
		PlayerInfo[playerid][pInt] = 15;
	}
	else if(PlayerToPointStripped(1, playerid,2310.0183,-1643.4669,14.8270, cx,cy,cz))
	{//10 green
		GameTextForPlayer(playerid, "~w~Ten Green Bottles", 5000, 1);
		SetPlayerInterior(playerid, 11);
		SetPlayerPos(playerid,502.0531,-70.2137,998.7578);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if(PlayerToPointStripped(1, playerid,501.8708,-67.5820,998.7578, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2307.0027,-1645.2213,14.6882);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2244.4335,-1665.1894,14.5263, cx,cy,cz))
	{//Binco next to 10 green
		GameTextForPlayer(playerid, "~w~Binco", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "Aide : Tapez /vetements pour vous changer");
		SetPlayerInterior(playerid, 15);
		SetPlayerPos(playerid,207.7336,-108.6231,1005.1328);
		PlayerInfo[playerid][pInt] = 15;
	}
	else if(PlayerToPointStripped(1, playerid,207.7662,-111.2663,1005.1328, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2242.8208,-1663.6771,15.4765);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2229.6391,-1721.5467,13.2855, cx,cy,cz))
	{//Ganton Gym
		GameTextForPlayer(playerid, "~w~Salle de Boxe", 5000, 1);
		SetPlayerInterior(playerid, 5);
		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
		PlayerInfo[playerid][pInt] = 5;
	}
	/*else if(PlayerToPointStripped(1, playerid,674.3832,-1864.5908,5.4609, cx,cy,cz))
	{//Ganton Gym
		GameTextForPlayer(playerid, "~w~Salle de Boxe", 5000, 1);
		SetPlayerInterior(playerid, 5);
		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
		PlayerInfo[playerid][pInt] = 5;
	}*/
	else if(PlayerToPointStripped(1, playerid,772.3594,-5.5157,1000.7286, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2226.4909,-1718.3172,13.5329);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2421.4998,-1219.2438,25.5617, cx,cy,cz))
	{//Pigpen
		GameTextForPlayer(playerid, "~w~The Pig Pen", 5000, 1);
		SetPlayerInterior(playerid, 2);
		SetPlayerPos(playerid,1205.0803,-9.9519,1000.9219);
		PlayerInfo[playerid][pInt] = 2;
	}
	else if(PlayerToPointStripped(1, playerid,1204.8462,-13.8521,1000.9219, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2419.5559,-1226.5612,24.9379);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}

	else if(PlayerToPointStripped(1, playerid,2398.6240,-1899.2014,13.5469, cx,cy,cz))
	{//Cluckin Bell near 10 green
		SetPlayerVirtualWorld(playerid, 2);
		PlayerInfo[playerid][pVirWorld] = 2;
		OnPlayerEnterFood(playerid, 1);
	}
	else if(PlayerToPointStripped(1, playerid,-1912.0653,828.1133,35.2025, cx,cy,cz))
	{//Burger King 1 - San Fierro
		OnPlayerEnterFood(playerid, 2);
	}
	else if(PlayerToPointStripped(1, playerid,1200.1599,-918.6875,42.2389, cx,cy,cz))
	{//Burger King 2 (nord) - San Fierro
		SetPlayerVirtualWorld(playerid, 1);
		PlayerInfo[playerid][pVirWorld] = 1;
		OnPlayerEnterFood(playerid, 2);
	}
	else if(PlayerToPointStripped(1, playerid,810.7926,-1616.2608,12.5968, cx,cy,cz))
	{//Burger King 3 (sud) - San Fierro
		SetPlayerVirtualWorld(playerid, 2);
		PlayerInfo[playerid][pVirWorld] = 2;
		OnPlayerEnterFood(playerid, 2);
	}
	else if(PlayerToPointStripped(1, playerid,363.1621,-75.1553,1000.5318, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		if(GetPlayerVirtualWorld(playerid) == 0) // Burger King 1 - San Fierro
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,-1910.7628,830.0377,35.1719);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 1)// Burger King 2(nord) - San Fierro
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,1193.2615,-918.1968,42.8140);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 2)// Burger King 3(sud) - San Fierro
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,816.0543,-1615.0594,13.3467);
			PlayerInfo[playerid][pInt] = 0;
		}
		OnPlayerExitFood(playerid);
		return 1;
	}
	else if(PlayerToPointStripped(1, playerid,-1816.6139,617.7560,35.1719, cx,cy,cz))
	{//Clukin Bell 1 - San Fierro
		SetPlayerVirtualWorld(playerid, 1);
		PlayerInfo[playerid][pVirWorld] = 1;
		OnPlayerEnterFood(playerid, 1);
	}
    else if(PlayerToPointStripped(1, playerid,-2672.3147,259.3097,4.6328, cx,cy,cz))
	{//Cluckin Bell 2 - San Fierro
		OnPlayerEnterFood(playerid, 1);
	}
	else if(PlayerToPointStripped(1, playerid,364.0594,-11.7518,1001.8516, cx,cy,cz))
	{//Sortie de Clukin Bell
		if(GetPlayerVirtualWorld(playerid) == 0) // Cluckin Bell 2 - San Fierro
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,-2671.9280,262.7878,4.6328);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 2)// Cluckin Bell 2
		{
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2398.5508,-1894.6324,13.3828);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(GetPlayerVirtualWorld(playerid) == 1)// Cluckin Bell 1 - San Fierro
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,-1816.8182,615.7687,35.1719);
			PlayerInfo[playerid][pInt] = 0;
		}
		OnPlayerExitFood(playerid); // ?
		return 1;
	}
	else if(PlayerToPointStripped(1, playerid,1833.5290,-1842.6246,12.6031, cx,cy,cz))
	{//24/7 gas station
		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		SetPlayerInterior(playerid, 4);
		SetPlayerPos(playerid,-28.2619,-26.2015,1003.5573);
		PlayerInfo[playerid][pInt] = 4;
	}
	else if(PlayerToPointStripped(1, playerid,-28.0241,-31.7674,1003.5573, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1831.4804,-1845.1090,13.5781);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,227.5614,-7.3146,1002.2109, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVirWorld] = 0;
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,454.5949,-1500.6449,30.8821);
		OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2105.0429,-1806.4582,12.6047, cx,cy,cz))
	{//Pizzeria - Los Santos
	    SetPlayerVirtualWorld(playerid, 2);
	    PlayerInfo[playerid][pVirWorld] = 2;
		OnPlayerEnterFood(playerid, 3);
	}
	else if(PlayerToPointStripped(1, playerid,-1721.1561,1359.7627,7.1853, cx,cy,cz))
	{//Pizzeria - San Fierro
		OnPlayerEnterFood(playerid, 3);
	}
	else if(PlayerToPointStripped(1, playerid,372.3847,-133.5248,1001.4922, cx,cy,cz))
	{//Some teleports are fucked up but they are working
	    if(GetPlayerVirtualWorld(playerid) == 2)
	    {
	        GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerPos(playerid,2098.7929,-1806.9456,13.3546);
	        OnPlayerExitFood(playerid); // ?
	        PlayerInfo[playerid][pInt] = 0;
	        SetPlayerVirtualWorld(playerid, 0);
	        PlayerInfo[playerid][pVirWorld] = 0;
	    }
	    else
	    {
			GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,-1723.9218,1358.6445,7.1875);
			OnPlayerExitFood(playerid); // ?
			PlayerInfo[playerid][pInt] = 0;
		}
	}
	else if (PlayerToPointStripped(2.0, playerid,-2441.9749,754.0135,35.1786, cx,cy,cz))
	{
		//24-7
		SetPlayerPos(playerid, -25.1326,-139.0670,1003.5469);
		GameTextForPlayer(playerid, "~w~Bienvenue au ~r~24-7",5000,3);
		SetPlayerInterior(playerid,16);
		PlayerInfo[playerid][pInt] = 16;
	}
	else if (PlayerToPointStripped(2.0, playerid,-25.1326,-141.0670,1003.5469, cx,cy,cz))
	{
		//24-7
		SetPlayerPos(playerid, -2441.9749,752.0135,35.1786);
		GameTextForPlayer(playerid, "~r~Los Santos",5000,3);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1122.7083,-2036.6382,69.8942, cx,cy,cz))
	{
		// QG Leones
  		SetPlayerPos(playerid, 1298.8181,-789.9840,1084.0078);
		GameTextForPlayer(playerid, "~w~QG des Russes",5000,1);
		SetPlayerInterior(playerid,5);
		PlayerInfo[playerid][pInt] = 5;
	}
	else if (PlayerToPointStripped(1, playerid,1298.9127,-796.7946,1083.0568, cx,cy,cz))
	{
		// Exit QG Loenes
		SetPlayerPos(playerid, 1130.0090,-2036.9755,69.0078);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1778.8132,-1662.7515,14.4375, cx,cy,cz))
	{
		//FBI Entrée- Los Santos
		SetPlayerPos(playerid, 288.7287,168.5377,1007.1719);
		GameTextForPlayer(playerid, "~w~FBI",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,1773.0424,-1655.2365,14.4281, cx,cy,cz))
	{
		//FBI Entrée2- Los Santos
		SetPlayerPos(playerid, 288.7287,168.5377,1007.1719);
		GameTextForPlayer(playerid, "~w~FBI",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,288.7287,167.0377,1007.1719, cx,cy,cz))
	{
		//FBI Exit 1 LS
		SetPlayerPos(playerid, 1773.7274,-1664.5875,14.4259);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,238.3001,138.9406,1003.0234, cx,cy,cz))
	{
		//FBI Exit 2 - LS
		SetPlayerPos(playerid, 1773.7274,-1664.5875,14.4259);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1172.0818,-1325.3009,15.4073, cx,cy,cz))
	{
		//Hospital enter LS
		SetPlayerPos(playerid, 1138.8329,-1326.5934,1021.2048);
		GameTextForPlayer(playerid, "~w~Hopital De Los Santos ",5000,1);
		SetPlayerInterior(playerid,6);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,1139.0200,-1328.6912,1019.7036, cx,cy,cz))
	{
		//Sortie Hôpital LS
		SetPlayerPos(playerid, 1178.1229,-1324.0979,14.1045);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1165.7223,-1336.1615,1019.7209, cx,cy,cz))
	{
		//Hôpital Toit Entrée - San Fierro
		SetPlayerPos(playerid,1148.0042,-1316.2881,1023.7019);
		SetPlayerInterior(playerid,6);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,1148.1987,-1317.9971,1023.7019, cx,cy,cz))
	{
		//Hôpital Toit Sortire
		SetPlayerPos(playerid, 1162.9874,-1336.0535,1019.7209);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1038.1538,-1340.3851,12.7640, cx,cy,cz))
	{
		//Jim's sticky ring
		OnPlayerEnterFood(playerid, 4);
	}
	else if (PlayerToPointStripped(1, playerid,377.0168,-193.1981,999.6568, cx,cy,cz))
	{
		//Jim's sticky ring
		SetPlayerPos(playerid, 1036.1939,-1338.4067,12.7515);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		OnPlayerExitFood(playerid);
	}
	else if (PlayerToPointStripped(1, playerid,1480.3517,-1771.5747,18.7958, cx,cy,cz))
	{
		//Entrée Mairie - San Fierro
		SetPlayerPos(playerid, 382.1148,173.0181,1008.3828);
		GameTextForPlayer(playerid, "~w~La Mairie",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,390.0630,173.5741,1008.3828, cx,cy,cz))
	{
		//Sortie Mairie - San Fierro
		SetPlayerPos(playerid, 1481.5485,-1762.4202,18.7958);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1310.1296,-1366.7975,13.5065, cx,cy,cz))
	{
		//Entrée ANPE - San Fierro
		SetPlayerPos(playerid, 1725.4922,-1644.8798,20.2264);
		GameTextForPlayer(playerid, "~w~L'ANPE",5000,1);
		SetPlayerInterior(playerid,18);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if (PlayerToPointStripped(1, playerid,1727.1344,-1637.8490,20.2229, cx,cy,cz))
	{
		//Sortie ANPE - San Fierro
		SetPlayerPos(playerid, 1310.9200,-1376.4404,13.6558);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (PlayerToPointStripped(1, playerid,2895.9500,-2006.1652,4.1227, cx,cy,cz))
	{
		//Entrée Yakuza
		SetPlayerPos(playerid, -2159.5962,641.0523,1052.3817);
		GameTextForPlayer(playerid, "~w~QG des Yakuza",5000,1);
		SetPlayerInterior(playerid,1);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1, playerid,-2158.3828,643.1418,1052.3750, cx,cy,cz))
	{
		//Sortie Yakuza
		SetPlayerPos(playerid, 2891.4507,-2006.1132,5.0221);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	
	else if (PlayerToPointStripped(1, playerid,1720.3347,-1741.1656,13.5469, cx,cy,cz))
	{
		//Entrée Eglise
		SetPlayerPos(playerid, -2024.7218,1136.9357,18.9023);
		GameTextForPlayer(playerid, "~w~Eglise",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,-2024.9730,1141.5051,18.0688, cx,cy,cz))
	{
		//Sortie Eglise
		SetPlayerPos(playerid, 1719.5299,-1738.3848,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,561.6047,-1506.7681,14.5488, cx,cy,cz))
	{
		//Entrée DJ 
		SetPlayerPos(playerid, -2638.8538,1406.3262,906.4609);
		GameTextForPlayer(playerid, "~r~Jizzy",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,-2636.5488,1402.4697,906.4609, cx,cy,cz))
	{
		//Sortie DJ LS
		SetPlayerPos(playerid, 553.5241,-1511.1171,14.5753);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1836.8510,-1682.4356,12.3307, cx,cy,cz))
	{
		// the sun
		SetPlayerPos(playerid, 491.7454,-20.2026,1000.6797);
		GameTextForPlayer(playerid, "~w~L'alhambra",5000,1);
		SetPlayerInterior(playerid,17);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 17;
	}
	else if (PlayerToPointStripped(1, playerid,493.3928,-24.8417,1000.6797, cx,cy,cz))
	{
		// the sun sortie
		SetPlayerPos(playerid, 1834.5964,-1685.2969,13.4249);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (PlayerToPointStripped(1, playerid,1752.5020,-1893.9869,13.5574, cx,cy,cz))
	{
		// MG6 sortie
		SetPlayerPos(playerid, 366.5081,193.1942,1008.3828);
		GameTextForPlayer(playerid, "~w~MG6",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,368.4178,194.0386,1008.3828, cx,cy,cz))
	{
		// MG6 studio
		SetPlayerPos(playerid, 1756.8665,-1893.7170,13.5563);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1, playerid,1081.1147,-1697.1541,12.5718, cx,cy,cz))
	{
		//Entrée Centre de Permis
		SetPlayerPos(playerid, 1494.6207,1305.2336,1093.2891);
		GameTextForPlayer(playerid, "~w~Auto-ecole",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,1494.2778,1303.7288,1093.2891, cx,cy,cz))
	{
		//Sortie Centre de permis 
		SetPlayerPos(playerid, 1082.3431,-1701.4586,13.5468);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 280);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,-1606.4639,672.2629,-5.2422, cx,cy,cz))
	{
	    //Acenseur ACPD - San Fierro
	    SetPlayerPos(playerid, 244.0099,66.4152,1003.6406);
	    GameTextForPlayer(playerid, "~w~Police Departement",5000,1);
	    SetPlayerInterior(playerid,6);
	    SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1.5, playerid,1570.3828,-1333.8882,16.4844, cx,cy,cz))
	{
	    //Next to PD building
	    SetPlayerPos(playerid, 1545.0068,-1366.5094,327.2868);
	    GameTextForPlayer(playerid, "~w~Roof of News building",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
 	else if (PlayerToPointStripped(1.5, playerid,1548.8167,-1366.2247,326.2109, cx,cy,cz))
	{
	    //Next to PD building
	    SetPlayerPos(playerid, 1572.1115,-1332.5288,16.4844);
	    GameTextForPlayer(playerid, "~w~News building",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1419.4519,-1623.9142,13.5469, cx,cy,cz))
	{
	    // ZIP
	    SetPlayerPos(playerid, 161.391006, -93.159156,1001.804687);
	    GameTextForPlayer(playerid, "~w~ZIP",5000,1);
	    SendClientMessage(playerid,COLOR_GREEN, "Caissiere : Bonjour et bienvenue ! La cabine d'essayage est à votre droite. ");
	    SetPlayerInterior(playerid,18);
		PlayerInfo[playerid][pInt] = 18;
	}
 	else if (PlayerToPointStripped(1.5, playerid,161.5276,-96.8802,1001.8047, cx,cy,cz))
	{
	    // ZIP
	    SetPlayerPos(playerid, 1422.1718,-1622.8304,13.5469);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,2334.7163,-1234.9140,26.9765, cx,cy,cz))
	{
	    // ballas
	    SetPlayerPos(playerid, 446.8232,1398.6588,1084.3120);
	    GameTextForPlayer(playerid, "~w~QG Blood'z",5000,1);
	    SendClientMessage(playerid,COLOR_GREEN, "MB9 : Man, bienvenue chez nous ");
	    SetPlayerInterior(playerid,2);
		PlayerInfo[playerid][pInt] = 2;
	}
	else if (PlayerToPointStripped(1.5, playerid,446.7798,1397.0715,1084.3047, cx,cy,cz))
	{
 		// ballas soorit
	    SetPlayerPos(playerid, 2332.4809,-1232.3189,27.9765);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1498.3889,-1581.1712,13.4692, cx,cy,cz))
	{
	    // Resto
	    SetPlayerPos(playerid, -795.0341,494.9599,1375.7698);
	    GameTextForPlayer(playerid, "~w~Chez Luigi",5000,1);
	    SetPlayerInterior(playerid,1);
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1.5, playerid,-794.9068,490.0471,1375.3945, cx,cy,cz))
	{
 		// Resto sorti
	    SetPlayerPos(playerid, 1502.1064,-1584.9707,13.34678);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,681.6178,-473.7029,15.5613, cx,cy,cz))
	{
	    // QG Ruff Ryders entrée
	    SetPlayerPos(playerid, 681.9268,-453.3195,-25.6171);
	    GameTextForPlayer(playerid, "~w~QG Ruff Ryders",5000,1);
	    SetPlayerInterior(playerid,1);
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1.5, playerid,681.3808,-446.4662,-25.6097, cx,cy,cz))
	{
 		// QG Ruff Ryders Sortit
	    SetPlayerPos(playerid, 682.1062,-476.9442,16.3359);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,2249.8808,-1238.7515,24.8984, cx,cy,cz))
	{
	    // Maison Racer entrée
	    SetPlayerPos(playerid, 2364.6896,-1131.8753,1050.875);
	    GameTextForPlayer(playerid, "~w~Maison Racer'z",5000,1);
	    SetPlayerInterior(playerid,8);
		PlayerInfo[playerid][pInt] = 8;
	}
	else if (PlayerToPointStripped(1.5, playerid,2365.2172,-1135.4002,1049.8489, cx,cy,cz))
	{
 		// Maison Racer Sortit
	    SetPlayerPos(playerid, 2248.3122,-1235.7139,25.0395);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1945.2781,-2042.6590,13.5003, cx,cy,cz))
	{
	    // Bar ms-13 entrée
	    SetPlayerPos(playerid, -226.4216,1402.4757,27.7734);
	    GameTextForPlayer(playerid, "~w~Bar MS-13",5000,1);
	    SetPlayerInterior(playerid,18);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if (PlayerToPointStripped(1.5, playerid,-229.3742,1401.1541,26.8906, cx,cy,cz))
	{
 		// Bar ms-13 sortie
	    SetPlayerPos(playerid, 1947.0172,-2044.5311,13.5468);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (IsPlayerInRangeOfPoint(playerid, 1, 1784.58,-1297.52,13.37))
	{
	     //San news entrée
	  	 SetPlayerPos(playerid, 1817.0708,-1297.3933,109.2669);
	     GameTextForPlayer(playerid, "~w~San News",5000,1);
	     SetPlayerInterior(playerid,0);
		 PlayerInfo[playerid][pInt] = 0;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 1, 1817.6517,-1294.2751,109.2697))
	{
	     //San News
	     SetPlayerPos(playerid, 1787.6311,-1297.4938,13.3793);
	     GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	     SetPlayerInterior(playerid,0);
	     PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1.5, playerid,691.4053,-1276.1058,12.5854, cx,cy,cz))
	{
	    // QG Cosa entrée
	    SetPlayerPos(playerid, 963.4611,-54.3939,1001.1245);
	    GameTextForPlayer(playerid, "~w~QG Cosa Nostra",5000,1);
	    SetPlayerInterior(playerid,3);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1.5, playerid,967.8657,-53.1991,1000.1736, cx,cy,cz))
	{
 		// QG Cosa sortie
	    SetPlayerPos(playerid, 689.4151,-1277.6954,13.5591);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,-217.5751,1402.7121,26.8234, cx,cy,cz))
	{
	    // Toilette Bar ms-13 entrée
	    SetPlayerPos(playerid, 2228.8952,-1114.0957,1050.8828);
	    GameTextForPlayer(playerid, "~w~Toilette",5000,1);
	    SetPlayerInterior(playerid,5);
		PlayerInfo[playerid][pInt] = 5;
	}
	else if (PlayerToPointStripped(1.5, playerid,2230.7116,-1112.2231,1049.8568, cx,cy,cz))
	{
 		// toilette Bar ms-13 sortie
	    SetPlayerPos(playerid, -219.7566,1402.5585,27.7734);
	    GameTextForPlayer(playerid, "~w~Bar MS-13",5000,1);
	    SetPlayerInterior(playerid,18);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if (PlayerToPointStripped(1.5, playerid,1828.1594,-1980.4380,13.5469, cx,cy,cz))
	{
	    // Ms-13 Entrée
	    SetPlayerPos(playerid, 318.9492,1118.1148,1083.1571);
	    GameTextForPlayer(playerid, "~w~QG MS-13",5000,1);
	    SendClientMessage(playerid,COLOR_GREEN, "Amigo, bienvenue chez nous ");
	    SetPlayerInterior(playerid,5);
		PlayerInfo[playerid][pInt] = 5;
	}
	else if (PlayerToPointStripped(1.5, playerid,318.6451,1114.8708,1082.9569, cx,cy,cz))
	{
 		// Ms-13 Sortie
	    SetPlayerPos(playerid, 1830.1904,-1983.0223,13.5469);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,2522.6496,-1679.3818,15.4993, cx,cy,cz))
	{
	    // Cryp'z Entrée
	    SetPlayerPos(playerid, 260.9697,1286.9089,1079.2067);
	    GameTextForPlayer(playerid, "~w~QG Crip's",5000,1);
	    SendClientMessage(playerid,COLOR_GREEN, "Nigga, bienvenue chez nous ");
	    SetPlayerInterior(playerid,4);
		PlayerInfo[playerid][pInt] = 4;
	}
	else if (PlayerToPointStripped(1.5, playerid,261.1187,1284.4895,1079.2568, cx,cy,cz))
	{
 		// Cryp'z Sortie
	    SetPlayerPos(playerid, 2517.8300,-1678.0078,13.8342);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	/*else if (PlayerToPointStripped(1.5, playerid,629.9409,-1858.7820,5.6675, cx,cy,cz))
    {
 		// centre
	    SetPlayerPos(playerid, 832.0991,6.0056,1004.1797);
	    GameTextForPlayer(playerid, "~w~Centre d'accueil",5000,1);
	    SendClientMessage(playerid,COLOR_GREEN, "Jennia : Salut, bienvenue a toi ");
	    SetPlayerInterior(playerid,3);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1.5, playerid,834.6678,7.4014,1004.1870, cx,cy,cz))
	{
 		// centre sortie
	    SetPlayerPos(playerid, 631.2625,-1862.2772,5.6675);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}*/
		else if (PlayerToPointStripped(1, playerid,-1619.2137,744.2702,-5.2422, cx,cy,cz))
	{
		// salle d entrainement
		SetPlayerPos(playerid, 1569.7339,-1695.8652,5.8906);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1568.6484,-1689.9712,6.2188, cx,cy,cz))
	{
		// dehors
		SetPlayerPos(playerid, -1616.0923,745.4777,-5.2422);
		GameTextForPlayer(playerid, "~w~Entrainement LSPD",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1524.4833,-1678.0082,6.2188, cx,cy,cz))
	{
		// dehors
		SetPlayerPos(playerid, 246.6868,123.1317,1003.2188);
		GameTextForPlayer(playerid, "~w~LSPD",5000,1);
		SetPlayerInterior(playerid,10);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 10;
	}
	else if (PlayerToPointStripped(1, playerid,2157.2361,1596.3137,999.9688, cx,cy,cz))
	{
		// aller dehors ls coffre
		SetPlayerPos(playerid, 2314.8550,-3.6790,26.7422);
		GameTextForPlayer(playerid, "~w~MBG",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2315.4758,0.3543,26.7422, cx,cy,cz))
	{
		// aller dans les coffre
		SetPlayerPos(playerid, 2157.1597,1598.8550,999.9725);
		GameTextForPlayer(playerid, "~w~Prive",5000,1);
		SendClientMessage(playerid,COLOR_GREEN, "(( tu fais quoi la ? tu va avoir des ennuis)) ");
		SetPlayerInterior(playerid,1);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 1;
	}
	else if (PlayerToPointStripped(1, playerid,2214.3896,-1150.2522,1025.7969, cx,cy,cz))
	{
		// sorti de jefferson
		SetPlayerPos(playerid, 1418.8313,-1703.4325,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1976.3968,-2036.6440,12.5718, cx,cy,cz))
	{
	    // Tatoo entrée ms-13
	    SetPlayerPos(playerid, -204.4149,-41.4533,1002.2734);
	    GameTextForPlayer(playerid, "~w~Tattoos",5000,1);
	    SetPlayerInterior(playerid,3);
		PlayerInfo[playerid][pInt] = 3;
	}
 	else if (PlayerToPointStripped(1.5, playerid,-204.4491,-44.2388,1001.3225, cx,cy,cz))
	{
	    // Tatoo sortit ms-13
	    SetPlayerPos(playerid, 1975.5590,-2039.1641,13.5468);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1940.1811,-2115.9721,12.7203, cx,cy,cz))
	{
	    // Sexe shop entrée ms-13
	    SetPlayerPos(playerid, -102.6980,-21.7115,1000.7187);
	    GameTextForPlayer(playerid, "~w~Sex shop",5000,1);
	    SetPlayerInterior(playerid,3);
		PlayerInfo[playerid][pInt] = 3;
	}
 	else if (PlayerToPointStripped(1.5, playerid,-100.3726,-24.8421,999.7426, cx,cy,cz))
	{
	    // Sexe shop sortit ms-13
	    SetPlayerPos(playerid, 1940.2221,-2113.6643,13.6953);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1368.5280,-1279.7689,12.5468, cx,cy,cz))
	{
	    // Ammu_Nation entrée
	    SetPlayerPos(playerid, 288.4648,-82.1572,1001.5156);
	    GameTextForPlayer(playerid, "~w~Ammu-Nation",5000,1);
	    SetPlayerInterior(playerid,4);
		PlayerInfo[playerid][pInt] = 4;
	}
 	else if (PlayerToPointStripped(1.5, playerid,285.8613,-86.2792,1000.5396, cx,cy,cz))
	{
	    // Ammu_Nation  sortit
	    SetPlayerPos(playerid, 1366.4932,-1283.6674,13.5468);
	    GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

public CreateFoodMenus() // by Luk0r (Donut part by Ellis)
{
	// Burger Shot
	burgermenu = CreateMenu("Burger", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(burgermenu,0,"Menu");
	AddMenuItem(burgermenu,0,"Sharp Shooter");
	AddMenuItem(burgermenu,0,"Cheeseburger");
	AddMenuItem(burgermenu,0,"Double Sandwich Patty");
	AddMenuItem(burgermenu,0,"Salade Beefy");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Boissons");
	AddMenuItem(burgermenu,0,"Bouteille d'eau");
	AddMenuItem(burgermenu,0,"Sprunk");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Quitter");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$2"); // Sharp Shooter
	AddMenuItem(burgermenu,1,"$4"); // Cheeseburger
	AddMenuItem(burgermenu,1,"$5"); // DP Sandwich
	AddMenuItem(burgermenu,1,"$3"); // Beefy Salad
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$1"); // Water
	AddMenuItem(burgermenu,1,"$1"); // Sprunk
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	DisableMenuRow(burgermenu, 0);
	DisableMenuRow(burgermenu, 5);
	DisableMenuRow(burgermenu, 6);
	DisableMenuRow(burgermenu, 9);

	// Cluckin Bell
	chickenmenu = CreateMenu("Cluckin' Bell", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(chickenmenu,0,"Menu");
	AddMenuItem(chickenmenu,0,"Little Clucker");
	AddMenuItem(chickenmenu,0,"Chicken Nuggets");
	AddMenuItem(chickenmenu,0,"Chicken Sandwich");
	AddMenuItem(chickenmenu,0,"Chicken Salad");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Boissons");
	AddMenuItem(chickenmenu,0,"Bouteille d'eau");
	AddMenuItem(chickenmenu,0,"Sprunk");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Quitter");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$2"); // Little Clucker
	AddMenuItem(chickenmenu,1,"$4"); // Nuggets
	AddMenuItem(chickenmenu,1,"$5"); // C Sandwich
	AddMenuItem(chickenmenu,1,"$3"); // Salad
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$1"); // Water
	AddMenuItem(chickenmenu,1,"$1"); // Sprunk
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	DisableMenuRow(chickenmenu, 0);
	DisableMenuRow(chickenmenu, 5);
	DisableMenuRow(chickenmenu, 6);
	DisableMenuRow(chickenmenu, 9);

	// Pizza Stack
	pizzamenu = CreateMenu("Borsalino", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(pizzamenu,0,"Menu");
	AddMenuItem(pizzamenu,0,"Little Sicilian");
	AddMenuItem(pizzamenu,0,"Personal Pan Pizza");
	AddMenuItem(pizzamenu,0,"Sheet Pizza");
	AddMenuItem(pizzamenu,0,"Pepperoni Salade");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Boissons");
	AddMenuItem(pizzamenu,0,"Bouteille d'eau");
	AddMenuItem(pizzamenu,0,"Sprunk");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Quitter");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$2"); // Sicilian
	AddMenuItem(pizzamenu,1,"$4"); // Personal Pan
	AddMenuItem(pizzamenu,1,"$5"); // Sheet
	AddMenuItem(pizzamenu,1,"$3"); // Salad
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$1"); // Water
	AddMenuItem(pizzamenu,1,"$1"); // Sprunk
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	DisableMenuRow(pizzamenu, 0);
	DisableMenuRow(pizzamenu, 5);
	DisableMenuRow(pizzamenu, 6);
	DisableMenuRow(pizzamenu, 9);

	// Jim's sticky ring
	donutshop = CreateMenu("Jim's", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(donutshop,0,"Donuts");
	AddMenuItem(donutshop,0,"Little Donut");
	AddMenuItem(donutshop,0,"Regular Donut");
	AddMenuItem(donutshop,0,"Chef Donut");
	AddMenuItem(donutshop,0,"Extra large Donut");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Boissons");
	AddMenuItem(donutshop,0,"Bouteille d'aeau");
	AddMenuItem(donutshop,0,"Sprunk");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Quitter");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$2"); // Little Donut
	AddMenuItem(donutshop,1,"$4"); // Regular Donut
	AddMenuItem(donutshop,1,"$5"); // Chief Donut
	AddMenuItem(donutshop,1,"$4"); // Extra large Donut
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$1"); // Water
	AddMenuItem(donutshop,1,"$1"); // Sprunk
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	DisableMenuRow(donutshop, 0);
	DisableMenuRow(donutshop, 5);
	DisableMenuRow(donutshop, 6);
	DisableMenuRow(donutshop, 9);
}

public OnPlayerEnterFood(playerid, foodid)
{
	switch (foodid)
	{
		case 1: // chicken
		{
			SetPlayerInterior(playerid, 9);
			PlayerInfo[playerid][pInt] = 9;
			SetPlayerPos(playerid,365.7793,-9.1699,1001.8516);
			SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.5);
			GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
			InAFoodPlace[playerid] = 1;
		}
		case 2: // burger
		{
			SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pInt] = 10;
			SetPlayerPos(playerid,366.0324,-72.6400,1001.5078);
			SetPlayerCheckpoint(playerid, 376.8571,-67.6620,1001.5151, 1.5);
			GameTextForPlayer(playerid, "~w~Burger", 5000, 1);
			InAFoodPlace[playerid] = 2;
		}
		case 3: // pizza
		{
			SetPlayerInterior(playerid, 5);
			PlayerInfo[playerid][pInt] = 5;
			SetPlayerPos(playerid,372.4117,-130.4577,1001.4922);
			SetPlayerCheckpoint(playerid, 375.6895,-118.9683,1001.4995, 1.5);
			GameTextForPlayer(playerid, "~w~Borsalino", 5000, 1);
			InAFoodPlace[playerid] = 3;
		}
		case 4: // donuts
		{
			SetPlayerInterior(playerid, 17);
			PlayerInfo[playerid][pInt] = 17;
			SetPlayerPos(playerid,379.9642,-191.8586,1000.6328);
			SetPlayerCheckpoint(playerid, 379.0825,-186.6897,999.6318, 0.8);
			GameTextForPlayer(playerid, "~w~Donut's", 5000, 1);
			InAFoodPlace[playerid] = 4;
		}
	}
	return 1;
}

public OnPlayerExitFood(playerid)
{
	DisablePlayerCheckpoint(playerid);
	InAFoodPlace[playerid] = 0;
	return 1;
}

public ClearChatbox(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
	}
	return 1;
}

public CreateGuideMenus()
{
	Guide = CreateMenu("Guide", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Guide, 0, "Regles");
	AddMenuItem(Guide, 0, "Job localisation");
	AddMenuItem(Guide, 0, "Auto-Ecole");
	AddMenuItem(Guide, 0, "Magasin de vetement");
	AddMenuItem(Guide, 0, "- Exit -");

	JobLocations = CreateMenu("JobLocations", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(JobLocations, 0, "Avocat ");
	AddMenuItem(JobLocations, 0, "Prostitue");
	AddMenuItem(JobLocations, 0, "Mecanicien");
	AddMenuItem(JobLocations, 0, "Garde du corps");
	AddMenuItem(JobLocations, 0, "Boxeur");
	AddMenuItem(JobLocations, 0, "Chauffeur de bus");
	AddMenuItem(JobLocations, 0, "camionneur");
	AddMenuItem(JobLocations, 0, "Vendeur de pizza");
	AddMenuItem(JobLocations, 0, "Page suivante->");
	AddMenuItem(JobLocations, 0, "- Retour -");

	JobLocations2 = CreateMenu("JobLocations", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(JobLocations2, 0, "Fermier");
	AddMenuItem(JobLocations2, 0, "Vendeur de drogues");
	AddMenuItem(JobLocations2, 0, "Vendeur de Matos");
	AddMenuItem(JobLocations2, 0, "Balayeur de rue");
	AddMenuItem(JobLocations2, 0, "<- Page Precedente");
	AddMenuItem(JobLocations2, 0, "- Retour -");

}


public busroutestoptimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new newcar = GetPlayerVehicleID(playerid);
	    if(IsABus(newcar))
	    {
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Vous pouvez aller maintenant  !");
	    }
	}
}

stock strvalEx( const string[] ) // fix for strval-bug with > 50 letters.
{
	// written by mabako in less than a minute :X
	if( strlen( string ) >= 50 ) return 0; // It will just return 0 if the string is too long
	return strval(string);
}

public NameTimer1()
{
	for(new i = 0;i < MAX_PLAYERS;i++)
 	{
	 	if(IsPlayerConnected(i))
 		{
 			for(new q = 0;q < MAX_PLAYERS;q++)
 			{
				if(IsPlayerConnected(q))
				{
 					new Float:p1x;
					new Float:p1y;
					new Float:p1z;
					new Float:p2x;
					new Float:p2y;
					new Float:p2z;
					if(IsPlayerConnected(i) && IsPlayerConnected(q))
					{
						GetPlayerPos(i,p1x,p1y,p1z);
    					GetPlayerPos(q,p2x,p2y,p2z);
						if(GetPointDistanceToPointExMorph(p1x,p1y,p1z,p2x,p2y,p2z) < pdistance)
						{
							if(PlayerInfo[q][pMaskuse] != 1)
	    					{
								ShowPlayerNameTagForPlayer(i,q,1);
							}
	    				}
						else
						{
							ShowPlayerNameTagForPlayer(i,q,0);
						}
                    }
                }
            }
        }
	}
}


/*
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    Script_OnPlayerKeyStateChange(playerid, newkeys);
    new string[256];
	new sendername[MAX_PLAYER_NAME];
    if(newkeys == KEY_CROUCH)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
			if(IsPlayerConnected(playerid))
			{
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1)
    	        {
  	                if (PlayerToPoint(15, playerid,1587.4228515625, -1639.2021484375, 12.3828125))
		            {
	   			        if(Grille[1] == 1)
	   			        {
	   			           return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   		      	    }
   	      	   	        MoveStreamObject(police1,1589.02050781, -1638.08789062, 7.474289894104, 0.97);
	   	   	  	        SetTimer("FermerBarrierePolice1", 12000, 0);
	      		        Grille[1] = 1;
   	    		        SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		        GetPlayerName(playerid, sendername, sizeof(sendername));
	   			        if(PlayerInfo[playerid][pMaskuse] == 1)
		    	        {
 		  	     	       ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de la LSPD .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	        }
		     	        else
		    	        {
		   	       	       format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de la LSPD .*", sendername);
 		  	     	       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	        }
		            }
  	                if (PlayerToPoint(15, playerid,1543.8592529297, -1627.734375, 12.707822799683))
		            {
 		   	            if(Grille[2] == 1)
	   			        {
	   			          return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   			        }
   	      		        MoveStreamObject(police2,1544.55371094, -1627.27539062, 6.55997276, 0.97);
	   	   		        SetTimer("FermerBarrierePolice2", 12000, 0);
	      		        Grille[2] = 1;
   	    		        SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     		        GetPlayerName(playerid, sendername, sizeof(sendername));
	   			        if(PlayerInfo[playerid][pMaskuse] == 1)
		    	        {
 		  	     	       ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de la LSPD .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	        }
		     	        else
		    	        {
        	               format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de la LSPD .*", sendername);
 		  	     	       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	  	        }
		   	  	    }
  	  	        }
				if(PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pMember] == 10)
 			  	{
  				    if (PlayerToPoint(15, playerid,1595.6496582031, -2176.5832519531, 12.504703521729))
	 			    {
				        if(	Grille[13] == 1)
						{
						    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
						}
      					MoveStreamObject(racer1,1593.9775390625, -2169.0615234375, 13.379755020142, 0.97);
	   					SetTimer("FermerRacer1", 12000, 0);
	   					Grille[13] = 1;
    					SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  					GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  				format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille du garage Racer'z .*", sendername);
   					   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					if (PlayerToPoint(15, playerid,1496.8774414063, -2166.21875, 12.496891021729))
	 			    {
				        if(	Grille[12] == 1)
						{
						    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
						}
      					MoveStreamObject(racer2,1497.2830810547, -2166.7561035156, 9.0754051208496, 0.97);
	   					SetTimer("FermerRacer2", 12000, 0);
	   					Grille[12] = 1;
    					SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  					GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  				format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille du parking Racer'z .*", sendername);
   					   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
 			  	}
 	  			if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12)
  	 			{
  		 		   if (PlayerToPoint(15, playerid,-2126.8217773438, -80.319862365723, 37.068702697754))
	 	 		   {
						if(	Grille[8] == 1)
						{
						    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
						}
      					MoveStreamObject(russe,-2126.8217773438, -80.319862365723, 29.068702697754, 0.97);
	   					SetTimer("FermerBarriererusse", 12000, 0);
	   					Grille[8] = 1;
    					SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  					GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  				format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille de la famille Leone .*", sendername);
		  			   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
		 	  	}
        		if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15)
        		{
  	      	        if (PlayerToPoint(15, playerid,-1858.3023681641, -176.06532287598, 11.044496536255))
	    		    {
	   	    			if(Grille[4] == 1)
	   		    		{
	   		    		    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   		    		}
   	      	    		MoveStreamObject(aeroport,-1858.3023681641, -176.06532287598, 4.044496536255, 0.97);
	   	   	    		SetTimer("Fermeraeroport", 12000, 0);
	      	    		Grille[4] = 1;
   	    	    		SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     	    		GetPlayerName(playerid, sendername, sizeof(sendername));
	   		    		if(PlayerInfo[playerid][pMaskuse] == 1)
		        		{
 		  	     	    	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere du QG Crip'Z .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        		}
		         		else
		        		{
		   	       	    	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere du QG Crip'Z .*", sendername);
 		  	       	    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	      		}
		     	   }
	    		}
 			  	if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 5)
  	 			{
  				    if (PlayerToPoint(15, playerid,-1703.103515625, 1340.541015625, 9.2707805633545))
	 			    {
						if(	Grille[9] == 1)
						{
						    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
						}
      					MoveStreamObject(cosa1,-1703.103515625, 1340.541015625, 0.2707805633545, 0.97);
	   					SetTimer("Fermercosa1", 12000, 0);
	   					Grille[9] = 1;
    					SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  					GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  				format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille des cosa .*", sendername);
   					   	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
  		   		    if (PlayerToPoint(15, playerid,-1705.6279296875, 1372.458984375, 5.5052337646484))
	 			    {
						if(	Grille[10] == 1)
						{
						    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
						}
      					MoveStreamObject(cosa2,-1705.6279296875, 1372.458984375, 0.5052337646484, 0.97);
	   					SetTimer("Fermercosa2", 12000, 0);
	   					Grille[10] = 1;
    			    	SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  					GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  				format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille des cosa .*", sendername);
   			 		  	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
  		  		    if (PlayerToPoint(15, playerid,-1682.552734375, 1330.15234375, 5.4802317619324))
	 	  		    {
						if(	Grille[11] == 1)
						{
				   		    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
						}
      					MoveStreamObject(cosa3,-1682.552734375, 1330.15234375, 0.4802317619324, 0.97);
	   					SetTimer("Fermercosa3", 12000, 0);
	   					Grille[11] = 1;
    					SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	  					GetPlayerName(playerid, sendername, sizeof(sendername));
	   	  				format(string, sizeof(string), "* %s sort sa télécommande et ouvre la grille des cosa .*", sendername);
   			   			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
 	  			}
        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pJob] == 7)
        		{
  	       	        if (PlayerToPoint(15, playerid,1644.9204101563, -1712.6429443359, 12.231161117554))
		     	    {
	   		    		if(Grille[5] == 1)
	   		    		{
	   		    		    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   		    		}
   	      	    		MoveStreamObject(fourriere1,1642.8188476563, -1707.0543212891, 16.284065246582, 0.97);
	   	       			SetTimer("Fermerfourriere1", 12000, 0);
	          			Grille[5] = 1;
   	        			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	     	    		GetPlayerName(playerid, sendername, sizeof(sendername));
	   		    		if(PlayerInfo[playerid][pMaskuse] == 1)
		        		{
 		  	    	     	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere de la fourriere .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       	    	}
		        	 	else
		        		{
		   	    	       	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere de la fourriere .*", sendername);
 		  	    	     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	    	  	}
		      	  }
  	          	  if (PlayerToPoint(15, playerid,-2655.2478027344, -221.04484558105, 6.1350336074829))
	     	      {
	   		    		if(Grille[6] == 1)
	   		    		{
	   		    		    return SendClientMessage(playerid,COLOR_RED," Patientez le temps que la grille se referme");
	   		    		}
   	      	    		MoveStreamObject(fourriere2,-2655.2478027344, -221.04484558105, 0.1350336074829, 0.97);
	   	   	    		SetTimer("Fermerfourriere2", 12000, 0);
	          	    	Grille[6] = 1;
   	        			SendClientMessage(playerid, COLOR_BLUE,"La grille se fermera automatiquement dans 7 secondes.");
   	         			GetPlayerName(playerid, sendername, sizeof(sendername));
	   		    		if(PlayerInfo[playerid][pMaskuse] == 1)
		        		{
 		  	     	    	ProxDetector(30.0, playerid, "* Etranger sort sa télécommande et ouvre la barriere du QG D.Cosia .*", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        		}
		         		else
		        		{
		   	      	     	format(string, sizeof(string), "* %s sort sa télécommande et ouvre la barriere du QG D.Cosia .*", sendername);
 		  	        	 	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		   	      		}
		      	    }
    			}
     			return 1;
			}
		}
    }
    return 1;
}

*/

public FarmerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsAHarvest(vehicleid))
	    {
	        return 1;
	    }
	    if(FarmerVar[playerid] == 0)
	    {
	        return 1;
	    }
	    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
		{
			FarmerPickup[playerid][0]--;
		}
    	DisablePlayerCheckpoint(playerid);
    	FarmerVar[playerid] = 0;
	}
	return 1;
}

public DrugFarmerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsADrugHarvest(vehicleid))
	    {
	        return 1;
	    }
	    if(DrugFarmerVar[playerid] == 0)
	    {
	        return 1;
	    }
	    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
		{
			DrugFarmerPickup[playerid][0]--;
		}
    	DisablePlayerCheckpoint(playerid);
    	DrugFarmerVar[playerid] = 0;
	}
	return 1;
}

public LoadDrugSystem()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("drugs_system.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		drugsys[DrugAmmount] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public SaveDrugSystem()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", drugsys[DrugAmmount]);
	new File: file2 = fopen("drugs_system.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadMatsSystem()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("mats_system.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		matssys[MatsAmmount] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}
forward SaveMatsSystem();

public SaveMatsSystem()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", matssys[MatsAmmount]);
	new File: file2 = fopen("mats_system.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadingDrugsForSmugglers(playerid)
{
    new idcar = GetPlayerVehicleID(playerid);
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJob] != 20)
     	{
      		SendClientMessage(playerid, COLOR_GREY, "Vous n'étes pas un passeur de drogues.");
        	return 1;
		}
		if(!PlayerToPoint(7.0,playerid,-38.8664,56.3031,3.1172))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Vous étes pas dans la ferme de drogues.");
		    return 1;
		}
		if( GetPlayerMoney(playerid) < 299)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Apportez au moins 300 $ lors de la contrebande de drogues.");
		    return 1;
		}
		if(IsASmuggleCar(idcar))
		{
		    if(drugsys[DrugAmmount] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Pas de drogues dans la ferme .");
		        TogglePlayerControllable(playerid, true);
		        return 1;
		    }
		    if(drugsys[DrugAmmount] == 1)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues 1 grammes... (for 25$)");
		        SmuggledDrugs[playerid] = 1;
		        drugsys[DrugAmmount]--;
		        SafeGivePlayerMoney(playerid, -25);
		    }
		    if(drugsys[DrugAmmount] == 2)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues 2 grammes... (for 50$)");
		        SmuggledDrugs[playerid] = 2;
		        drugsys[DrugAmmount] -= 2;
		        SafeGivePlayerMoney(playerid, -50);
		    }
		    if(drugsys[DrugAmmount] == 3)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues 3 grammes... (for 75$)");
		        SmuggledDrugs[playerid] = 3;
		        drugsys[DrugAmmount] -= 3;
		        SafeGivePlayerMoney(playerid, -75);
		    }
		    if(drugsys[DrugAmmount] == 4)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues 4 grammes... (for 100$)");
		        SmuggledDrugs[playerid] = 4;
		        drugsys[DrugAmmount] -= 4;
		        SafeGivePlayerMoney(playerid, -100);
		    }
		    if(drugsys[DrugAmmount] == 5)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues 5 grammes... (for 125$)");
		        SmuggledDrugs[playerid] = 5;
		        drugsys[DrugAmmount] -= 5;
		        SafeGivePlayerMoney(playerid, -125);
		    }
		    if(drugsys[DrugAmmount] == 6)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues 6 grammes... (for 150$)");
		        SmuggledDrugs[playerid] = 6;
		        drugsys[DrugAmmount] -= 6;
		        SafeGivePlayerMoney(playerid, -150);
		    }
		    if(drugsys[DrugAmmount] == 7)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues, 7 grammes... (for 175$)");
		        SmuggledDrugs[playerid] = 7;
		        drugsys[DrugAmmount] -= 7;
		        SafeGivePlayerMoney(playerid, -175);
		    }
		    if(drugsys[DrugAmmount] == 8)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues, 8 Grammes... (for 200$)");
		        SmuggledDrugs[playerid] = 8;
		        drugsys[DrugAmmount] -= 8;
		        SafeGivePlayerMoney(playerid, -200);
		    }
		    if(drugsys[DrugAmmount] == 9)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement de drogues, 9 Grammes... (for 225$)");
		        SmuggledDrugs[playerid] = 9;
		        drugsys[DrugAmmount] -= 9;
		        SafeGivePlayerMoney(playerid, -225);
		    }
		    if(drugsys[DrugAmmount] >= 10)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Chargement  de drogues,10 Grammes... (for 250$)");
		        SmuggledDrugs[playerid] = 10;
		        drugsys[DrugAmmount] -= 10;
		        SafeGivePlayerMoney(playerid, -250);
		    }
		    SetPlayerCheckpoint(playerid, 1135.2180,-1325.2274,13.6277, 5.0);
		    SendClientMessage(playerid, COLOR_YELLOW, "Véhicule charger.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Allez déposé la drogue ( point rouge ).");
		    SendClientMessage(playerid, COLOR_YELLOW, "Attention a la police!");
		    SaveDrugSystem();
		    SetPlayerCriminal(playerid,255, "Drugs smuggling");
		    TogglePlayerControllable(playerid, true);
		}
	}
	return 1;
}

public SmugglerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsASmuggleCar(vehicleid))
	    {
	        return 1;
	    }
	    if(SmugglerWork[playerid] == 0)
	    {
	        return 1;
	    }
    	DisablePlayerCheckpoint(playerid);
    	SmugglerWork[playerid] = 0;
	}
	return 1;
}

stock SafeGivePlayerMoney(plyid, amounttogive)
{
    GivePlayerMoney(plyid,amounttogive)
	return 1;
}

public SafeResetPlayerMoney(plyid)
{
	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptMoneyUpdated[plyid] = curSecond;
	ResetPlayerMoney(plyid);
	ScriptMoney[plyid] = 0;
	return 1;
}

public SafeGivePlayerWeapon(plyid, weaponid, ammo)
{
/*	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptWeaponsUpdated[plyid] = curSecond;*/
	GivePlayerWeapon(plyid, weaponid, ammo);
	//UpdateWeaponSlots(plyid);
	return 1;
}

public SafeResetPlayerWeapons(plyid)
{
/*	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptWeaponsUpdated[plyid] = curSecond;*/
	ResetPlayerWeapons(plyid);
	//UpdateWeaponSlots(plyid);
	return 1;
}

public UpdateWeaponSlots(plyid)
{
	new weaponid, ammo;
	for (new i=0; i<13; i++)
	{
		GetPlayerWeaponData(plyid, i, weaponid, ammo);
		ScriptWeapons[plyid][i] = weaponid;
	}
	return 1;
}


public UnsetFirstSpawn(playerid)
{
	FirstSpawn[playerid] = 0;
}

public LoadHQLocks()
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new File: file = fopen("hq_locks.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		hqlock[surlock] = strval(arrCoords[0]);
		hqlock[luclock] = strval(arrCoords[1]);
		hqlock[stlock] = strval(arrCoords[2]);
		hqlock[iolock] = strval(arrCoords[3]);
		fclose(file);
	}
	return 1;
}

public SaveHQLocks()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d", hqlock[surlock], hqlock[luclock], hqlock[stlock], hqlock[iolock]);
	new File: file2 = fopen("hq_locks.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public ClearKnock(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	KnockedDown[playerid] = 0;
}

public DrugEffectGone(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 1)
	    {
	    	SetPlayerWeather(playerid, DefaultWeather);
	    	GameTextForPlayer(playerid, "~w~Effects de la drogue ~p~disparu", 3000, 1);
	    	ClearAnimations(playerid);
	    	SetTimerEx("UsingDrugsUnset", 25000, false, "i", playerid);
		}
	}
	return 1;
}

public UsingDrugsUnset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    UsingDrugs[playerid] = 0;
	}
	return 1;
}


public UnsetAfterTutorial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        AfterTutorial[playerid] = 0;
	}
	return 1;
}

public AfterSpray1(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2076.5461,-1832.5647,13.5545);
		}
	}
	return 1;
}

public AfterSpray2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1025.4225,-1033.1587,31.8380);
		}
	}
	return 1;
}

public AfterSpray3(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 488.3767,-1731.1235,11.2469);
		}
	}
	return 1;
}

public AfterSpray4(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 720.2908,-467.6113,16.3437);
		}
	}
	return 1;
}

public UnsetCrash(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrashed] = 0;
	}
	return 1;
}

public backtoclothes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
 		SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
   		SetPlayerInterior(playerid,ChangePos2[playerid][0]);
	}
	return 1;
}

public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	SafeResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			SafeGivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

public SaveTrunk()
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx <  2000)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%f\n",
		vehTrunk[idx][1],
		vehTrunkAmmo[idx][1],
		vehTrunk[idx][2],
		vehTrunkAmmo[idx][2],
		vehTrunk[idx][3],
		vehTrunkAmmo[idx][3],
		vehTrunk[idx][4],
		vehTrunkAmmo[idx][4],
		vehTrunkCounter[idx],
		vehTrunkArmour[idx]);
		if(idx == 1)
		{
			file2 = fopen("trunk.cfg", io_write);
		}
		else
		{
			file2 = fopen("trunk.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadTrunk()
{
	new arrCoords[13][64];
	new strFromFile2[256];
	new File: file = fopen("trunk.cfg", io_read);
	if (file)
	{
		new idx = 1;
		while (idx <  2000)
		{
		    fread(file, strFromFile2);
		    split(strFromFile2, arrCoords, ',');
		    vehTrunk[idx][1] = strval(arrCoords[0]);
		    vehTrunkAmmo[idx][1] = strval(arrCoords[1]);
		    vehTrunk[idx][2] = strval(arrCoords[2]);
		    vehTrunkAmmo[idx][2] = strval(arrCoords[3]);
		    vehTrunk[idx][3] = strval(arrCoords[4]);
		    vehTrunkAmmo[idx][3] = strval(arrCoords[5]);
		    vehTrunk[idx][4] = strval(arrCoords[6]);
		    vehTrunkAmmo[idx][4] = strval(arrCoords[7]);
		    vehTrunkCounter[idx] = strval(arrCoords[8]);
		    vehTrunkArmour[idx] = floatstr(arrCoords[9]);
		    idx++;
		}
	}
	return 1;
}

public DesactiverSpeedo(playerid)
{
	desactivetext[playerid] = 0;
}

public UpdateBurgerPositions()
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsMenuShowed[i] == 0)
	    {
			for(new j = 0; j < sizeof(BurgerDriveIn); j ++)
			{
			    new Float:dist;
			    dist = GetDistance(i, BurgerDriveIn[j][0], BurgerDriveIn[j][1]);
			    if(dist < 5)
			    {
			        GameTextForPlayer(i, "~n~~n~~n~~w~Bienvenue au ~r~Mac Donald~w~, Merci de selectioner un menu", 2000, 3);
			        TogglePlayerControllable(i, 0);
			        SetTimerEx("ShowMenuBurger", 2000, 0, "i", i);
			    }
			}
		}
	}
}

public ShowMenuBurger(i)
{
    BurgerShot = CreateMenu("Mac Donald", 2, 125, 150, 300);
	AddMenuItem(BurgerShot, 0, "Happy Meal");
	AddMenuItem(BurgerShot, 1, "$3");
	AddMenuItem(BurgerShot, 0, "Double Chease");
	AddMenuItem(BurgerShot, 1, "$6");
	AddMenuItem(BurgerShot, 0, "Big Mac");
	AddMenuItem(BurgerShot, 1, "$9");
	AddMenuItem(BurgerShot, 0, "- Exit -");
	ShowMenuForPlayer(BurgerShot, i);
	IsMenuShowed[i] = 1;
}

public UpdateChickenPositions()
{
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsMenuShowed[i] == 0)
	    {
			for(new j = 0; j < sizeof(ChickenDriveIn); j ++)
			{
			    new Float:dist;
			    dist = GetDistance(i, ChickenDriveIn[j][0], ChickenDriveIn[j][1]);
			    if(dist < 5)
			    {
			        GameTextForPlayer(i, "~n~~n~~n~~w~Bienvenue au macdo ~r~de Los Santos~w~, Choisit ton menu", 2000, 3);
			        TogglePlayerControllable(i, 0);
			        SetTimerEx("ShowMenuChicken", 2000, 0, "i", i);
				}
			}
		}
	}
}

public ShowMenuChicken(i)
{
    CluckinBell = CreateMenu("MacDo", 2, 125, 150, 300);
	AddMenuItem(CluckinBell, 0, "Nugets");
	AddMenuItem(CluckinBell, 1, "$3");
	AddMenuItem(CluckinBell, 0, "BigBurger");
	AddMenuItem(CluckinBell, 1, "$6");
	AddMenuItem(CluckinBell, 0, "BigMac");
	AddMenuItem(CluckinBell, 1, "$9");
	AddMenuItem(CluckinBell, 0, "- Exit -");
	ShowMenuForPlayer(CluckinBell, i);
	IsMenuShowed[i] = 1;
}

public CanDriveThruAgain(playerid)
{
	IsMenuShowed[playerid] = 0;
}

public Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

public TraceLastCall()
{
	pdtrace = 0;
	pdtrace_x = 0;
	pdtrace_y = 0;
	pdtrace_z = 0;
	emdtrace = 0;
	emdtrace_x = 0;
	emdtrace_y = 0;
	emdtrace_z = 0;
}

public ReportReset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(JustReported[playerid] == 1)
	    {
			JustReported[playerid] = 0;
	    }
	}
}
forward Arrive(playerid);
public Arrive(playerid)
{
    RegistrationStep[playerid] = 1;
   	SetPlayerInterior(playerid, 3);
	PlayerInfo[playerid][pInt] = 3;
	SetPlayerPos(playerid, 330.6825,163.6688,1014.1875);
	SetPlayerFacingAngle(playerid, 280);
	TogglePlayerControllable(playerid, 0);
	SendClientMessage(playerid, COLOR_YELLOW, "Secretaire: Bienvenue, vous devez repondre à quelques question pour l'imigration, SVP.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "Tout d'abord, êtes-vous un Homme ou une Femme?");
	return 1;
}
public ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
	}
}
/*
public FMener(playerid,id)
{
	if(Mener[id] == -1 || AMener[playerid] == -1)
	{
		Mener[id] = -1;
		AMener[playerid] = -1;
		KillTimer(TimerMener[playerid]);
	}
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	SetPlayerPos(id,x+1,y,z);
}*/
/*public Decodage(playerid)
{
    new string[256];
    new DecodageChance;
    DecodageChance = random(6);
    switch(DecodageChance)
    {
    	case 0,1,2,3,4:
     	{
			format(string,sizeof(string),"Le mot de passe du coffre est %d.",mdpbanque);
			SendClientMessage(playerid,COLOR_GREEN,string)
		    SendClientMessage(playerid, COLOR_GREEN, "/mdpbanque [code] pour ouvrir la porte");
     	}
     	case 5:
     	{
     	    SendClientMessage(playerid, COLOR_RED, "Ton decodeur a freeze pendant le decodage, recommence");
     	}
	}
}*/
forward SendAdminMessagePM(color, string[]);
public SendAdminMessagePM(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1 && VoirMp[i] == 1 )
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

/*forward SystemMort(playerid);
public SystemMort(playerid)
{
    if(IsPlayerConnected(playerid))
    {
       if(gPlayerLogged[playerid])
       {
          new Float:Health;
          GetPlayerHealth(playerid,Health);
          if(Health > 0 && Health <= 10)
          {
             return 1;
          }
          if(Health >= 0)
          {
             new string[256];
             new name[MAX_PLAYER_NAME];
             GetPlayerName(playerid,name,sizeof(name));
             SetPlayerHealth(playerid, 10);
             TogglePlayerControllable(playerid, false);
             SendClientMessage(playerid, 0xFFFFFFAA, "Vous êtes un train de mourrir,[ Tapez (\"/service Medecin\"), si personne ne vient vous pouvez mourrir tapez (\"/mourrir\")]");
             format(string,sizeof(string), "* %s s'écroule sur le sol et a besoin d'aide, il souffre...",name);
             ProxDetector(30.0, playerid, string, 	COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
             ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
             return 1;
	      }
       }
    }
    return 1;
}
forward Park(playerid);
public Park(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
	 	{
			if(Aire(playerid,1543.105, 1531.696, -1595.012, -1745.026) || Aire(playerid,1835.923, 1311.132, -1733.182, -1745.026) || Aire(playerid,1333.949, 1307.329, -1539.743, -1867.406) || Aire(playerid,1862.543, 1839.726, -1180.499,1476.579))
			{
			    return 1;
			}
		}
	}
	return 0;
}*/
forward Aire(playerid,Float:max_x,Float:min_x,Float:max_y,Float:min_y);
public Aire(playerid,Float:max_x,Float:min_x,Float:max_y,Float:min_y)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
	 	{
			new Float:x;new Float:y;new Float:z;
			GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
			if(x <= max_x && x >= min_x && y <= max_y && y >= min_y)
			{
				return 1;
			}
			return 0;
 		}
 		else
 		{
 			new Float:x;new Float:y;new Float:z;
			GetPlayerPos(playerid,x,y,z);
			if(x <= max_x && x >= min_x && y <= max_y && y >= min_y)
			{
				return 1;
			}
			return 0;
		}
	}
	return 0;
}

forward Bourrer();
public Bourrer()
{
	for(new i = 0;i<MAX_PLAYERS;i++)
	{
	    if(GetPlayerDrunkLevel(i) > 0)
	    {
	    	new Text3D:IDB;
	    	Delete3DTextLabel(IDB);
	        new d = GetPlayerDrunkLevel(i);
	        SetPlayerDrunkLevel(i,d -50);
	        IDB = Create3DTextLabel("Bourrer",COLOR_GREEN,0,0,0,10,0,0);
	        Attach3DTextLabelToPlayer(IDB,i,0,0,0.5);
			if(d <= 0)
			{
				SendClientMessage(i,COLOR_BLUE,"Ah merde! Qu' est ce que j' ai bu ?");
				Delete3DTextLabel(IDB);
			}
	    }
	}
}
forward Medic0(playerid);
public Medic0(playerid)
{
	MedicBill[playerid] = 0;
}
forward SpawnPlayerEx(playerid);
public SpawnPlayerEx(playerid)
{
		TogglePlayerControllable(playerid,true);
		SetCameraBehindPlayer(playerid);
		if(GetPlayerVirtualWorld(playerid) != 0 || PlayerInfo[playerid][pVirWorld] != 0)
		{
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirWorld] = 0;
		}
		SetPlayerPos(playerid, 1169.4908,-1324.9600,1019.6968);
		SetPlayerInterior(playerid,6);
		PlayerInfo[playerid][pInt] = 6;
   		InSpec[playerid] = 0;
}

public Fermerfourriere1()
{
    MoveStreamObject(fourriere1,1643.8198242188, -1715.1018066406, 16.284065246582, 0.97);
	Grille[5] = 0;
    return 1;
}

public Fermerfourriere2()
{
    MoveStreamObject(fourriere2,-2655.2478027344, -221.04484558105, 6.1350336074829, 0.97);
	Grille[6] = 0;
    return 1;
}
public FermerArmee1()
{
    MoveStreamObject(armee1,-1530.8883056641, 482.1833190918, 6.1796875, 0.97);
	Grille[7] = 0;
    return 1;
}
public Fermeraeroport()
{
    MoveStreamObject(aeroport,1961.5328369141, -2189.7648925781, 15.320266723633, 0.97);
	Grille[4] = 0;
    return 1;
}

public FermerRacer1()
{
    MoveStreamObject(racer1, 1595.0223388672, -2175.6259765625, 13.379755020142, 0.97);
    Grille[13] = 0;
    return 1;
}
public FermerRacer2()
{
    MoveStreamObject(racer2, 1497.2830810547, -2166.7561035156, 15.450307846069, 0.97);
    Grille[12] = 0;
    return 1;
}
public FermerBarrierePolice1()
{
    MoveStreamObject(police1, 1589.02050781, -1638.08789062, 14.95541191, 0.97);
    Grille[1] = 0;
    return 1;
}
public FermerBarrierePolice2()
{
    MoveStreamObject(police2, 1544.55432129, -1627.27563477, 11.64160728, 0.97);
    Grille[2] = 0;
    return 1;
}
public FermerBarriererusse()
{
    MoveStreamObject(russe, 1284.7415771484, -2056.7543945313, 60.710502624512, 0.97);
    Grille[8] = 0;
    return 1;
}
public Fermercosa1()
{
    MoveStreamObject(cosa1, 785.28924560547, -1152.4187011719, 25.391334533691, 0.97);
    Grille[9] = 0;
    return 1;
}
public Fermercosa2()
{
    MoveStreamObject(cosa2,664.82769775391, -1308.4271240234, 15.154035568237, 0.97);
    Grille[10] = 0;
    return 1;
}
public Fermercosa3()
{
    MoveStreamObject(cosa3,659.69165039063, -1227.2137451172, 17.413446426392, 0.97);
    Grille[11] = 0;
    return 1;
}

stock ReturnUserName(playerid)
{
	new nom[MAX_PLAYER_NAME];
	GetPlayerName(playerid,nom,sizeof(nom));
	return nom;
}
/*forward ASendAdminMessage(COLOR,message[]);
public ASendAdminMessage(COLOR,message[])
{
	for(new i = 0;i < MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerAdmin(i))
	    {
	        SendClientMessage(i,COLOR,message);
	    }
	}
}*/
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(PlayerInfo[playerid][pAdmin] >= 1 && source == CLICK_SOURCE_SCOREBOARD)
	{
	    ShowPlayerDialog(playerid,250,DIALOG_STYLE_LIST,"Admin Panel"," Freeze \n Unfreeze \n Kill \n Kick \n Ban \n Set Virtual World \n Set Interior\n Goto \n Gethere \n Avertir","Ok","Annuler");
		Clicked[playerid] = clickedplayerid;
	}
	return 1;
}
forward ChangeTemps();
public ChangeTemps()
{
	new temps = random(10);
	new mtemps = random(45);
	if(temps == 16)
	{
		temps = random(10);
	}
	SetWeather(temps);
	SetTimer("ChangeTemps",(mtemps + 1) * 60000,0);
	new str[128];
	format(str,sizeof(str),"[ADMIN]: Prochain changement de temps dans %d minutes",mtemps);
	SendAdminMessage(COLOR_RED,str);
}
forward SaveAccount(playerid);
public SaveAccount(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid])
		{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "users/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
				new var[64];
				format(var, 64, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				format(var, 64, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 64, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 64, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 64, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 64, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 64, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 64, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 64, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 64, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 64, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 64, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 64, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 64, "Money=%d\n",GetPlayerMoney(playerid));fwrite(hFile, var);
				format(var, 64, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 64, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 64, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 64, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 64, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 64, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 64, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 64, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 64, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 64, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 64, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 64, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 64, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 64, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 64, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 64, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 64, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
				format(var, 64, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 64, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 64, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 64, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 64, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 64, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 64, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 64, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 64, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 64, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 64, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 64, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 64, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 64, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 64, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 64, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 64, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 64, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 64, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 64, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 64, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 64, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 64, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 64, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 64, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
   	                PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				new Float:x, Float:y, Float:z;
     			GetPlayerPos(playerid,x,y,z);
				PlayerInfo[playerid][pPos_x] = x;
				PlayerInfo[playerid][pPos_y] = y;
				PlayerInfo[playerid][pPos_z] = z;
				format(var, 64, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 64, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 64, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 64, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 64, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 64, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 64, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 64, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 64, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 64, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 64, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 64, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 64, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 64, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 64, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 64, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 64, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 64, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 64, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 64, "Watch=%d\n",PlayerInfo[playerid][pWatch]);fwrite(hFile, var);
				format(var, 64, "Crashed=%d\n",PlayerInfo[playerid][pCrashed]);fwrite(hFile, var);
				format(var, 64, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 64, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 64, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 64, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 64, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 64, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 64, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 64, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 64, "Mission=%d\n",PlayerInfo[playerid][pMissionNr]);fwrite(hFile, var);
				format(var, 64, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 64, "VirWorld=%d\n",PlayerInfo[playerid][pVirWorld]);fwrite(hFile, var);
				if(PlayerInfo[playerid][pDonateRank] < 1) { PlayerInfo[playerid][pFuel] = 0; }
				format(var, 64, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 64, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 64, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 64, "FishTool=%d\n",PlayerInfo[playerid][pFishTool]);fwrite(hFile, var);
    			format(var, 64, "Note1=%s\n",PlayerInfo[playerid][pNote1]);fwrite(hFile, var);
				format(var, 64, "Note1s=%d\n",PlayerInfo[playerid][pNote1s]);fwrite(hFile, var);
				format(var, 64, "Note2=%s\n",PlayerInfo[playerid][pNote2]);fwrite(hFile, var);
				format(var, 64, "Note2s=%d\n",PlayerInfo[playerid][pNote2s]);fwrite(hFile, var);
				format(var, 64, "Note3=%s\n",PlayerInfo[playerid][pNote3]);fwrite(hFile, var);
				format(var, 64, "Note3s=%d\n",PlayerInfo[playerid][pNote3s]);fwrite(hFile, var);
				format(var, 64, "Note4=%s\n",PlayerInfo[playerid][pNote4]);fwrite(hFile, var);
				format(var, 64, "Note4s=%d\n",PlayerInfo[playerid][pNote4s]);fwrite(hFile, var);
				format(var, 64, "Note5=%s\n",PlayerInfo[playerid][pNote5]);fwrite(hFile, var);
				format(var, 64, "Note5s=%d\n",PlayerInfo[playerid][pNote5s]);fwrite(hFile, var);
				format(var, 64, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 64, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 64, "Lighter=%d\n",PlayerInfo[playerid][pLighter]);fwrite(hFile, var);
				format(var, 64, "Cigarettes=%d\n",PlayerInfo[playerid][pCigarettes]);fwrite(hFile, var);
				format(var, 64, "Biere=%d\n",PlayerInfo[playerid][pBiere]);fwrite(hFile, var);
				format(var, 64, "Locked=%d\n",PlayerInfo[playerid][pLocked]);fwrite(hFile, var);
                format(var, 64, "Robbank=%d\n",PlayerInfo[playerid][probbank]);fwrite(hFile, var);
                format(var, 64, "Decoder=%d\n",PlayerInfo[playerid][Decoder]);fwrite(hFile, var);
				format(var, 64, "Mask=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
    			format(var, 64, "Radio=%d\n",PlayerInfo[playerid][Radio]);fwrite(hFile, var);
				format(var, 64, "Frequence=%d\n",PlayerInfo[playerid][Frequence]);fwrite(hFile, var);
				for (new i = 0; i < 13; i++)
				{
				    GetPlayerWeaponData(playerid, i, Asweapon[playerid][i][0], Asweapon[playerid][i][1]);
				    format(var, 64, "Weapon_%d=%d\n",i,Asweapon[playerid][i][0]);fwrite(hFile, var);
				    format(var, 64, "Ammo_%d=%d\n",i,Asweapon[playerid][i][1]);fwrite(hFile, var);
				}
				format(var, 64,"Avertissement=%d",Avertissement[playerid]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return 0;
}
public ChangeHostname()
{
     new var = random(3);
     switch (var)
     {
         case 0: SendRconCommand("hostname [FR]~GOL~|~RolePlay~[V1.0]");
         case 1: SendRconCommand("hostname Recuperation de compte !");
         case 2: SendRconCommand("hostname http://gamingofliferoleplay.forum2jeux.com/");
     }
}
